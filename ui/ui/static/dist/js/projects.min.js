(() => {
  var __create = Object.create;
  var __defProp = Object.defineProperty;
  var __getProtoOf = Object.getPrototypeOf;
  var __hasOwnProp = Object.prototype.hasOwnProperty;
  var __getOwnPropNames = Object.getOwnPropertyNames;
  var __getOwnPropDesc = Object.getOwnPropertyDescriptor;
  var __markAsModule = (target) => __defProp(target, "__esModule", {value: true});
  var __commonJS = (callback, module) => () => {
    if (!module) {
      module = {exports: {}};
      callback(module.exports, module);
    }
    return module.exports;
  };
  var __exportStar = (target, module, desc) => {
    if (module && typeof module === "object" || typeof module === "function") {
      for (let key of __getOwnPropNames(module))
        if (!__hasOwnProp.call(target, key) && key !== "default")
          __defProp(target, key, {get: () => module[key], enumerable: !(desc = __getOwnPropDesc(module, key)) || desc.enumerable});
    }
    return target;
  };
  var __toModule = (module) => {
    return __exportStar(__markAsModule(__defProp(module != null ? __create(__getProtoOf(module)) : {}, "default", module && module.__esModule && "default" in module ? {get: () => module.default, enumerable: true} : {value: module, enumerable: true})), module);
  };

  // node_modules/jquery/dist/jquery.js
  var require_jquery = __commonJS((exports, module) => {
    /*!
     * jQuery JavaScript Library v3.6.0
     * https://jquery.com/
     *
     * Includes Sizzle.js
     * https://sizzlejs.com/
     *
     * Copyright OpenJS Foundation and other contributors
     * Released under the MIT license
     * https://jquery.org/license
     *
     * Date: 2021-03-02T17:08Z
     */
    (function(global, factory) {
      "use strict";
      if (typeof module === "object" && typeof module.exports === "object") {
        module.exports = global.document ? factory(global, true) : function(w) {
          if (!w.document) {
            throw new Error("jQuery requires a window with a document");
          }
          return factory(w);
        };
      } else {
        factory(global);
      }
    })(typeof window !== "undefined" ? window : exports, function(window2, noGlobal) {
      "use strict";
      var arr = [];
      var getProto = Object.getPrototypeOf;
      var slice = arr.slice;
      var flat = arr.flat ? function(array) {
        return arr.flat.call(array);
      } : function(array) {
        return arr.concat.apply([], array);
      };
      var push = arr.push;
      var indexOf = arr.indexOf;
      var class2type = {};
      var toString = class2type.toString;
      var hasOwn = class2type.hasOwnProperty;
      var fnToString = hasOwn.toString;
      var ObjectFunctionString = fnToString.call(Object);
      var support = {};
      var isFunction = function isFunction2(obj) {
        return typeof obj === "function" && typeof obj.nodeType !== "number" && typeof obj.item !== "function";
      };
      var isWindow = function isWindow2(obj) {
        return obj != null && obj === obj.window;
      };
      var document2 = window2.document;
      var preservedScriptAttributes = {
        type: true,
        src: true,
        nonce: true,
        noModule: true
      };
      function DOMEval(code, node, doc) {
        doc = doc || document2;
        var i, val, script = doc.createElement("script");
        script.text = code;
        if (node) {
          for (i in preservedScriptAttributes) {
            val = node[i] || node.getAttribute && node.getAttribute(i);
            if (val) {
              script.setAttribute(i, val);
            }
          }
        }
        doc.head.appendChild(script).parentNode.removeChild(script);
      }
      function toType(obj) {
        if (obj == null) {
          return obj + "";
        }
        return typeof obj === "object" || typeof obj === "function" ? class2type[toString.call(obj)] || "object" : typeof obj;
      }
      var version = "3.6.0", jQuery3 = function(selector, context) {
        return new jQuery3.fn.init(selector, context);
      };
      jQuery3.fn = jQuery3.prototype = {
        jquery: version,
        constructor: jQuery3,
        length: 0,
        toArray: function() {
          return slice.call(this);
        },
        get: function(num) {
          if (num == null) {
            return slice.call(this);
          }
          return num < 0 ? this[num + this.length] : this[num];
        },
        pushStack: function(elems) {
          var ret = jQuery3.merge(this.constructor(), elems);
          ret.prevObject = this;
          return ret;
        },
        each: function(callback) {
          return jQuery3.each(this, callback);
        },
        map: function(callback) {
          return this.pushStack(jQuery3.map(this, function(elem, i) {
            return callback.call(elem, i, elem);
          }));
        },
        slice: function() {
          return this.pushStack(slice.apply(this, arguments));
        },
        first: function() {
          return this.eq(0);
        },
        last: function() {
          return this.eq(-1);
        },
        even: function() {
          return this.pushStack(jQuery3.grep(this, function(_elem, i) {
            return (i + 1) % 2;
          }));
        },
        odd: function() {
          return this.pushStack(jQuery3.grep(this, function(_elem, i) {
            return i % 2;
          }));
        },
        eq: function(i) {
          var len = this.length, j = +i + (i < 0 ? len : 0);
          return this.pushStack(j >= 0 && j < len ? [this[j]] : []);
        },
        end: function() {
          return this.prevObject || this.constructor();
        },
        push,
        sort: arr.sort,
        splice: arr.splice
      };
      jQuery3.extend = jQuery3.fn.extend = function() {
        var options, name, src, copy, copyIsArray, clone, target = arguments[0] || {}, i = 1, length = arguments.length, deep = false;
        if (typeof target === "boolean") {
          deep = target;
          target = arguments[i] || {};
          i++;
        }
        if (typeof target !== "object" && !isFunction(target)) {
          target = {};
        }
        if (i === length) {
          target = this;
          i--;
        }
        for (; i < length; i++) {
          if ((options = arguments[i]) != null) {
            for (name in options) {
              copy = options[name];
              if (name === "__proto__" || target === copy) {
                continue;
              }
              if (deep && copy && (jQuery3.isPlainObject(copy) || (copyIsArray = Array.isArray(copy)))) {
                src = target[name];
                if (copyIsArray && !Array.isArray(src)) {
                  clone = [];
                } else if (!copyIsArray && !jQuery3.isPlainObject(src)) {
                  clone = {};
                } else {
                  clone = src;
                }
                copyIsArray = false;
                target[name] = jQuery3.extend(deep, clone, copy);
              } else if (copy !== void 0) {
                target[name] = copy;
              }
            }
          }
        }
        return target;
      };
      jQuery3.extend({
        expando: "jQuery" + (version + Math.random()).replace(/\D/g, ""),
        isReady: true,
        error: function(msg) {
          throw new Error(msg);
        },
        noop: function() {
        },
        isPlainObject: function(obj) {
          var proto, Ctor;
          if (!obj || toString.call(obj) !== "[object Object]") {
            return false;
          }
          proto = getProto(obj);
          if (!proto) {
            return true;
          }
          Ctor = hasOwn.call(proto, "constructor") && proto.constructor;
          return typeof Ctor === "function" && fnToString.call(Ctor) === ObjectFunctionString;
        },
        isEmptyObject: function(obj) {
          var name;
          for (name in obj) {
            return false;
          }
          return true;
        },
        globalEval: function(code, options, doc) {
          DOMEval(code, {nonce: options && options.nonce}, doc);
        },
        each: function(obj, callback) {
          var length, i = 0;
          if (isArrayLike(obj)) {
            length = obj.length;
            for (; i < length; i++) {
              if (callback.call(obj[i], i, obj[i]) === false) {
                break;
              }
            }
          } else {
            for (i in obj) {
              if (callback.call(obj[i], i, obj[i]) === false) {
                break;
              }
            }
          }
          return obj;
        },
        makeArray: function(arr2, results) {
          var ret = results || [];
          if (arr2 != null) {
            if (isArrayLike(Object(arr2))) {
              jQuery3.merge(ret, typeof arr2 === "string" ? [arr2] : arr2);
            } else {
              push.call(ret, arr2);
            }
          }
          return ret;
        },
        inArray: function(elem, arr2, i) {
          return arr2 == null ? -1 : indexOf.call(arr2, elem, i);
        },
        merge: function(first, second) {
          var len = +second.length, j = 0, i = first.length;
          for (; j < len; j++) {
            first[i++] = second[j];
          }
          first.length = i;
          return first;
        },
        grep: function(elems, callback, invert) {
          var callbackInverse, matches = [], i = 0, length = elems.length, callbackExpect = !invert;
          for (; i < length; i++) {
            callbackInverse = !callback(elems[i], i);
            if (callbackInverse !== callbackExpect) {
              matches.push(elems[i]);
            }
          }
          return matches;
        },
        map: function(elems, callback, arg) {
          var length, value, i = 0, ret = [];
          if (isArrayLike(elems)) {
            length = elems.length;
            for (; i < length; i++) {
              value = callback(elems[i], i, arg);
              if (value != null) {
                ret.push(value);
              }
            }
          } else {
            for (i in elems) {
              value = callback(elems[i], i, arg);
              if (value != null) {
                ret.push(value);
              }
            }
          }
          return flat(ret);
        },
        guid: 1,
        support
      });
      if (typeof Symbol === "function") {
        jQuery3.fn[Symbol.iterator] = arr[Symbol.iterator];
      }
      jQuery3.each("Boolean Number String Function Array Date RegExp Object Error Symbol".split(" "), function(_i, name) {
        class2type["[object " + name + "]"] = name.toLowerCase();
      });
      function isArrayLike(obj) {
        var length = !!obj && "length" in obj && obj.length, type = toType(obj);
        if (isFunction(obj) || isWindow(obj)) {
          return false;
        }
        return type === "array" || length === 0 || typeof length === "number" && length > 0 && length - 1 in obj;
      }
      var Sizzle = function(window3) {
        var i, support2, Expr, getText, isXML, tokenize, compile, select, outermostContext, sortInput, hasDuplicate, setDocument, document3, docElem, documentIsHTML, rbuggyQSA, rbuggyMatches, matches, contains, expando = "sizzle" + 1 * new Date(), preferredDoc = window3.document, dirruns = 0, done = 0, classCache = createCache(), tokenCache = createCache(), compilerCache = createCache(), nonnativeSelectorCache = createCache(), sortOrder = function(a, b) {
          if (a === b) {
            hasDuplicate = true;
          }
          return 0;
        }, hasOwn2 = {}.hasOwnProperty, arr2 = [], pop = arr2.pop, pushNative = arr2.push, push2 = arr2.push, slice2 = arr2.slice, indexOf2 = function(list, elem) {
          var i2 = 0, len = list.length;
          for (; i2 < len; i2++) {
            if (list[i2] === elem) {
              return i2;
            }
          }
          return -1;
        }, booleans = "checked|selected|async|autofocus|autoplay|controls|defer|disabled|hidden|ismap|loop|multiple|open|readonly|required|scoped", whitespace = "[\\x20\\t\\r\\n\\f]", identifier = "(?:\\\\[\\da-fA-F]{1,6}" + whitespace + "?|\\\\[^\\r\\n\\f]|[\\w-]|[^\0-\\x7f])+", attributes = "\\[" + whitespace + "*(" + identifier + ")(?:" + whitespace + "*([*^$|!~]?=)" + whitespace + `*(?:'((?:\\\\.|[^\\\\'])*)'|"((?:\\\\.|[^\\\\"])*)"|(` + identifier + "))|)" + whitespace + "*\\]", pseudos = ":(" + identifier + `)(?:\\((('((?:\\\\.|[^\\\\'])*)'|"((?:\\\\.|[^\\\\"])*)")|((?:\\\\.|[^\\\\()[\\]]|` + attributes + ")*)|.*)\\)|)", rwhitespace = new RegExp(whitespace + "+", "g"), rtrim2 = new RegExp("^" + whitespace + "+|((?:^|[^\\\\])(?:\\\\.)*)" + whitespace + "+$", "g"), rcomma = new RegExp("^" + whitespace + "*," + whitespace + "*"), rcombinators = new RegExp("^" + whitespace + "*([>+~]|" + whitespace + ")" + whitespace + "*"), rdescend = new RegExp(whitespace + "|>"), rpseudo = new RegExp(pseudos), ridentifier = new RegExp("^" + identifier + "$"), matchExpr = {
          ID: new RegExp("^#(" + identifier + ")"),
          CLASS: new RegExp("^\\.(" + identifier + ")"),
          TAG: new RegExp("^(" + identifier + "|[*])"),
          ATTR: new RegExp("^" + attributes),
          PSEUDO: new RegExp("^" + pseudos),
          CHILD: new RegExp("^:(only|first|last|nth|nth-last)-(child|of-type)(?:\\(" + whitespace + "*(even|odd|(([+-]|)(\\d*)n|)" + whitespace + "*(?:([+-]|)" + whitespace + "*(\\d+)|))" + whitespace + "*\\)|)", "i"),
          bool: new RegExp("^(?:" + booleans + ")$", "i"),
          needsContext: new RegExp("^" + whitespace + "*[>+~]|:(even|odd|eq|gt|lt|nth|first|last)(?:\\(" + whitespace + "*((?:-\\d)?\\d*)" + whitespace + "*\\)|)(?=[^-]|$)", "i")
        }, rhtml2 = /HTML$/i, rinputs = /^(?:input|select|textarea|button)$/i, rheader = /^h\d$/i, rnative = /^[^{]+\{\s*\[native \w/, rquickExpr2 = /^(?:#([\w-]+)|(\w+)|\.([\w-]+))$/, rsibling = /[+~]/, runescape = new RegExp("\\\\[\\da-fA-F]{1,6}" + whitespace + "?|\\\\([^\\r\\n\\f])", "g"), funescape = function(escape, nonHex) {
          var high = "0x" + escape.slice(1) - 65536;
          return nonHex ? nonHex : high < 0 ? String.fromCharCode(high + 65536) : String.fromCharCode(high >> 10 | 55296, high & 1023 | 56320);
        }, rcssescape = /([\0-\x1f\x7f]|^-?\d)|^-$|[^\0-\x1f\x7f-\uFFFF\w-]/g, fcssescape = function(ch, asCodePoint) {
          if (asCodePoint) {
            if (ch === "\0") {
              return "\uFFFD";
            }
            return ch.slice(0, -1) + "\\" + ch.charCodeAt(ch.length - 1).toString(16) + " ";
          }
          return "\\" + ch;
        }, unloadHandler = function() {
          setDocument();
        }, inDisabledFieldset = addCombinator(function(elem) {
          return elem.disabled === true && elem.nodeName.toLowerCase() === "fieldset";
        }, {dir: "parentNode", next: "legend"});
        try {
          push2.apply(arr2 = slice2.call(preferredDoc.childNodes), preferredDoc.childNodes);
          arr2[preferredDoc.childNodes.length].nodeType;
        } catch (e) {
          push2 = {
            apply: arr2.length ? function(target, els) {
              pushNative.apply(target, slice2.call(els));
            } : function(target, els) {
              var j = target.length, i2 = 0;
              while (target[j++] = els[i2++]) {
              }
              target.length = j - 1;
            }
          };
        }
        function Sizzle2(selector, context, results, seed) {
          var m, i2, elem, nid, match, groups, newSelector, newContext = context && context.ownerDocument, nodeType = context ? context.nodeType : 9;
          results = results || [];
          if (typeof selector !== "string" || !selector || nodeType !== 1 && nodeType !== 9 && nodeType !== 11) {
            return results;
          }
          if (!seed) {
            setDocument(context);
            context = context || document3;
            if (documentIsHTML) {
              if (nodeType !== 11 && (match = rquickExpr2.exec(selector))) {
                if (m = match[1]) {
                  if (nodeType === 9) {
                    if (elem = context.getElementById(m)) {
                      if (elem.id === m) {
                        results.push(elem);
                        return results;
                      }
                    } else {
                      return results;
                    }
                  } else {
                    if (newContext && (elem = newContext.getElementById(m)) && contains(context, elem) && elem.id === m) {
                      results.push(elem);
                      return results;
                    }
                  }
                } else if (match[2]) {
                  push2.apply(results, context.getElementsByTagName(selector));
                  return results;
                } else if ((m = match[3]) && support2.getElementsByClassName && context.getElementsByClassName) {
                  push2.apply(results, context.getElementsByClassName(m));
                  return results;
                }
              }
              if (support2.qsa && !nonnativeSelectorCache[selector + " "] && (!rbuggyQSA || !rbuggyQSA.test(selector)) && (nodeType !== 1 || context.nodeName.toLowerCase() !== "object")) {
                newSelector = selector;
                newContext = context;
                if (nodeType === 1 && (rdescend.test(selector) || rcombinators.test(selector))) {
                  newContext = rsibling.test(selector) && testContext(context.parentNode) || context;
                  if (newContext !== context || !support2.scope) {
                    if (nid = context.getAttribute("id")) {
                      nid = nid.replace(rcssescape, fcssescape);
                    } else {
                      context.setAttribute("id", nid = expando);
                    }
                  }
                  groups = tokenize(selector);
                  i2 = groups.length;
                  while (i2--) {
                    groups[i2] = (nid ? "#" + nid : ":scope") + " " + toSelector(groups[i2]);
                  }
                  newSelector = groups.join(",");
                }
                try {
                  push2.apply(results, newContext.querySelectorAll(newSelector));
                  return results;
                } catch (qsaError) {
                  nonnativeSelectorCache(selector, true);
                } finally {
                  if (nid === expando) {
                    context.removeAttribute("id");
                  }
                }
              }
            }
          }
          return select(selector.replace(rtrim2, "$1"), context, results, seed);
        }
        function createCache() {
          var keys = [];
          function cache(key, value) {
            if (keys.push(key + " ") > Expr.cacheLength) {
              delete cache[keys.shift()];
            }
            return cache[key + " "] = value;
          }
          return cache;
        }
        function markFunction(fn) {
          fn[expando] = true;
          return fn;
        }
        function assert(fn) {
          var el = document3.createElement("fieldset");
          try {
            return !!fn(el);
          } catch (e) {
            return false;
          } finally {
            if (el.parentNode) {
              el.parentNode.removeChild(el);
            }
            el = null;
          }
        }
        function addHandle(attrs, handler) {
          var arr3 = attrs.split("|"), i2 = arr3.length;
          while (i2--) {
            Expr.attrHandle[arr3[i2]] = handler;
          }
        }
        function siblingCheck(a, b) {
          var cur = b && a, diff = cur && a.nodeType === 1 && b.nodeType === 1 && a.sourceIndex - b.sourceIndex;
          if (diff) {
            return diff;
          }
          if (cur) {
            while (cur = cur.nextSibling) {
              if (cur === b) {
                return -1;
              }
            }
          }
          return a ? 1 : -1;
        }
        function createInputPseudo(type) {
          return function(elem) {
            var name = elem.nodeName.toLowerCase();
            return name === "input" && elem.type === type;
          };
        }
        function createButtonPseudo(type) {
          return function(elem) {
            var name = elem.nodeName.toLowerCase();
            return (name === "input" || name === "button") && elem.type === type;
          };
        }
        function createDisabledPseudo(disabled) {
          return function(elem) {
            if ("form" in elem) {
              if (elem.parentNode && elem.disabled === false) {
                if ("label" in elem) {
                  if ("label" in elem.parentNode) {
                    return elem.parentNode.disabled === disabled;
                  } else {
                    return elem.disabled === disabled;
                  }
                }
                return elem.isDisabled === disabled || elem.isDisabled !== !disabled && inDisabledFieldset(elem) === disabled;
              }
              return elem.disabled === disabled;
            } else if ("label" in elem) {
              return elem.disabled === disabled;
            }
            return false;
          };
        }
        function createPositionalPseudo(fn) {
          return markFunction(function(argument) {
            argument = +argument;
            return markFunction(function(seed, matches2) {
              var j, matchIndexes = fn([], seed.length, argument), i2 = matchIndexes.length;
              while (i2--) {
                if (seed[j = matchIndexes[i2]]) {
                  seed[j] = !(matches2[j] = seed[j]);
                }
              }
            });
          });
        }
        function testContext(context) {
          return context && typeof context.getElementsByTagName !== "undefined" && context;
        }
        support2 = Sizzle2.support = {};
        isXML = Sizzle2.isXML = function(elem) {
          var namespace = elem && elem.namespaceURI, docElem2 = elem && (elem.ownerDocument || elem).documentElement;
          return !rhtml2.test(namespace || docElem2 && docElem2.nodeName || "HTML");
        };
        setDocument = Sizzle2.setDocument = function(node) {
          var hasCompare, subWindow, doc = node ? node.ownerDocument || node : preferredDoc;
          if (doc == document3 || doc.nodeType !== 9 || !doc.documentElement) {
            return document3;
          }
          document3 = doc;
          docElem = document3.documentElement;
          documentIsHTML = !isXML(document3);
          if (preferredDoc != document3 && (subWindow = document3.defaultView) && subWindow.top !== subWindow) {
            if (subWindow.addEventListener) {
              subWindow.addEventListener("unload", unloadHandler, false);
            } else if (subWindow.attachEvent) {
              subWindow.attachEvent("onunload", unloadHandler);
            }
          }
          support2.scope = assert(function(el) {
            docElem.appendChild(el).appendChild(document3.createElement("div"));
            return typeof el.querySelectorAll !== "undefined" && !el.querySelectorAll(":scope fieldset div").length;
          });
          support2.attributes = assert(function(el) {
            el.className = "i";
            return !el.getAttribute("className");
          });
          support2.getElementsByTagName = assert(function(el) {
            el.appendChild(document3.createComment(""));
            return !el.getElementsByTagName("*").length;
          });
          support2.getElementsByClassName = rnative.test(document3.getElementsByClassName);
          support2.getById = assert(function(el) {
            docElem.appendChild(el).id = expando;
            return !document3.getElementsByName || !document3.getElementsByName(expando).length;
          });
          if (support2.getById) {
            Expr.filter["ID"] = function(id) {
              var attrId = id.replace(runescape, funescape);
              return function(elem) {
                return elem.getAttribute("id") === attrId;
              };
            };
            Expr.find["ID"] = function(id, context) {
              if (typeof context.getElementById !== "undefined" && documentIsHTML) {
                var elem = context.getElementById(id);
                return elem ? [elem] : [];
              }
            };
          } else {
            Expr.filter["ID"] = function(id) {
              var attrId = id.replace(runescape, funescape);
              return function(elem) {
                var node2 = typeof elem.getAttributeNode !== "undefined" && elem.getAttributeNode("id");
                return node2 && node2.value === attrId;
              };
            };
            Expr.find["ID"] = function(id, context) {
              if (typeof context.getElementById !== "undefined" && documentIsHTML) {
                var node2, i2, elems, elem = context.getElementById(id);
                if (elem) {
                  node2 = elem.getAttributeNode("id");
                  if (node2 && node2.value === id) {
                    return [elem];
                  }
                  elems = context.getElementsByName(id);
                  i2 = 0;
                  while (elem = elems[i2++]) {
                    node2 = elem.getAttributeNode("id");
                    if (node2 && node2.value === id) {
                      return [elem];
                    }
                  }
                }
                return [];
              }
            };
          }
          Expr.find["TAG"] = support2.getElementsByTagName ? function(tag, context) {
            if (typeof context.getElementsByTagName !== "undefined") {
              return context.getElementsByTagName(tag);
            } else if (support2.qsa) {
              return context.querySelectorAll(tag);
            }
          } : function(tag, context) {
            var elem, tmp = [], i2 = 0, results = context.getElementsByTagName(tag);
            if (tag === "*") {
              while (elem = results[i2++]) {
                if (elem.nodeType === 1) {
                  tmp.push(elem);
                }
              }
              return tmp;
            }
            return results;
          };
          Expr.find["CLASS"] = support2.getElementsByClassName && function(className, context) {
            if (typeof context.getElementsByClassName !== "undefined" && documentIsHTML) {
              return context.getElementsByClassName(className);
            }
          };
          rbuggyMatches = [];
          rbuggyQSA = [];
          if (support2.qsa = rnative.test(document3.querySelectorAll)) {
            assert(function(el) {
              var input;
              docElem.appendChild(el).innerHTML = "<a id='" + expando + "'></a><select id='" + expando + "-\r\\' msallowcapture=''><option selected=''></option></select>";
              if (el.querySelectorAll("[msallowcapture^='']").length) {
                rbuggyQSA.push("[*^$]=" + whitespace + `*(?:''|"")`);
              }
              if (!el.querySelectorAll("[selected]").length) {
                rbuggyQSA.push("\\[" + whitespace + "*(?:value|" + booleans + ")");
              }
              if (!el.querySelectorAll("[id~=" + expando + "-]").length) {
                rbuggyQSA.push("~=");
              }
              input = document3.createElement("input");
              input.setAttribute("name", "");
              el.appendChild(input);
              if (!el.querySelectorAll("[name='']").length) {
                rbuggyQSA.push("\\[" + whitespace + "*name" + whitespace + "*=" + whitespace + `*(?:''|"")`);
              }
              if (!el.querySelectorAll(":checked").length) {
                rbuggyQSA.push(":checked");
              }
              if (!el.querySelectorAll("a#" + expando + "+*").length) {
                rbuggyQSA.push(".#.+[+~]");
              }
              el.querySelectorAll("\\\f");
              rbuggyQSA.push("[\\r\\n\\f]");
            });
            assert(function(el) {
              el.innerHTML = "<a href='' disabled='disabled'></a><select disabled='disabled'><option/></select>";
              var input = document3.createElement("input");
              input.setAttribute("type", "hidden");
              el.appendChild(input).setAttribute("name", "D");
              if (el.querySelectorAll("[name=d]").length) {
                rbuggyQSA.push("name" + whitespace + "*[*^$|!~]?=");
              }
              if (el.querySelectorAll(":enabled").length !== 2) {
                rbuggyQSA.push(":enabled", ":disabled");
              }
              docElem.appendChild(el).disabled = true;
              if (el.querySelectorAll(":disabled").length !== 2) {
                rbuggyQSA.push(":enabled", ":disabled");
              }
              el.querySelectorAll("*,:x");
              rbuggyQSA.push(",.*:");
            });
          }
          if (support2.matchesSelector = rnative.test(matches = docElem.matches || docElem.webkitMatchesSelector || docElem.mozMatchesSelector || docElem.oMatchesSelector || docElem.msMatchesSelector)) {
            assert(function(el) {
              support2.disconnectedMatch = matches.call(el, "*");
              matches.call(el, "[s!='']:x");
              rbuggyMatches.push("!=", pseudos);
            });
          }
          rbuggyQSA = rbuggyQSA.length && new RegExp(rbuggyQSA.join("|"));
          rbuggyMatches = rbuggyMatches.length && new RegExp(rbuggyMatches.join("|"));
          hasCompare = rnative.test(docElem.compareDocumentPosition);
          contains = hasCompare || rnative.test(docElem.contains) ? function(a, b) {
            var adown = a.nodeType === 9 ? a.documentElement : a, bup = b && b.parentNode;
            return a === bup || !!(bup && bup.nodeType === 1 && (adown.contains ? adown.contains(bup) : a.compareDocumentPosition && a.compareDocumentPosition(bup) & 16));
          } : function(a, b) {
            if (b) {
              while (b = b.parentNode) {
                if (b === a) {
                  return true;
                }
              }
            }
            return false;
          };
          sortOrder = hasCompare ? function(a, b) {
            if (a === b) {
              hasDuplicate = true;
              return 0;
            }
            var compare = !a.compareDocumentPosition - !b.compareDocumentPosition;
            if (compare) {
              return compare;
            }
            compare = (a.ownerDocument || a) == (b.ownerDocument || b) ? a.compareDocumentPosition(b) : 1;
            if (compare & 1 || !support2.sortDetached && b.compareDocumentPosition(a) === compare) {
              if (a == document3 || a.ownerDocument == preferredDoc && contains(preferredDoc, a)) {
                return -1;
              }
              if (b == document3 || b.ownerDocument == preferredDoc && contains(preferredDoc, b)) {
                return 1;
              }
              return sortInput ? indexOf2(sortInput, a) - indexOf2(sortInput, b) : 0;
            }
            return compare & 4 ? -1 : 1;
          } : function(a, b) {
            if (a === b) {
              hasDuplicate = true;
              return 0;
            }
            var cur, i2 = 0, aup = a.parentNode, bup = b.parentNode, ap = [a], bp = [b];
            if (!aup || !bup) {
              return a == document3 ? -1 : b == document3 ? 1 : aup ? -1 : bup ? 1 : sortInput ? indexOf2(sortInput, a) - indexOf2(sortInput, b) : 0;
            } else if (aup === bup) {
              return siblingCheck(a, b);
            }
            cur = a;
            while (cur = cur.parentNode) {
              ap.unshift(cur);
            }
            cur = b;
            while (cur = cur.parentNode) {
              bp.unshift(cur);
            }
            while (ap[i2] === bp[i2]) {
              i2++;
            }
            return i2 ? siblingCheck(ap[i2], bp[i2]) : ap[i2] == preferredDoc ? -1 : bp[i2] == preferredDoc ? 1 : 0;
          };
          return document3;
        };
        Sizzle2.matches = function(expr, elements) {
          return Sizzle2(expr, null, null, elements);
        };
        Sizzle2.matchesSelector = function(elem, expr) {
          setDocument(elem);
          if (support2.matchesSelector && documentIsHTML && !nonnativeSelectorCache[expr + " "] && (!rbuggyMatches || !rbuggyMatches.test(expr)) && (!rbuggyQSA || !rbuggyQSA.test(expr))) {
            try {
              var ret = matches.call(elem, expr);
              if (ret || support2.disconnectedMatch || elem.document && elem.document.nodeType !== 11) {
                return ret;
              }
            } catch (e) {
              nonnativeSelectorCache(expr, true);
            }
          }
          return Sizzle2(expr, document3, null, [elem]).length > 0;
        };
        Sizzle2.contains = function(context, elem) {
          if ((context.ownerDocument || context) != document3) {
            setDocument(context);
          }
          return contains(context, elem);
        };
        Sizzle2.attr = function(elem, name) {
          if ((elem.ownerDocument || elem) != document3) {
            setDocument(elem);
          }
          var fn = Expr.attrHandle[name.toLowerCase()], val = fn && hasOwn2.call(Expr.attrHandle, name.toLowerCase()) ? fn(elem, name, !documentIsHTML) : void 0;
          return val !== void 0 ? val : support2.attributes || !documentIsHTML ? elem.getAttribute(name) : (val = elem.getAttributeNode(name)) && val.specified ? val.value : null;
        };
        Sizzle2.escape = function(sel) {
          return (sel + "").replace(rcssescape, fcssescape);
        };
        Sizzle2.error = function(msg) {
          throw new Error("Syntax error, unrecognized expression: " + msg);
        };
        Sizzle2.uniqueSort = function(results) {
          var elem, duplicates = [], j = 0, i2 = 0;
          hasDuplicate = !support2.detectDuplicates;
          sortInput = !support2.sortStable && results.slice(0);
          results.sort(sortOrder);
          if (hasDuplicate) {
            while (elem = results[i2++]) {
              if (elem === results[i2]) {
                j = duplicates.push(i2);
              }
            }
            while (j--) {
              results.splice(duplicates[j], 1);
            }
          }
          sortInput = null;
          return results;
        };
        getText = Sizzle2.getText = function(elem) {
          var node, ret = "", i2 = 0, nodeType = elem.nodeType;
          if (!nodeType) {
            while (node = elem[i2++]) {
              ret += getText(node);
            }
          } else if (nodeType === 1 || nodeType === 9 || nodeType === 11) {
            if (typeof elem.textContent === "string") {
              return elem.textContent;
            } else {
              for (elem = elem.firstChild; elem; elem = elem.nextSibling) {
                ret += getText(elem);
              }
            }
          } else if (nodeType === 3 || nodeType === 4) {
            return elem.nodeValue;
          }
          return ret;
        };
        Expr = Sizzle2.selectors = {
          cacheLength: 50,
          createPseudo: markFunction,
          match: matchExpr,
          attrHandle: {},
          find: {},
          relative: {
            ">": {dir: "parentNode", first: true},
            " ": {dir: "parentNode"},
            "+": {dir: "previousSibling", first: true},
            "~": {dir: "previousSibling"}
          },
          preFilter: {
            ATTR: function(match) {
              match[1] = match[1].replace(runescape, funescape);
              match[3] = (match[3] || match[4] || match[5] || "").replace(runescape, funescape);
              if (match[2] === "~=") {
                match[3] = " " + match[3] + " ";
              }
              return match.slice(0, 4);
            },
            CHILD: function(match) {
              match[1] = match[1].toLowerCase();
              if (match[1].slice(0, 3) === "nth") {
                if (!match[3]) {
                  Sizzle2.error(match[0]);
                }
                match[4] = +(match[4] ? match[5] + (match[6] || 1) : 2 * (match[3] === "even" || match[3] === "odd"));
                match[5] = +(match[7] + match[8] || match[3] === "odd");
              } else if (match[3]) {
                Sizzle2.error(match[0]);
              }
              return match;
            },
            PSEUDO: function(match) {
              var excess, unquoted = !match[6] && match[2];
              if (matchExpr["CHILD"].test(match[0])) {
                return null;
              }
              if (match[3]) {
                match[2] = match[4] || match[5] || "";
              } else if (unquoted && rpseudo.test(unquoted) && (excess = tokenize(unquoted, true)) && (excess = unquoted.indexOf(")", unquoted.length - excess) - unquoted.length)) {
                match[0] = match[0].slice(0, excess);
                match[2] = unquoted.slice(0, excess);
              }
              return match.slice(0, 3);
            }
          },
          filter: {
            TAG: function(nodeNameSelector) {
              var nodeName2 = nodeNameSelector.replace(runescape, funescape).toLowerCase();
              return nodeNameSelector === "*" ? function() {
                return true;
              } : function(elem) {
                return elem.nodeName && elem.nodeName.toLowerCase() === nodeName2;
              };
            },
            CLASS: function(className) {
              var pattern = classCache[className + " "];
              return pattern || (pattern = new RegExp("(^|" + whitespace + ")" + className + "(" + whitespace + "|$)")) && classCache(className, function(elem) {
                return pattern.test(typeof elem.className === "string" && elem.className || typeof elem.getAttribute !== "undefined" && elem.getAttribute("class") || "");
              });
            },
            ATTR: function(name, operator, check) {
              return function(elem) {
                var result = Sizzle2.attr(elem, name);
                if (result == null) {
                  return operator === "!=";
                }
                if (!operator) {
                  return true;
                }
                result += "";
                return operator === "=" ? result === check : operator === "!=" ? result !== check : operator === "^=" ? check && result.indexOf(check) === 0 : operator === "*=" ? check && result.indexOf(check) > -1 : operator === "$=" ? check && result.slice(-check.length) === check : operator === "~=" ? (" " + result.replace(rwhitespace, " ") + " ").indexOf(check) > -1 : operator === "|=" ? result === check || result.slice(0, check.length + 1) === check + "-" : false;
              };
            },
            CHILD: function(type, what, _argument, first, last) {
              var simple = type.slice(0, 3) !== "nth", forward = type.slice(-4) !== "last", ofType = what === "of-type";
              return first === 1 && last === 0 ? function(elem) {
                return !!elem.parentNode;
              } : function(elem, _context, xml) {
                var cache, uniqueCache, outerCache, node, nodeIndex, start, dir2 = simple !== forward ? "nextSibling" : "previousSibling", parent = elem.parentNode, name = ofType && elem.nodeName.toLowerCase(), useCache = !xml && !ofType, diff = false;
                if (parent) {
                  if (simple) {
                    while (dir2) {
                      node = elem;
                      while (node = node[dir2]) {
                        if (ofType ? node.nodeName.toLowerCase() === name : node.nodeType === 1) {
                          return false;
                        }
                      }
                      start = dir2 = type === "only" && !start && "nextSibling";
                    }
                    return true;
                  }
                  start = [forward ? parent.firstChild : parent.lastChild];
                  if (forward && useCache) {
                    node = parent;
                    outerCache = node[expando] || (node[expando] = {});
                    uniqueCache = outerCache[node.uniqueID] || (outerCache[node.uniqueID] = {});
                    cache = uniqueCache[type] || [];
                    nodeIndex = cache[0] === dirruns && cache[1];
                    diff = nodeIndex && cache[2];
                    node = nodeIndex && parent.childNodes[nodeIndex];
                    while (node = ++nodeIndex && node && node[dir2] || (diff = nodeIndex = 0) || start.pop()) {
                      if (node.nodeType === 1 && ++diff && node === elem) {
                        uniqueCache[type] = [dirruns, nodeIndex, diff];
                        break;
                      }
                    }
                  } else {
                    if (useCache) {
                      node = elem;
                      outerCache = node[expando] || (node[expando] = {});
                      uniqueCache = outerCache[node.uniqueID] || (outerCache[node.uniqueID] = {});
                      cache = uniqueCache[type] || [];
                      nodeIndex = cache[0] === dirruns && cache[1];
                      diff = nodeIndex;
                    }
                    if (diff === false) {
                      while (node = ++nodeIndex && node && node[dir2] || (diff = nodeIndex = 0) || start.pop()) {
                        if ((ofType ? node.nodeName.toLowerCase() === name : node.nodeType === 1) && ++diff) {
                          if (useCache) {
                            outerCache = node[expando] || (node[expando] = {});
                            uniqueCache = outerCache[node.uniqueID] || (outerCache[node.uniqueID] = {});
                            uniqueCache[type] = [dirruns, diff];
                          }
                          if (node === elem) {
                            break;
                          }
                        }
                      }
                    }
                  }
                  diff -= last;
                  return diff === first || diff % first === 0 && diff / first >= 0;
                }
              };
            },
            PSEUDO: function(pseudo, argument) {
              var args, fn = Expr.pseudos[pseudo] || Expr.setFilters[pseudo.toLowerCase()] || Sizzle2.error("unsupported pseudo: " + pseudo);
              if (fn[expando]) {
                return fn(argument);
              }
              if (fn.length > 1) {
                args = [pseudo, pseudo, "", argument];
                return Expr.setFilters.hasOwnProperty(pseudo.toLowerCase()) ? markFunction(function(seed, matches2) {
                  var idx, matched = fn(seed, argument), i2 = matched.length;
                  while (i2--) {
                    idx = indexOf2(seed, matched[i2]);
                    seed[idx] = !(matches2[idx] = matched[i2]);
                  }
                }) : function(elem) {
                  return fn(elem, 0, args);
                };
              }
              return fn;
            }
          },
          pseudos: {
            not: markFunction(function(selector) {
              var input = [], results = [], matcher = compile(selector.replace(rtrim2, "$1"));
              return matcher[expando] ? markFunction(function(seed, matches2, _context, xml) {
                var elem, unmatched = matcher(seed, null, xml, []), i2 = seed.length;
                while (i2--) {
                  if (elem = unmatched[i2]) {
                    seed[i2] = !(matches2[i2] = elem);
                  }
                }
              }) : function(elem, _context, xml) {
                input[0] = elem;
                matcher(input, null, xml, results);
                input[0] = null;
                return !results.pop();
              };
            }),
            has: markFunction(function(selector) {
              return function(elem) {
                return Sizzle2(selector, elem).length > 0;
              };
            }),
            contains: markFunction(function(text) {
              text = text.replace(runescape, funescape);
              return function(elem) {
                return (elem.textContent || getText(elem)).indexOf(text) > -1;
              };
            }),
            lang: markFunction(function(lang) {
              if (!ridentifier.test(lang || "")) {
                Sizzle2.error("unsupported lang: " + lang);
              }
              lang = lang.replace(runescape, funescape).toLowerCase();
              return function(elem) {
                var elemLang;
                do {
                  if (elemLang = documentIsHTML ? elem.lang : elem.getAttribute("xml:lang") || elem.getAttribute("lang")) {
                    elemLang = elemLang.toLowerCase();
                    return elemLang === lang || elemLang.indexOf(lang + "-") === 0;
                  }
                } while ((elem = elem.parentNode) && elem.nodeType === 1);
                return false;
              };
            }),
            target: function(elem) {
              var hash = window3.location && window3.location.hash;
              return hash && hash.slice(1) === elem.id;
            },
            root: function(elem) {
              return elem === docElem;
            },
            focus: function(elem) {
              return elem === document3.activeElement && (!document3.hasFocus || document3.hasFocus()) && !!(elem.type || elem.href || ~elem.tabIndex);
            },
            enabled: createDisabledPseudo(false),
            disabled: createDisabledPseudo(true),
            checked: function(elem) {
              var nodeName2 = elem.nodeName.toLowerCase();
              return nodeName2 === "input" && !!elem.checked || nodeName2 === "option" && !!elem.selected;
            },
            selected: function(elem) {
              if (elem.parentNode) {
                elem.parentNode.selectedIndex;
              }
              return elem.selected === true;
            },
            empty: function(elem) {
              for (elem = elem.firstChild; elem; elem = elem.nextSibling) {
                if (elem.nodeType < 6) {
                  return false;
                }
              }
              return true;
            },
            parent: function(elem) {
              return !Expr.pseudos["empty"](elem);
            },
            header: function(elem) {
              return rheader.test(elem.nodeName);
            },
            input: function(elem) {
              return rinputs.test(elem.nodeName);
            },
            button: function(elem) {
              var name = elem.nodeName.toLowerCase();
              return name === "input" && elem.type === "button" || name === "button";
            },
            text: function(elem) {
              var attr;
              return elem.nodeName.toLowerCase() === "input" && elem.type === "text" && ((attr = elem.getAttribute("type")) == null || attr.toLowerCase() === "text");
            },
            first: createPositionalPseudo(function() {
              return [0];
            }),
            last: createPositionalPseudo(function(_matchIndexes, length) {
              return [length - 1];
            }),
            eq: createPositionalPseudo(function(_matchIndexes, length, argument) {
              return [argument < 0 ? argument + length : argument];
            }),
            even: createPositionalPseudo(function(matchIndexes, length) {
              var i2 = 0;
              for (; i2 < length; i2 += 2) {
                matchIndexes.push(i2);
              }
              return matchIndexes;
            }),
            odd: createPositionalPseudo(function(matchIndexes, length) {
              var i2 = 1;
              for (; i2 < length; i2 += 2) {
                matchIndexes.push(i2);
              }
              return matchIndexes;
            }),
            lt: createPositionalPseudo(function(matchIndexes, length, argument) {
              var i2 = argument < 0 ? argument + length : argument > length ? length : argument;
              for (; --i2 >= 0; ) {
                matchIndexes.push(i2);
              }
              return matchIndexes;
            }),
            gt: createPositionalPseudo(function(matchIndexes, length, argument) {
              var i2 = argument < 0 ? argument + length : argument;
              for (; ++i2 < length; ) {
                matchIndexes.push(i2);
              }
              return matchIndexes;
            })
          }
        };
        Expr.pseudos["nth"] = Expr.pseudos["eq"];
        for (i in {radio: true, checkbox: true, file: true, password: true, image: true}) {
          Expr.pseudos[i] = createInputPseudo(i);
        }
        for (i in {submit: true, reset: true}) {
          Expr.pseudos[i] = createButtonPseudo(i);
        }
        function setFilters() {
        }
        setFilters.prototype = Expr.filters = Expr.pseudos;
        Expr.setFilters = new setFilters();
        tokenize = Sizzle2.tokenize = function(selector, parseOnly) {
          var matched, match, tokens, type, soFar, groups, preFilters, cached = tokenCache[selector + " "];
          if (cached) {
            return parseOnly ? 0 : cached.slice(0);
          }
          soFar = selector;
          groups = [];
          preFilters = Expr.preFilter;
          while (soFar) {
            if (!matched || (match = rcomma.exec(soFar))) {
              if (match) {
                soFar = soFar.slice(match[0].length) || soFar;
              }
              groups.push(tokens = []);
            }
            matched = false;
            if (match = rcombinators.exec(soFar)) {
              matched = match.shift();
              tokens.push({
                value: matched,
                type: match[0].replace(rtrim2, " ")
              });
              soFar = soFar.slice(matched.length);
            }
            for (type in Expr.filter) {
              if ((match = matchExpr[type].exec(soFar)) && (!preFilters[type] || (match = preFilters[type](match)))) {
                matched = match.shift();
                tokens.push({
                  value: matched,
                  type,
                  matches: match
                });
                soFar = soFar.slice(matched.length);
              }
            }
            if (!matched) {
              break;
            }
          }
          return parseOnly ? soFar.length : soFar ? Sizzle2.error(selector) : tokenCache(selector, groups).slice(0);
        };
        function toSelector(tokens) {
          var i2 = 0, len = tokens.length, selector = "";
          for (; i2 < len; i2++) {
            selector += tokens[i2].value;
          }
          return selector;
        }
        function addCombinator(matcher, combinator, base) {
          var dir2 = combinator.dir, skip = combinator.next, key = skip || dir2, checkNonElements = base && key === "parentNode", doneName = done++;
          return combinator.first ? function(elem, context, xml) {
            while (elem = elem[dir2]) {
              if (elem.nodeType === 1 || checkNonElements) {
                return matcher(elem, context, xml);
              }
            }
            return false;
          } : function(elem, context, xml) {
            var oldCache, uniqueCache, outerCache, newCache = [dirruns, doneName];
            if (xml) {
              while (elem = elem[dir2]) {
                if (elem.nodeType === 1 || checkNonElements) {
                  if (matcher(elem, context, xml)) {
                    return true;
                  }
                }
              }
            } else {
              while (elem = elem[dir2]) {
                if (elem.nodeType === 1 || checkNonElements) {
                  outerCache = elem[expando] || (elem[expando] = {});
                  uniqueCache = outerCache[elem.uniqueID] || (outerCache[elem.uniqueID] = {});
                  if (skip && skip === elem.nodeName.toLowerCase()) {
                    elem = elem[dir2] || elem;
                  } else if ((oldCache = uniqueCache[key]) && oldCache[0] === dirruns && oldCache[1] === doneName) {
                    return newCache[2] = oldCache[2];
                  } else {
                    uniqueCache[key] = newCache;
                    if (newCache[2] = matcher(elem, context, xml)) {
                      return true;
                    }
                  }
                }
              }
            }
            return false;
          };
        }
        function elementMatcher(matchers) {
          return matchers.length > 1 ? function(elem, context, xml) {
            var i2 = matchers.length;
            while (i2--) {
              if (!matchers[i2](elem, context, xml)) {
                return false;
              }
            }
            return true;
          } : matchers[0];
        }
        function multipleContexts(selector, contexts, results) {
          var i2 = 0, len = contexts.length;
          for (; i2 < len; i2++) {
            Sizzle2(selector, contexts[i2], results);
          }
          return results;
        }
        function condense(unmatched, map, filter, context, xml) {
          var elem, newUnmatched = [], i2 = 0, len = unmatched.length, mapped = map != null;
          for (; i2 < len; i2++) {
            if (elem = unmatched[i2]) {
              if (!filter || filter(elem, context, xml)) {
                newUnmatched.push(elem);
                if (mapped) {
                  map.push(i2);
                }
              }
            }
          }
          return newUnmatched;
        }
        function setMatcher(preFilter, selector, matcher, postFilter, postFinder, postSelector) {
          if (postFilter && !postFilter[expando]) {
            postFilter = setMatcher(postFilter);
          }
          if (postFinder && !postFinder[expando]) {
            postFinder = setMatcher(postFinder, postSelector);
          }
          return markFunction(function(seed, results, context, xml) {
            var temp, i2, elem, preMap = [], postMap = [], preexisting = results.length, elems = seed || multipleContexts(selector || "*", context.nodeType ? [context] : context, []), matcherIn = preFilter && (seed || !selector) ? condense(elems, preMap, preFilter, context, xml) : elems, matcherOut = matcher ? postFinder || (seed ? preFilter : preexisting || postFilter) ? [] : results : matcherIn;
            if (matcher) {
              matcher(matcherIn, matcherOut, context, xml);
            }
            if (postFilter) {
              temp = condense(matcherOut, postMap);
              postFilter(temp, [], context, xml);
              i2 = temp.length;
              while (i2--) {
                if (elem = temp[i2]) {
                  matcherOut[postMap[i2]] = !(matcherIn[postMap[i2]] = elem);
                }
              }
            }
            if (seed) {
              if (postFinder || preFilter) {
                if (postFinder) {
                  temp = [];
                  i2 = matcherOut.length;
                  while (i2--) {
                    if (elem = matcherOut[i2]) {
                      temp.push(matcherIn[i2] = elem);
                    }
                  }
                  postFinder(null, matcherOut = [], temp, xml);
                }
                i2 = matcherOut.length;
                while (i2--) {
                  if ((elem = matcherOut[i2]) && (temp = postFinder ? indexOf2(seed, elem) : preMap[i2]) > -1) {
                    seed[temp] = !(results[temp] = elem);
                  }
                }
              }
            } else {
              matcherOut = condense(matcherOut === results ? matcherOut.splice(preexisting, matcherOut.length) : matcherOut);
              if (postFinder) {
                postFinder(null, results, matcherOut, xml);
              } else {
                push2.apply(results, matcherOut);
              }
            }
          });
        }
        function matcherFromTokens(tokens) {
          var checkContext, matcher, j, len = tokens.length, leadingRelative = Expr.relative[tokens[0].type], implicitRelative = leadingRelative || Expr.relative[" "], i2 = leadingRelative ? 1 : 0, matchContext = addCombinator(function(elem) {
            return elem === checkContext;
          }, implicitRelative, true), matchAnyContext = addCombinator(function(elem) {
            return indexOf2(checkContext, elem) > -1;
          }, implicitRelative, true), matchers = [function(elem, context, xml) {
            var ret = !leadingRelative && (xml || context !== outermostContext) || ((checkContext = context).nodeType ? matchContext(elem, context, xml) : matchAnyContext(elem, context, xml));
            checkContext = null;
            return ret;
          }];
          for (; i2 < len; i2++) {
            if (matcher = Expr.relative[tokens[i2].type]) {
              matchers = [addCombinator(elementMatcher(matchers), matcher)];
            } else {
              matcher = Expr.filter[tokens[i2].type].apply(null, tokens[i2].matches);
              if (matcher[expando]) {
                j = ++i2;
                for (; j < len; j++) {
                  if (Expr.relative[tokens[j].type]) {
                    break;
                  }
                }
                return setMatcher(i2 > 1 && elementMatcher(matchers), i2 > 1 && toSelector(tokens.slice(0, i2 - 1).concat({value: tokens[i2 - 2].type === " " ? "*" : ""})).replace(rtrim2, "$1"), matcher, i2 < j && matcherFromTokens(tokens.slice(i2, j)), j < len && matcherFromTokens(tokens = tokens.slice(j)), j < len && toSelector(tokens));
              }
              matchers.push(matcher);
            }
          }
          return elementMatcher(matchers);
        }
        function matcherFromGroupMatchers(elementMatchers, setMatchers) {
          var bySet = setMatchers.length > 0, byElement = elementMatchers.length > 0, superMatcher = function(seed, context, xml, results, outermost) {
            var elem, j, matcher, matchedCount = 0, i2 = "0", unmatched = seed && [], setMatched = [], contextBackup = outermostContext, elems = seed || byElement && Expr.find["TAG"]("*", outermost), dirrunsUnique = dirruns += contextBackup == null ? 1 : Math.random() || 0.1, len = elems.length;
            if (outermost) {
              outermostContext = context == document3 || context || outermost;
            }
            for (; i2 !== len && (elem = elems[i2]) != null; i2++) {
              if (byElement && elem) {
                j = 0;
                if (!context && elem.ownerDocument != document3) {
                  setDocument(elem);
                  xml = !documentIsHTML;
                }
                while (matcher = elementMatchers[j++]) {
                  if (matcher(elem, context || document3, xml)) {
                    results.push(elem);
                    break;
                  }
                }
                if (outermost) {
                  dirruns = dirrunsUnique;
                }
              }
              if (bySet) {
                if (elem = !matcher && elem) {
                  matchedCount--;
                }
                if (seed) {
                  unmatched.push(elem);
                }
              }
            }
            matchedCount += i2;
            if (bySet && i2 !== matchedCount) {
              j = 0;
              while (matcher = setMatchers[j++]) {
                matcher(unmatched, setMatched, context, xml);
              }
              if (seed) {
                if (matchedCount > 0) {
                  while (i2--) {
                    if (!(unmatched[i2] || setMatched[i2])) {
                      setMatched[i2] = pop.call(results);
                    }
                  }
                }
                setMatched = condense(setMatched);
              }
              push2.apply(results, setMatched);
              if (outermost && !seed && setMatched.length > 0 && matchedCount + setMatchers.length > 1) {
                Sizzle2.uniqueSort(results);
              }
            }
            if (outermost) {
              dirruns = dirrunsUnique;
              outermostContext = contextBackup;
            }
            return unmatched;
          };
          return bySet ? markFunction(superMatcher) : superMatcher;
        }
        compile = Sizzle2.compile = function(selector, match) {
          var i2, setMatchers = [], elementMatchers = [], cached = compilerCache[selector + " "];
          if (!cached) {
            if (!match) {
              match = tokenize(selector);
            }
            i2 = match.length;
            while (i2--) {
              cached = matcherFromTokens(match[i2]);
              if (cached[expando]) {
                setMatchers.push(cached);
              } else {
                elementMatchers.push(cached);
              }
            }
            cached = compilerCache(selector, matcherFromGroupMatchers(elementMatchers, setMatchers));
            cached.selector = selector;
          }
          return cached;
        };
        select = Sizzle2.select = function(selector, context, results, seed) {
          var i2, tokens, token, type, find, compiled = typeof selector === "function" && selector, match = !seed && tokenize(selector = compiled.selector || selector);
          results = results || [];
          if (match.length === 1) {
            tokens = match[0] = match[0].slice(0);
            if (tokens.length > 2 && (token = tokens[0]).type === "ID" && context.nodeType === 9 && documentIsHTML && Expr.relative[tokens[1].type]) {
              context = (Expr.find["ID"](token.matches[0].replace(runescape, funescape), context) || [])[0];
              if (!context) {
                return results;
              } else if (compiled) {
                context = context.parentNode;
              }
              selector = selector.slice(tokens.shift().value.length);
            }
            i2 = matchExpr["needsContext"].test(selector) ? 0 : tokens.length;
            while (i2--) {
              token = tokens[i2];
              if (Expr.relative[type = token.type]) {
                break;
              }
              if (find = Expr.find[type]) {
                if (seed = find(token.matches[0].replace(runescape, funescape), rsibling.test(tokens[0].type) && testContext(context.parentNode) || context)) {
                  tokens.splice(i2, 1);
                  selector = seed.length && toSelector(tokens);
                  if (!selector) {
                    push2.apply(results, seed);
                    return results;
                  }
                  break;
                }
              }
            }
          }
          (compiled || compile(selector, match))(seed, context, !documentIsHTML, results, !context || rsibling.test(selector) && testContext(context.parentNode) || context);
          return results;
        };
        support2.sortStable = expando.split("").sort(sortOrder).join("") === expando;
        support2.detectDuplicates = !!hasDuplicate;
        setDocument();
        support2.sortDetached = assert(function(el) {
          return el.compareDocumentPosition(document3.createElement("fieldset")) & 1;
        });
        if (!assert(function(el) {
          el.innerHTML = "<a href='#'></a>";
          return el.firstChild.getAttribute("href") === "#";
        })) {
          addHandle("type|href|height|width", function(elem, name, isXML2) {
            if (!isXML2) {
              return elem.getAttribute(name, name.toLowerCase() === "type" ? 1 : 2);
            }
          });
        }
        if (!support2.attributes || !assert(function(el) {
          el.innerHTML = "<input/>";
          el.firstChild.setAttribute("value", "");
          return el.firstChild.getAttribute("value") === "";
        })) {
          addHandle("value", function(elem, _name, isXML2) {
            if (!isXML2 && elem.nodeName.toLowerCase() === "input") {
              return elem.defaultValue;
            }
          });
        }
        if (!assert(function(el) {
          return el.getAttribute("disabled") == null;
        })) {
          addHandle(booleans, function(elem, name, isXML2) {
            var val;
            if (!isXML2) {
              return elem[name] === true ? name.toLowerCase() : (val = elem.getAttributeNode(name)) && val.specified ? val.value : null;
            }
          });
        }
        return Sizzle2;
      }(window2);
      jQuery3.find = Sizzle;
      jQuery3.expr = Sizzle.selectors;
      jQuery3.expr[":"] = jQuery3.expr.pseudos;
      jQuery3.uniqueSort = jQuery3.unique = Sizzle.uniqueSort;
      jQuery3.text = Sizzle.getText;
      jQuery3.isXMLDoc = Sizzle.isXML;
      jQuery3.contains = Sizzle.contains;
      jQuery3.escapeSelector = Sizzle.escape;
      var dir = function(elem, dir2, until) {
        var matched = [], truncate = until !== void 0;
        while ((elem = elem[dir2]) && elem.nodeType !== 9) {
          if (elem.nodeType === 1) {
            if (truncate && jQuery3(elem).is(until)) {
              break;
            }
            matched.push(elem);
          }
        }
        return matched;
      };
      var siblings = function(n, elem) {
        var matched = [];
        for (; n; n = n.nextSibling) {
          if (n.nodeType === 1 && n !== elem) {
            matched.push(n);
          }
        }
        return matched;
      };
      var rneedsContext = jQuery3.expr.match.needsContext;
      function nodeName(elem, name) {
        return elem.nodeName && elem.nodeName.toLowerCase() === name.toLowerCase();
      }
      var rsingleTag = /^<([a-z][^\/\0>:\x20\t\r\n\f]*)[\x20\t\r\n\f]*\/?>(?:<\/\1>|)$/i;
      function winnow(elements, qualifier, not) {
        if (isFunction(qualifier)) {
          return jQuery3.grep(elements, function(elem, i) {
            return !!qualifier.call(elem, i, elem) !== not;
          });
        }
        if (qualifier.nodeType) {
          return jQuery3.grep(elements, function(elem) {
            return elem === qualifier !== not;
          });
        }
        if (typeof qualifier !== "string") {
          return jQuery3.grep(elements, function(elem) {
            return indexOf.call(qualifier, elem) > -1 !== not;
          });
        }
        return jQuery3.filter(qualifier, elements, not);
      }
      jQuery3.filter = function(expr, elems, not) {
        var elem = elems[0];
        if (not) {
          expr = ":not(" + expr + ")";
        }
        if (elems.length === 1 && elem.nodeType === 1) {
          return jQuery3.find.matchesSelector(elem, expr) ? [elem] : [];
        }
        return jQuery3.find.matches(expr, jQuery3.grep(elems, function(elem2) {
          return elem2.nodeType === 1;
        }));
      };
      jQuery3.fn.extend({
        find: function(selector) {
          var i, ret, len = this.length, self = this;
          if (typeof selector !== "string") {
            return this.pushStack(jQuery3(selector).filter(function() {
              for (i = 0; i < len; i++) {
                if (jQuery3.contains(self[i], this)) {
                  return true;
                }
              }
            }));
          }
          ret = this.pushStack([]);
          for (i = 0; i < len; i++) {
            jQuery3.find(selector, self[i], ret);
          }
          return len > 1 ? jQuery3.uniqueSort(ret) : ret;
        },
        filter: function(selector) {
          return this.pushStack(winnow(this, selector || [], false));
        },
        not: function(selector) {
          return this.pushStack(winnow(this, selector || [], true));
        },
        is: function(selector) {
          return !!winnow(this, typeof selector === "string" && rneedsContext.test(selector) ? jQuery3(selector) : selector || [], false).length;
        }
      });
      var rootjQuery, rquickExpr = /^(?:\s*(<[\w\W]+>)[^>]*|#([\w-]+))$/, init = jQuery3.fn.init = function(selector, context, root) {
        var match, elem;
        if (!selector) {
          return this;
        }
        root = root || rootjQuery;
        if (typeof selector === "string") {
          if (selector[0] === "<" && selector[selector.length - 1] === ">" && selector.length >= 3) {
            match = [null, selector, null];
          } else {
            match = rquickExpr.exec(selector);
          }
          if (match && (match[1] || !context)) {
            if (match[1]) {
              context = context instanceof jQuery3 ? context[0] : context;
              jQuery3.merge(this, jQuery3.parseHTML(match[1], context && context.nodeType ? context.ownerDocument || context : document2, true));
              if (rsingleTag.test(match[1]) && jQuery3.isPlainObject(context)) {
                for (match in context) {
                  if (isFunction(this[match])) {
                    this[match](context[match]);
                  } else {
                    this.attr(match, context[match]);
                  }
                }
              }
              return this;
            } else {
              elem = document2.getElementById(match[2]);
              if (elem) {
                this[0] = elem;
                this.length = 1;
              }
              return this;
            }
          } else if (!context || context.jquery) {
            return (context || root).find(selector);
          } else {
            return this.constructor(context).find(selector);
          }
        } else if (selector.nodeType) {
          this[0] = selector;
          this.length = 1;
          return this;
        } else if (isFunction(selector)) {
          return root.ready !== void 0 ? root.ready(selector) : selector(jQuery3);
        }
        return jQuery3.makeArray(selector, this);
      };
      init.prototype = jQuery3.fn;
      rootjQuery = jQuery3(document2);
      var rparentsprev = /^(?:parents|prev(?:Until|All))/, guaranteedUnique = {
        children: true,
        contents: true,
        next: true,
        prev: true
      };
      jQuery3.fn.extend({
        has: function(target) {
          var targets = jQuery3(target, this), l = targets.length;
          return this.filter(function() {
            var i = 0;
            for (; i < l; i++) {
              if (jQuery3.contains(this, targets[i])) {
                return true;
              }
            }
          });
        },
        closest: function(selectors, context) {
          var cur, i = 0, l = this.length, matched = [], targets = typeof selectors !== "string" && jQuery3(selectors);
          if (!rneedsContext.test(selectors)) {
            for (; i < l; i++) {
              for (cur = this[i]; cur && cur !== context; cur = cur.parentNode) {
                if (cur.nodeType < 11 && (targets ? targets.index(cur) > -1 : cur.nodeType === 1 && jQuery3.find.matchesSelector(cur, selectors))) {
                  matched.push(cur);
                  break;
                }
              }
            }
          }
          return this.pushStack(matched.length > 1 ? jQuery3.uniqueSort(matched) : matched);
        },
        index: function(elem) {
          if (!elem) {
            return this[0] && this[0].parentNode ? this.first().prevAll().length : -1;
          }
          if (typeof elem === "string") {
            return indexOf.call(jQuery3(elem), this[0]);
          }
          return indexOf.call(this, elem.jquery ? elem[0] : elem);
        },
        add: function(selector, context) {
          return this.pushStack(jQuery3.uniqueSort(jQuery3.merge(this.get(), jQuery3(selector, context))));
        },
        addBack: function(selector) {
          return this.add(selector == null ? this.prevObject : this.prevObject.filter(selector));
        }
      });
      function sibling(cur, dir2) {
        while ((cur = cur[dir2]) && cur.nodeType !== 1) {
        }
        return cur;
      }
      jQuery3.each({
        parent: function(elem) {
          var parent = elem.parentNode;
          return parent && parent.nodeType !== 11 ? parent : null;
        },
        parents: function(elem) {
          return dir(elem, "parentNode");
        },
        parentsUntil: function(elem, _i, until) {
          return dir(elem, "parentNode", until);
        },
        next: function(elem) {
          return sibling(elem, "nextSibling");
        },
        prev: function(elem) {
          return sibling(elem, "previousSibling");
        },
        nextAll: function(elem) {
          return dir(elem, "nextSibling");
        },
        prevAll: function(elem) {
          return dir(elem, "previousSibling");
        },
        nextUntil: function(elem, _i, until) {
          return dir(elem, "nextSibling", until);
        },
        prevUntil: function(elem, _i, until) {
          return dir(elem, "previousSibling", until);
        },
        siblings: function(elem) {
          return siblings((elem.parentNode || {}).firstChild, elem);
        },
        children: function(elem) {
          return siblings(elem.firstChild);
        },
        contents: function(elem) {
          if (elem.contentDocument != null && getProto(elem.contentDocument)) {
            return elem.contentDocument;
          }
          if (nodeName(elem, "template")) {
            elem = elem.content || elem;
          }
          return jQuery3.merge([], elem.childNodes);
        }
      }, function(name, fn) {
        jQuery3.fn[name] = function(until, selector) {
          var matched = jQuery3.map(this, fn, until);
          if (name.slice(-5) !== "Until") {
            selector = until;
          }
          if (selector && typeof selector === "string") {
            matched = jQuery3.filter(selector, matched);
          }
          if (this.length > 1) {
            if (!guaranteedUnique[name]) {
              jQuery3.uniqueSort(matched);
            }
            if (rparentsprev.test(name)) {
              matched.reverse();
            }
          }
          return this.pushStack(matched);
        };
      });
      var rnothtmlwhite = /[^\x20\t\r\n\f]+/g;
      function createOptions(options) {
        var object = {};
        jQuery3.each(options.match(rnothtmlwhite) || [], function(_, flag) {
          object[flag] = true;
        });
        return object;
      }
      jQuery3.Callbacks = function(options) {
        options = typeof options === "string" ? createOptions(options) : jQuery3.extend({}, options);
        var firing, memory, fired, locked, list = [], queue = [], firingIndex = -1, fire = function() {
          locked = locked || options.once;
          fired = firing = true;
          for (; queue.length; firingIndex = -1) {
            memory = queue.shift();
            while (++firingIndex < list.length) {
              if (list[firingIndex].apply(memory[0], memory[1]) === false && options.stopOnFalse) {
                firingIndex = list.length;
                memory = false;
              }
            }
          }
          if (!options.memory) {
            memory = false;
          }
          firing = false;
          if (locked) {
            if (memory) {
              list = [];
            } else {
              list = "";
            }
          }
        }, self = {
          add: function() {
            if (list) {
              if (memory && !firing) {
                firingIndex = list.length - 1;
                queue.push(memory);
              }
              (function add(args) {
                jQuery3.each(args, function(_, arg) {
                  if (isFunction(arg)) {
                    if (!options.unique || !self.has(arg)) {
                      list.push(arg);
                    }
                  } else if (arg && arg.length && toType(arg) !== "string") {
                    add(arg);
                  }
                });
              })(arguments);
              if (memory && !firing) {
                fire();
              }
            }
            return this;
          },
          remove: function() {
            jQuery3.each(arguments, function(_, arg) {
              var index;
              while ((index = jQuery3.inArray(arg, list, index)) > -1) {
                list.splice(index, 1);
                if (index <= firingIndex) {
                  firingIndex--;
                }
              }
            });
            return this;
          },
          has: function(fn) {
            return fn ? jQuery3.inArray(fn, list) > -1 : list.length > 0;
          },
          empty: function() {
            if (list) {
              list = [];
            }
            return this;
          },
          disable: function() {
            locked = queue = [];
            list = memory = "";
            return this;
          },
          disabled: function() {
            return !list;
          },
          lock: function() {
            locked = queue = [];
            if (!memory && !firing) {
              list = memory = "";
            }
            return this;
          },
          locked: function() {
            return !!locked;
          },
          fireWith: function(context, args) {
            if (!locked) {
              args = args || [];
              args = [context, args.slice ? args.slice() : args];
              queue.push(args);
              if (!firing) {
                fire();
              }
            }
            return this;
          },
          fire: function() {
            self.fireWith(this, arguments);
            return this;
          },
          fired: function() {
            return !!fired;
          }
        };
        return self;
      };
      function Identity(v) {
        return v;
      }
      function Thrower(ex) {
        throw ex;
      }
      function adoptValue(value, resolve, reject, noValue) {
        var method;
        try {
          if (value && isFunction(method = value.promise)) {
            method.call(value).done(resolve).fail(reject);
          } else if (value && isFunction(method = value.then)) {
            method.call(value, resolve, reject);
          } else {
            resolve.apply(void 0, [value].slice(noValue));
          }
        } catch (value2) {
          reject.apply(void 0, [value2]);
        }
      }
      jQuery3.extend({
        Deferred: function(func) {
          var tuples = [
            [
              "notify",
              "progress",
              jQuery3.Callbacks("memory"),
              jQuery3.Callbacks("memory"),
              2
            ],
            [
              "resolve",
              "done",
              jQuery3.Callbacks("once memory"),
              jQuery3.Callbacks("once memory"),
              0,
              "resolved"
            ],
            [
              "reject",
              "fail",
              jQuery3.Callbacks("once memory"),
              jQuery3.Callbacks("once memory"),
              1,
              "rejected"
            ]
          ], state = "pending", promise = {
            state: function() {
              return state;
            },
            always: function() {
              deferred.done(arguments).fail(arguments);
              return this;
            },
            catch: function(fn) {
              return promise.then(null, fn);
            },
            pipe: function() {
              var fns = arguments;
              return jQuery3.Deferred(function(newDefer) {
                jQuery3.each(tuples, function(_i, tuple) {
                  var fn = isFunction(fns[tuple[4]]) && fns[tuple[4]];
                  deferred[tuple[1]](function() {
                    var returned = fn && fn.apply(this, arguments);
                    if (returned && isFunction(returned.promise)) {
                      returned.promise().progress(newDefer.notify).done(newDefer.resolve).fail(newDefer.reject);
                    } else {
                      newDefer[tuple[0] + "With"](this, fn ? [returned] : arguments);
                    }
                  });
                });
                fns = null;
              }).promise();
            },
            then: function(onFulfilled, onRejected, onProgress) {
              var maxDepth = 0;
              function resolve(depth, deferred2, handler, special) {
                return function() {
                  var that = this, args = arguments, mightThrow = function() {
                    var returned, then;
                    if (depth < maxDepth) {
                      return;
                    }
                    returned = handler.apply(that, args);
                    if (returned === deferred2.promise()) {
                      throw new TypeError("Thenable self-resolution");
                    }
                    then = returned && (typeof returned === "object" || typeof returned === "function") && returned.then;
                    if (isFunction(then)) {
                      if (special) {
                        then.call(returned, resolve(maxDepth, deferred2, Identity, special), resolve(maxDepth, deferred2, Thrower, special));
                      } else {
                        maxDepth++;
                        then.call(returned, resolve(maxDepth, deferred2, Identity, special), resolve(maxDepth, deferred2, Thrower, special), resolve(maxDepth, deferred2, Identity, deferred2.notifyWith));
                      }
                    } else {
                      if (handler !== Identity) {
                        that = void 0;
                        args = [returned];
                      }
                      (special || deferred2.resolveWith)(that, args);
                    }
                  }, process = special ? mightThrow : function() {
                    try {
                      mightThrow();
                    } catch (e) {
                      if (jQuery3.Deferred.exceptionHook) {
                        jQuery3.Deferred.exceptionHook(e, process.stackTrace);
                      }
                      if (depth + 1 >= maxDepth) {
                        if (handler !== Thrower) {
                          that = void 0;
                          args = [e];
                        }
                        deferred2.rejectWith(that, args);
                      }
                    }
                  };
                  if (depth) {
                    process();
                  } else {
                    if (jQuery3.Deferred.getStackHook) {
                      process.stackTrace = jQuery3.Deferred.getStackHook();
                    }
                    window2.setTimeout(process);
                  }
                };
              }
              return jQuery3.Deferred(function(newDefer) {
                tuples[0][3].add(resolve(0, newDefer, isFunction(onProgress) ? onProgress : Identity, newDefer.notifyWith));
                tuples[1][3].add(resolve(0, newDefer, isFunction(onFulfilled) ? onFulfilled : Identity));
                tuples[2][3].add(resolve(0, newDefer, isFunction(onRejected) ? onRejected : Thrower));
              }).promise();
            },
            promise: function(obj) {
              return obj != null ? jQuery3.extend(obj, promise) : promise;
            }
          }, deferred = {};
          jQuery3.each(tuples, function(i, tuple) {
            var list = tuple[2], stateString = tuple[5];
            promise[tuple[1]] = list.add;
            if (stateString) {
              list.add(function() {
                state = stateString;
              }, tuples[3 - i][2].disable, tuples[3 - i][3].disable, tuples[0][2].lock, tuples[0][3].lock);
            }
            list.add(tuple[3].fire);
            deferred[tuple[0]] = function() {
              deferred[tuple[0] + "With"](this === deferred ? void 0 : this, arguments);
              return this;
            };
            deferred[tuple[0] + "With"] = list.fireWith;
          });
          promise.promise(deferred);
          if (func) {
            func.call(deferred, deferred);
          }
          return deferred;
        },
        when: function(singleValue) {
          var remaining = arguments.length, i = remaining, resolveContexts = Array(i), resolveValues = slice.call(arguments), primary = jQuery3.Deferred(), updateFunc = function(i2) {
            return function(value) {
              resolveContexts[i2] = this;
              resolveValues[i2] = arguments.length > 1 ? slice.call(arguments) : value;
              if (!--remaining) {
                primary.resolveWith(resolveContexts, resolveValues);
              }
            };
          };
          if (remaining <= 1) {
            adoptValue(singleValue, primary.done(updateFunc(i)).resolve, primary.reject, !remaining);
            if (primary.state() === "pending" || isFunction(resolveValues[i] && resolveValues[i].then)) {
              return primary.then();
            }
          }
          while (i--) {
            adoptValue(resolveValues[i], updateFunc(i), primary.reject);
          }
          return primary.promise();
        }
      });
      var rerrorNames = /^(Eval|Internal|Range|Reference|Syntax|Type|URI)Error$/;
      jQuery3.Deferred.exceptionHook = function(error, stack) {
        if (window2.console && window2.console.warn && error && rerrorNames.test(error.name)) {
          window2.console.warn("jQuery.Deferred exception: " + error.message, error.stack, stack);
        }
      };
      jQuery3.readyException = function(error) {
        window2.setTimeout(function() {
          throw error;
        });
      };
      var readyList = jQuery3.Deferred();
      jQuery3.fn.ready = function(fn) {
        readyList.then(fn).catch(function(error) {
          jQuery3.readyException(error);
        });
        return this;
      };
      jQuery3.extend({
        isReady: false,
        readyWait: 1,
        ready: function(wait) {
          if (wait === true ? --jQuery3.readyWait : jQuery3.isReady) {
            return;
          }
          jQuery3.isReady = true;
          if (wait !== true && --jQuery3.readyWait > 0) {
            return;
          }
          readyList.resolveWith(document2, [jQuery3]);
        }
      });
      jQuery3.ready.then = readyList.then;
      function completed() {
        document2.removeEventListener("DOMContentLoaded", completed);
        window2.removeEventListener("load", completed);
        jQuery3.ready();
      }
      if (document2.readyState === "complete" || document2.readyState !== "loading" && !document2.documentElement.doScroll) {
        window2.setTimeout(jQuery3.ready);
      } else {
        document2.addEventListener("DOMContentLoaded", completed);
        window2.addEventListener("load", completed);
      }
      var access = function(elems, fn, key, value, chainable, emptyGet, raw) {
        var i = 0, len = elems.length, bulk = key == null;
        if (toType(key) === "object") {
          chainable = true;
          for (i in key) {
            access(elems, fn, i, key[i], true, emptyGet, raw);
          }
        } else if (value !== void 0) {
          chainable = true;
          if (!isFunction(value)) {
            raw = true;
          }
          if (bulk) {
            if (raw) {
              fn.call(elems, value);
              fn = null;
            } else {
              bulk = fn;
              fn = function(elem, _key, value2) {
                return bulk.call(jQuery3(elem), value2);
              };
            }
          }
          if (fn) {
            for (; i < len; i++) {
              fn(elems[i], key, raw ? value : value.call(elems[i], i, fn(elems[i], key)));
            }
          }
        }
        if (chainable) {
          return elems;
        }
        if (bulk) {
          return fn.call(elems);
        }
        return len ? fn(elems[0], key) : emptyGet;
      };
      var rmsPrefix = /^-ms-/, rdashAlpha = /-([a-z])/g;
      function fcamelCase(_all, letter) {
        return letter.toUpperCase();
      }
      function camelCase(string) {
        return string.replace(rmsPrefix, "ms-").replace(rdashAlpha, fcamelCase);
      }
      var acceptData = function(owner) {
        return owner.nodeType === 1 || owner.nodeType === 9 || !+owner.nodeType;
      };
      function Data() {
        this.expando = jQuery3.expando + Data.uid++;
      }
      Data.uid = 1;
      Data.prototype = {
        cache: function(owner) {
          var value = owner[this.expando];
          if (!value) {
            value = {};
            if (acceptData(owner)) {
              if (owner.nodeType) {
                owner[this.expando] = value;
              } else {
                Object.defineProperty(owner, this.expando, {
                  value,
                  configurable: true
                });
              }
            }
          }
          return value;
        },
        set: function(owner, data, value) {
          var prop, cache = this.cache(owner);
          if (typeof data === "string") {
            cache[camelCase(data)] = value;
          } else {
            for (prop in data) {
              cache[camelCase(prop)] = data[prop];
            }
          }
          return cache;
        },
        get: function(owner, key) {
          return key === void 0 ? this.cache(owner) : owner[this.expando] && owner[this.expando][camelCase(key)];
        },
        access: function(owner, key, value) {
          if (key === void 0 || key && typeof key === "string" && value === void 0) {
            return this.get(owner, key);
          }
          this.set(owner, key, value);
          return value !== void 0 ? value : key;
        },
        remove: function(owner, key) {
          var i, cache = owner[this.expando];
          if (cache === void 0) {
            return;
          }
          if (key !== void 0) {
            if (Array.isArray(key)) {
              key = key.map(camelCase);
            } else {
              key = camelCase(key);
              key = key in cache ? [key] : key.match(rnothtmlwhite) || [];
            }
            i = key.length;
            while (i--) {
              delete cache[key[i]];
            }
          }
          if (key === void 0 || jQuery3.isEmptyObject(cache)) {
            if (owner.nodeType) {
              owner[this.expando] = void 0;
            } else {
              delete owner[this.expando];
            }
          }
        },
        hasData: function(owner) {
          var cache = owner[this.expando];
          return cache !== void 0 && !jQuery3.isEmptyObject(cache);
        }
      };
      var dataPriv = new Data();
      var dataUser = new Data();
      var rbrace = /^(?:\{[\w\W]*\}|\[[\w\W]*\])$/, rmultiDash = /[A-Z]/g;
      function getData(data) {
        if (data === "true") {
          return true;
        }
        if (data === "false") {
          return false;
        }
        if (data === "null") {
          return null;
        }
        if (data === +data + "") {
          return +data;
        }
        if (rbrace.test(data)) {
          return JSON.parse(data);
        }
        return data;
      }
      function dataAttr(elem, key, data) {
        var name;
        if (data === void 0 && elem.nodeType === 1) {
          name = "data-" + key.replace(rmultiDash, "-$&").toLowerCase();
          data = elem.getAttribute(name);
          if (typeof data === "string") {
            try {
              data = getData(data);
            } catch (e) {
            }
            dataUser.set(elem, key, data);
          } else {
            data = void 0;
          }
        }
        return data;
      }
      jQuery3.extend({
        hasData: function(elem) {
          return dataUser.hasData(elem) || dataPriv.hasData(elem);
        },
        data: function(elem, name, data) {
          return dataUser.access(elem, name, data);
        },
        removeData: function(elem, name) {
          dataUser.remove(elem, name);
        },
        _data: function(elem, name, data) {
          return dataPriv.access(elem, name, data);
        },
        _removeData: function(elem, name) {
          dataPriv.remove(elem, name);
        }
      });
      jQuery3.fn.extend({
        data: function(key, value) {
          var i, name, data, elem = this[0], attrs = elem && elem.attributes;
          if (key === void 0) {
            if (this.length) {
              data = dataUser.get(elem);
              if (elem.nodeType === 1 && !dataPriv.get(elem, "hasDataAttrs")) {
                i = attrs.length;
                while (i--) {
                  if (attrs[i]) {
                    name = attrs[i].name;
                    if (name.indexOf("data-") === 0) {
                      name = camelCase(name.slice(5));
                      dataAttr(elem, name, data[name]);
                    }
                  }
                }
                dataPriv.set(elem, "hasDataAttrs", true);
              }
            }
            return data;
          }
          if (typeof key === "object") {
            return this.each(function() {
              dataUser.set(this, key);
            });
          }
          return access(this, function(value2) {
            var data2;
            if (elem && value2 === void 0) {
              data2 = dataUser.get(elem, key);
              if (data2 !== void 0) {
                return data2;
              }
              data2 = dataAttr(elem, key);
              if (data2 !== void 0) {
                return data2;
              }
              return;
            }
            this.each(function() {
              dataUser.set(this, key, value2);
            });
          }, null, value, arguments.length > 1, null, true);
        },
        removeData: function(key) {
          return this.each(function() {
            dataUser.remove(this, key);
          });
        }
      });
      jQuery3.extend({
        queue: function(elem, type, data) {
          var queue;
          if (elem) {
            type = (type || "fx") + "queue";
            queue = dataPriv.get(elem, type);
            if (data) {
              if (!queue || Array.isArray(data)) {
                queue = dataPriv.access(elem, type, jQuery3.makeArray(data));
              } else {
                queue.push(data);
              }
            }
            return queue || [];
          }
        },
        dequeue: function(elem, type) {
          type = type || "fx";
          var queue = jQuery3.queue(elem, type), startLength = queue.length, fn = queue.shift(), hooks = jQuery3._queueHooks(elem, type), next = function() {
            jQuery3.dequeue(elem, type);
          };
          if (fn === "inprogress") {
            fn = queue.shift();
            startLength--;
          }
          if (fn) {
            if (type === "fx") {
              queue.unshift("inprogress");
            }
            delete hooks.stop;
            fn.call(elem, next, hooks);
          }
          if (!startLength && hooks) {
            hooks.empty.fire();
          }
        },
        _queueHooks: function(elem, type) {
          var key = type + "queueHooks";
          return dataPriv.get(elem, key) || dataPriv.access(elem, key, {
            empty: jQuery3.Callbacks("once memory").add(function() {
              dataPriv.remove(elem, [type + "queue", key]);
            })
          });
        }
      });
      jQuery3.fn.extend({
        queue: function(type, data) {
          var setter = 2;
          if (typeof type !== "string") {
            data = type;
            type = "fx";
            setter--;
          }
          if (arguments.length < setter) {
            return jQuery3.queue(this[0], type);
          }
          return data === void 0 ? this : this.each(function() {
            var queue = jQuery3.queue(this, type, data);
            jQuery3._queueHooks(this, type);
            if (type === "fx" && queue[0] !== "inprogress") {
              jQuery3.dequeue(this, type);
            }
          });
        },
        dequeue: function(type) {
          return this.each(function() {
            jQuery3.dequeue(this, type);
          });
        },
        clearQueue: function(type) {
          return this.queue(type || "fx", []);
        },
        promise: function(type, obj) {
          var tmp, count = 1, defer = jQuery3.Deferred(), elements = this, i = this.length, resolve = function() {
            if (!--count) {
              defer.resolveWith(elements, [elements]);
            }
          };
          if (typeof type !== "string") {
            obj = type;
            type = void 0;
          }
          type = type || "fx";
          while (i--) {
            tmp = dataPriv.get(elements[i], type + "queueHooks");
            if (tmp && tmp.empty) {
              count++;
              tmp.empty.add(resolve);
            }
          }
          resolve();
          return defer.promise(obj);
        }
      });
      var pnum = /[+-]?(?:\d*\.|)\d+(?:[eE][+-]?\d+|)/.source;
      var rcssNum = new RegExp("^(?:([+-])=|)(" + pnum + ")([a-z%]*)$", "i");
      var cssExpand = ["Top", "Right", "Bottom", "Left"];
      var documentElement = document2.documentElement;
      var isAttached = function(elem) {
        return jQuery3.contains(elem.ownerDocument, elem);
      }, composed = {composed: true};
      if (documentElement.getRootNode) {
        isAttached = function(elem) {
          return jQuery3.contains(elem.ownerDocument, elem) || elem.getRootNode(composed) === elem.ownerDocument;
        };
      }
      var isHiddenWithinTree = function(elem, el) {
        elem = el || elem;
        return elem.style.display === "none" || elem.style.display === "" && isAttached(elem) && jQuery3.css(elem, "display") === "none";
      };
      function adjustCSS(elem, prop, valueParts, tween) {
        var adjusted, scale, maxIterations = 20, currentValue = tween ? function() {
          return tween.cur();
        } : function() {
          return jQuery3.css(elem, prop, "");
        }, initial = currentValue(), unit = valueParts && valueParts[3] || (jQuery3.cssNumber[prop] ? "" : "px"), initialInUnit = elem.nodeType && (jQuery3.cssNumber[prop] || unit !== "px" && +initial) && rcssNum.exec(jQuery3.css(elem, prop));
        if (initialInUnit && initialInUnit[3] !== unit) {
          initial = initial / 2;
          unit = unit || initialInUnit[3];
          initialInUnit = +initial || 1;
          while (maxIterations--) {
            jQuery3.style(elem, prop, initialInUnit + unit);
            if ((1 - scale) * (1 - (scale = currentValue() / initial || 0.5)) <= 0) {
              maxIterations = 0;
            }
            initialInUnit = initialInUnit / scale;
          }
          initialInUnit = initialInUnit * 2;
          jQuery3.style(elem, prop, initialInUnit + unit);
          valueParts = valueParts || [];
        }
        if (valueParts) {
          initialInUnit = +initialInUnit || +initial || 0;
          adjusted = valueParts[1] ? initialInUnit + (valueParts[1] + 1) * valueParts[2] : +valueParts[2];
          if (tween) {
            tween.unit = unit;
            tween.start = initialInUnit;
            tween.end = adjusted;
          }
        }
        return adjusted;
      }
      var defaultDisplayMap = {};
      function getDefaultDisplay(elem) {
        var temp, doc = elem.ownerDocument, nodeName2 = elem.nodeName, display = defaultDisplayMap[nodeName2];
        if (display) {
          return display;
        }
        temp = doc.body.appendChild(doc.createElement(nodeName2));
        display = jQuery3.css(temp, "display");
        temp.parentNode.removeChild(temp);
        if (display === "none") {
          display = "block";
        }
        defaultDisplayMap[nodeName2] = display;
        return display;
      }
      function showHide(elements, show) {
        var display, elem, values = [], index = 0, length = elements.length;
        for (; index < length; index++) {
          elem = elements[index];
          if (!elem.style) {
            continue;
          }
          display = elem.style.display;
          if (show) {
            if (display === "none") {
              values[index] = dataPriv.get(elem, "display") || null;
              if (!values[index]) {
                elem.style.display = "";
              }
            }
            if (elem.style.display === "" && isHiddenWithinTree(elem)) {
              values[index] = getDefaultDisplay(elem);
            }
          } else {
            if (display !== "none") {
              values[index] = "none";
              dataPriv.set(elem, "display", display);
            }
          }
        }
        for (index = 0; index < length; index++) {
          if (values[index] != null) {
            elements[index].style.display = values[index];
          }
        }
        return elements;
      }
      jQuery3.fn.extend({
        show: function() {
          return showHide(this, true);
        },
        hide: function() {
          return showHide(this);
        },
        toggle: function(state) {
          if (typeof state === "boolean") {
            return state ? this.show() : this.hide();
          }
          return this.each(function() {
            if (isHiddenWithinTree(this)) {
              jQuery3(this).show();
            } else {
              jQuery3(this).hide();
            }
          });
        }
      });
      var rcheckableType = /^(?:checkbox|radio)$/i;
      var rtagName = /<([a-z][^\/\0>\x20\t\r\n\f]*)/i;
      var rscriptType = /^$|^module$|\/(?:java|ecma)script/i;
      (function() {
        var fragment = document2.createDocumentFragment(), div = fragment.appendChild(document2.createElement("div")), input = document2.createElement("input");
        input.setAttribute("type", "radio");
        input.setAttribute("checked", "checked");
        input.setAttribute("name", "t");
        div.appendChild(input);
        support.checkClone = div.cloneNode(true).cloneNode(true).lastChild.checked;
        div.innerHTML = "<textarea>x</textarea>";
        support.noCloneChecked = !!div.cloneNode(true).lastChild.defaultValue;
        div.innerHTML = "<option></option>";
        support.option = !!div.lastChild;
      })();
      var wrapMap = {
        thead: [1, "<table>", "</table>"],
        col: [2, "<table><colgroup>", "</colgroup></table>"],
        tr: [2, "<table><tbody>", "</tbody></table>"],
        td: [3, "<table><tbody><tr>", "</tr></tbody></table>"],
        _default: [0, "", ""]
      };
      wrapMap.tbody = wrapMap.tfoot = wrapMap.colgroup = wrapMap.caption = wrapMap.thead;
      wrapMap.th = wrapMap.td;
      if (!support.option) {
        wrapMap.optgroup = wrapMap.option = [1, "<select multiple='multiple'>", "</select>"];
      }
      function getAll(context, tag) {
        var ret;
        if (typeof context.getElementsByTagName !== "undefined") {
          ret = context.getElementsByTagName(tag || "*");
        } else if (typeof context.querySelectorAll !== "undefined") {
          ret = context.querySelectorAll(tag || "*");
        } else {
          ret = [];
        }
        if (tag === void 0 || tag && nodeName(context, tag)) {
          return jQuery3.merge([context], ret);
        }
        return ret;
      }
      function setGlobalEval(elems, refElements) {
        var i = 0, l = elems.length;
        for (; i < l; i++) {
          dataPriv.set(elems[i], "globalEval", !refElements || dataPriv.get(refElements[i], "globalEval"));
        }
      }
      var rhtml = /<|&#?\w+;/;
      function buildFragment(elems, context, scripts, selection, ignored) {
        var elem, tmp, tag, wrap, attached, j, fragment = context.createDocumentFragment(), nodes = [], i = 0, l = elems.length;
        for (; i < l; i++) {
          elem = elems[i];
          if (elem || elem === 0) {
            if (toType(elem) === "object") {
              jQuery3.merge(nodes, elem.nodeType ? [elem] : elem);
            } else if (!rhtml.test(elem)) {
              nodes.push(context.createTextNode(elem));
            } else {
              tmp = tmp || fragment.appendChild(context.createElement("div"));
              tag = (rtagName.exec(elem) || ["", ""])[1].toLowerCase();
              wrap = wrapMap[tag] || wrapMap._default;
              tmp.innerHTML = wrap[1] + jQuery3.htmlPrefilter(elem) + wrap[2];
              j = wrap[0];
              while (j--) {
                tmp = tmp.lastChild;
              }
              jQuery3.merge(nodes, tmp.childNodes);
              tmp = fragment.firstChild;
              tmp.textContent = "";
            }
          }
        }
        fragment.textContent = "";
        i = 0;
        while (elem = nodes[i++]) {
          if (selection && jQuery3.inArray(elem, selection) > -1) {
            if (ignored) {
              ignored.push(elem);
            }
            continue;
          }
          attached = isAttached(elem);
          tmp = getAll(fragment.appendChild(elem), "script");
          if (attached) {
            setGlobalEval(tmp);
          }
          if (scripts) {
            j = 0;
            while (elem = tmp[j++]) {
              if (rscriptType.test(elem.type || "")) {
                scripts.push(elem);
              }
            }
          }
        }
        return fragment;
      }
      var rtypenamespace = /^([^.]*)(?:\.(.+)|)/;
      function returnTrue() {
        return true;
      }
      function returnFalse() {
        return false;
      }
      function expectSync(elem, type) {
        return elem === safeActiveElement() === (type === "focus");
      }
      function safeActiveElement() {
        try {
          return document2.activeElement;
        } catch (err) {
        }
      }
      function on(elem, types, selector, data, fn, one) {
        var origFn, type;
        if (typeof types === "object") {
          if (typeof selector !== "string") {
            data = data || selector;
            selector = void 0;
          }
          for (type in types) {
            on(elem, type, selector, data, types[type], one);
          }
          return elem;
        }
        if (data == null && fn == null) {
          fn = selector;
          data = selector = void 0;
        } else if (fn == null) {
          if (typeof selector === "string") {
            fn = data;
            data = void 0;
          } else {
            fn = data;
            data = selector;
            selector = void 0;
          }
        }
        if (fn === false) {
          fn = returnFalse;
        } else if (!fn) {
          return elem;
        }
        if (one === 1) {
          origFn = fn;
          fn = function(event) {
            jQuery3().off(event);
            return origFn.apply(this, arguments);
          };
          fn.guid = origFn.guid || (origFn.guid = jQuery3.guid++);
        }
        return elem.each(function() {
          jQuery3.event.add(this, types, fn, data, selector);
        });
      }
      jQuery3.event = {
        global: {},
        add: function(elem, types, handler, data, selector) {
          var handleObjIn, eventHandle, tmp, events, t, handleObj, special, handlers, type, namespaces, origType, elemData = dataPriv.get(elem);
          if (!acceptData(elem)) {
            return;
          }
          if (handler.handler) {
            handleObjIn = handler;
            handler = handleObjIn.handler;
            selector = handleObjIn.selector;
          }
          if (selector) {
            jQuery3.find.matchesSelector(documentElement, selector);
          }
          if (!handler.guid) {
            handler.guid = jQuery3.guid++;
          }
          if (!(events = elemData.events)) {
            events = elemData.events = Object.create(null);
          }
          if (!(eventHandle = elemData.handle)) {
            eventHandle = elemData.handle = function(e) {
              return typeof jQuery3 !== "undefined" && jQuery3.event.triggered !== e.type ? jQuery3.event.dispatch.apply(elem, arguments) : void 0;
            };
          }
          types = (types || "").match(rnothtmlwhite) || [""];
          t = types.length;
          while (t--) {
            tmp = rtypenamespace.exec(types[t]) || [];
            type = origType = tmp[1];
            namespaces = (tmp[2] || "").split(".").sort();
            if (!type) {
              continue;
            }
            special = jQuery3.event.special[type] || {};
            type = (selector ? special.delegateType : special.bindType) || type;
            special = jQuery3.event.special[type] || {};
            handleObj = jQuery3.extend({
              type,
              origType,
              data,
              handler,
              guid: handler.guid,
              selector,
              needsContext: selector && jQuery3.expr.match.needsContext.test(selector),
              namespace: namespaces.join(".")
            }, handleObjIn);
            if (!(handlers = events[type])) {
              handlers = events[type] = [];
              handlers.delegateCount = 0;
              if (!special.setup || special.setup.call(elem, data, namespaces, eventHandle) === false) {
                if (elem.addEventListener) {
                  elem.addEventListener(type, eventHandle);
                }
              }
            }
            if (special.add) {
              special.add.call(elem, handleObj);
              if (!handleObj.handler.guid) {
                handleObj.handler.guid = handler.guid;
              }
            }
            if (selector) {
              handlers.splice(handlers.delegateCount++, 0, handleObj);
            } else {
              handlers.push(handleObj);
            }
            jQuery3.event.global[type] = true;
          }
        },
        remove: function(elem, types, handler, selector, mappedTypes) {
          var j, origCount, tmp, events, t, handleObj, special, handlers, type, namespaces, origType, elemData = dataPriv.hasData(elem) && dataPriv.get(elem);
          if (!elemData || !(events = elemData.events)) {
            return;
          }
          types = (types || "").match(rnothtmlwhite) || [""];
          t = types.length;
          while (t--) {
            tmp = rtypenamespace.exec(types[t]) || [];
            type = origType = tmp[1];
            namespaces = (tmp[2] || "").split(".").sort();
            if (!type) {
              for (type in events) {
                jQuery3.event.remove(elem, type + types[t], handler, selector, true);
              }
              continue;
            }
            special = jQuery3.event.special[type] || {};
            type = (selector ? special.delegateType : special.bindType) || type;
            handlers = events[type] || [];
            tmp = tmp[2] && new RegExp("(^|\\.)" + namespaces.join("\\.(?:.*\\.|)") + "(\\.|$)");
            origCount = j = handlers.length;
            while (j--) {
              handleObj = handlers[j];
              if ((mappedTypes || origType === handleObj.origType) && (!handler || handler.guid === handleObj.guid) && (!tmp || tmp.test(handleObj.namespace)) && (!selector || selector === handleObj.selector || selector === "**" && handleObj.selector)) {
                handlers.splice(j, 1);
                if (handleObj.selector) {
                  handlers.delegateCount--;
                }
                if (special.remove) {
                  special.remove.call(elem, handleObj);
                }
              }
            }
            if (origCount && !handlers.length) {
              if (!special.teardown || special.teardown.call(elem, namespaces, elemData.handle) === false) {
                jQuery3.removeEvent(elem, type, elemData.handle);
              }
              delete events[type];
            }
          }
          if (jQuery3.isEmptyObject(events)) {
            dataPriv.remove(elem, "handle events");
          }
        },
        dispatch: function(nativeEvent) {
          var i, j, ret, matched, handleObj, handlerQueue, args = new Array(arguments.length), event = jQuery3.event.fix(nativeEvent), handlers = (dataPriv.get(this, "events") || Object.create(null))[event.type] || [], special = jQuery3.event.special[event.type] || {};
          args[0] = event;
          for (i = 1; i < arguments.length; i++) {
            args[i] = arguments[i];
          }
          event.delegateTarget = this;
          if (special.preDispatch && special.preDispatch.call(this, event) === false) {
            return;
          }
          handlerQueue = jQuery3.event.handlers.call(this, event, handlers);
          i = 0;
          while ((matched = handlerQueue[i++]) && !event.isPropagationStopped()) {
            event.currentTarget = matched.elem;
            j = 0;
            while ((handleObj = matched.handlers[j++]) && !event.isImmediatePropagationStopped()) {
              if (!event.rnamespace || handleObj.namespace === false || event.rnamespace.test(handleObj.namespace)) {
                event.handleObj = handleObj;
                event.data = handleObj.data;
                ret = ((jQuery3.event.special[handleObj.origType] || {}).handle || handleObj.handler).apply(matched.elem, args);
                if (ret !== void 0) {
                  if ((event.result = ret) === false) {
                    event.preventDefault();
                    event.stopPropagation();
                  }
                }
              }
            }
          }
          if (special.postDispatch) {
            special.postDispatch.call(this, event);
          }
          return event.result;
        },
        handlers: function(event, handlers) {
          var i, handleObj, sel, matchedHandlers, matchedSelectors, handlerQueue = [], delegateCount = handlers.delegateCount, cur = event.target;
          if (delegateCount && cur.nodeType && !(event.type === "click" && event.button >= 1)) {
            for (; cur !== this; cur = cur.parentNode || this) {
              if (cur.nodeType === 1 && !(event.type === "click" && cur.disabled === true)) {
                matchedHandlers = [];
                matchedSelectors = {};
                for (i = 0; i < delegateCount; i++) {
                  handleObj = handlers[i];
                  sel = handleObj.selector + " ";
                  if (matchedSelectors[sel] === void 0) {
                    matchedSelectors[sel] = handleObj.needsContext ? jQuery3(sel, this).index(cur) > -1 : jQuery3.find(sel, this, null, [cur]).length;
                  }
                  if (matchedSelectors[sel]) {
                    matchedHandlers.push(handleObj);
                  }
                }
                if (matchedHandlers.length) {
                  handlerQueue.push({elem: cur, handlers: matchedHandlers});
                }
              }
            }
          }
          cur = this;
          if (delegateCount < handlers.length) {
            handlerQueue.push({elem: cur, handlers: handlers.slice(delegateCount)});
          }
          return handlerQueue;
        },
        addProp: function(name, hook) {
          Object.defineProperty(jQuery3.Event.prototype, name, {
            enumerable: true,
            configurable: true,
            get: isFunction(hook) ? function() {
              if (this.originalEvent) {
                return hook(this.originalEvent);
              }
            } : function() {
              if (this.originalEvent) {
                return this.originalEvent[name];
              }
            },
            set: function(value) {
              Object.defineProperty(this, name, {
                enumerable: true,
                configurable: true,
                writable: true,
                value
              });
            }
          });
        },
        fix: function(originalEvent) {
          return originalEvent[jQuery3.expando] ? originalEvent : new jQuery3.Event(originalEvent);
        },
        special: {
          load: {
            noBubble: true
          },
          click: {
            setup: function(data) {
              var el = this || data;
              if (rcheckableType.test(el.type) && el.click && nodeName(el, "input")) {
                leverageNative(el, "click", returnTrue);
              }
              return false;
            },
            trigger: function(data) {
              var el = this || data;
              if (rcheckableType.test(el.type) && el.click && nodeName(el, "input")) {
                leverageNative(el, "click");
              }
              return true;
            },
            _default: function(event) {
              var target = event.target;
              return rcheckableType.test(target.type) && target.click && nodeName(target, "input") && dataPriv.get(target, "click") || nodeName(target, "a");
            }
          },
          beforeunload: {
            postDispatch: function(event) {
              if (event.result !== void 0 && event.originalEvent) {
                event.originalEvent.returnValue = event.result;
              }
            }
          }
        }
      };
      function leverageNative(el, type, expectSync2) {
        if (!expectSync2) {
          if (dataPriv.get(el, type) === void 0) {
            jQuery3.event.add(el, type, returnTrue);
          }
          return;
        }
        dataPriv.set(el, type, false);
        jQuery3.event.add(el, type, {
          namespace: false,
          handler: function(event) {
            var notAsync, result, saved = dataPriv.get(this, type);
            if (event.isTrigger & 1 && this[type]) {
              if (!saved.length) {
                saved = slice.call(arguments);
                dataPriv.set(this, type, saved);
                notAsync = expectSync2(this, type);
                this[type]();
                result = dataPriv.get(this, type);
                if (saved !== result || notAsync) {
                  dataPriv.set(this, type, false);
                } else {
                  result = {};
                }
                if (saved !== result) {
                  event.stopImmediatePropagation();
                  event.preventDefault();
                  return result && result.value;
                }
              } else if ((jQuery3.event.special[type] || {}).delegateType) {
                event.stopPropagation();
              }
            } else if (saved.length) {
              dataPriv.set(this, type, {
                value: jQuery3.event.trigger(jQuery3.extend(saved[0], jQuery3.Event.prototype), saved.slice(1), this)
              });
              event.stopImmediatePropagation();
            }
          }
        });
      }
      jQuery3.removeEvent = function(elem, type, handle) {
        if (elem.removeEventListener) {
          elem.removeEventListener(type, handle);
        }
      };
      jQuery3.Event = function(src, props) {
        if (!(this instanceof jQuery3.Event)) {
          return new jQuery3.Event(src, props);
        }
        if (src && src.type) {
          this.originalEvent = src;
          this.type = src.type;
          this.isDefaultPrevented = src.defaultPrevented || src.defaultPrevented === void 0 && src.returnValue === false ? returnTrue : returnFalse;
          this.target = src.target && src.target.nodeType === 3 ? src.target.parentNode : src.target;
          this.currentTarget = src.currentTarget;
          this.relatedTarget = src.relatedTarget;
        } else {
          this.type = src;
        }
        if (props) {
          jQuery3.extend(this, props);
        }
        this.timeStamp = src && src.timeStamp || Date.now();
        this[jQuery3.expando] = true;
      };
      jQuery3.Event.prototype = {
        constructor: jQuery3.Event,
        isDefaultPrevented: returnFalse,
        isPropagationStopped: returnFalse,
        isImmediatePropagationStopped: returnFalse,
        isSimulated: false,
        preventDefault: function() {
          var e = this.originalEvent;
          this.isDefaultPrevented = returnTrue;
          if (e && !this.isSimulated) {
            e.preventDefault();
          }
        },
        stopPropagation: function() {
          var e = this.originalEvent;
          this.isPropagationStopped = returnTrue;
          if (e && !this.isSimulated) {
            e.stopPropagation();
          }
        },
        stopImmediatePropagation: function() {
          var e = this.originalEvent;
          this.isImmediatePropagationStopped = returnTrue;
          if (e && !this.isSimulated) {
            e.stopImmediatePropagation();
          }
          this.stopPropagation();
        }
      };
      jQuery3.each({
        altKey: true,
        bubbles: true,
        cancelable: true,
        changedTouches: true,
        ctrlKey: true,
        detail: true,
        eventPhase: true,
        metaKey: true,
        pageX: true,
        pageY: true,
        shiftKey: true,
        view: true,
        char: true,
        code: true,
        charCode: true,
        key: true,
        keyCode: true,
        button: true,
        buttons: true,
        clientX: true,
        clientY: true,
        offsetX: true,
        offsetY: true,
        pointerId: true,
        pointerType: true,
        screenX: true,
        screenY: true,
        targetTouches: true,
        toElement: true,
        touches: true,
        which: true
      }, jQuery3.event.addProp);
      jQuery3.each({focus: "focusin", blur: "focusout"}, function(type, delegateType) {
        jQuery3.event.special[type] = {
          setup: function() {
            leverageNative(this, type, expectSync);
            return false;
          },
          trigger: function() {
            leverageNative(this, type);
            return true;
          },
          _default: function() {
            return true;
          },
          delegateType
        };
      });
      jQuery3.each({
        mouseenter: "mouseover",
        mouseleave: "mouseout",
        pointerenter: "pointerover",
        pointerleave: "pointerout"
      }, function(orig, fix) {
        jQuery3.event.special[orig] = {
          delegateType: fix,
          bindType: fix,
          handle: function(event) {
            var ret, target = this, related = event.relatedTarget, handleObj = event.handleObj;
            if (!related || related !== target && !jQuery3.contains(target, related)) {
              event.type = handleObj.origType;
              ret = handleObj.handler.apply(this, arguments);
              event.type = fix;
            }
            return ret;
          }
        };
      });
      jQuery3.fn.extend({
        on: function(types, selector, data, fn) {
          return on(this, types, selector, data, fn);
        },
        one: function(types, selector, data, fn) {
          return on(this, types, selector, data, fn, 1);
        },
        off: function(types, selector, fn) {
          var handleObj, type;
          if (types && types.preventDefault && types.handleObj) {
            handleObj = types.handleObj;
            jQuery3(types.delegateTarget).off(handleObj.namespace ? handleObj.origType + "." + handleObj.namespace : handleObj.origType, handleObj.selector, handleObj.handler);
            return this;
          }
          if (typeof types === "object") {
            for (type in types) {
              this.off(type, selector, types[type]);
            }
            return this;
          }
          if (selector === false || typeof selector === "function") {
            fn = selector;
            selector = void 0;
          }
          if (fn === false) {
            fn = returnFalse;
          }
          return this.each(function() {
            jQuery3.event.remove(this, types, fn, selector);
          });
        }
      });
      var rnoInnerhtml = /<script|<style|<link/i, rchecked = /checked\s*(?:[^=]|=\s*.checked.)/i, rcleanScript = /^\s*<!(?:\[CDATA\[|--)|(?:\]\]|--)>\s*$/g;
      function manipulationTarget(elem, content) {
        if (nodeName(elem, "table") && nodeName(content.nodeType !== 11 ? content : content.firstChild, "tr")) {
          return jQuery3(elem).children("tbody")[0] || elem;
        }
        return elem;
      }
      function disableScript(elem) {
        elem.type = (elem.getAttribute("type") !== null) + "/" + elem.type;
        return elem;
      }
      function restoreScript(elem) {
        if ((elem.type || "").slice(0, 5) === "true/") {
          elem.type = elem.type.slice(5);
        } else {
          elem.removeAttribute("type");
        }
        return elem;
      }
      function cloneCopyEvent(src, dest) {
        var i, l, type, pdataOld, udataOld, udataCur, events;
        if (dest.nodeType !== 1) {
          return;
        }
        if (dataPriv.hasData(src)) {
          pdataOld = dataPriv.get(src);
          events = pdataOld.events;
          if (events) {
            dataPriv.remove(dest, "handle events");
            for (type in events) {
              for (i = 0, l = events[type].length; i < l; i++) {
                jQuery3.event.add(dest, type, events[type][i]);
              }
            }
          }
        }
        if (dataUser.hasData(src)) {
          udataOld = dataUser.access(src);
          udataCur = jQuery3.extend({}, udataOld);
          dataUser.set(dest, udataCur);
        }
      }
      function fixInput(src, dest) {
        var nodeName2 = dest.nodeName.toLowerCase();
        if (nodeName2 === "input" && rcheckableType.test(src.type)) {
          dest.checked = src.checked;
        } else if (nodeName2 === "input" || nodeName2 === "textarea") {
          dest.defaultValue = src.defaultValue;
        }
      }
      function domManip(collection, args, callback, ignored) {
        args = flat(args);
        var fragment, first, scripts, hasScripts, node, doc, i = 0, l = collection.length, iNoClone = l - 1, value = args[0], valueIsFunction = isFunction(value);
        if (valueIsFunction || l > 1 && typeof value === "string" && !support.checkClone && rchecked.test(value)) {
          return collection.each(function(index) {
            var self = collection.eq(index);
            if (valueIsFunction) {
              args[0] = value.call(this, index, self.html());
            }
            domManip(self, args, callback, ignored);
          });
        }
        if (l) {
          fragment = buildFragment(args, collection[0].ownerDocument, false, collection, ignored);
          first = fragment.firstChild;
          if (fragment.childNodes.length === 1) {
            fragment = first;
          }
          if (first || ignored) {
            scripts = jQuery3.map(getAll(fragment, "script"), disableScript);
            hasScripts = scripts.length;
            for (; i < l; i++) {
              node = fragment;
              if (i !== iNoClone) {
                node = jQuery3.clone(node, true, true);
                if (hasScripts) {
                  jQuery3.merge(scripts, getAll(node, "script"));
                }
              }
              callback.call(collection[i], node, i);
            }
            if (hasScripts) {
              doc = scripts[scripts.length - 1].ownerDocument;
              jQuery3.map(scripts, restoreScript);
              for (i = 0; i < hasScripts; i++) {
                node = scripts[i];
                if (rscriptType.test(node.type || "") && !dataPriv.access(node, "globalEval") && jQuery3.contains(doc, node)) {
                  if (node.src && (node.type || "").toLowerCase() !== "module") {
                    if (jQuery3._evalUrl && !node.noModule) {
                      jQuery3._evalUrl(node.src, {
                        nonce: node.nonce || node.getAttribute("nonce")
                      }, doc);
                    }
                  } else {
                    DOMEval(node.textContent.replace(rcleanScript, ""), node, doc);
                  }
                }
              }
            }
          }
        }
        return collection;
      }
      function remove(elem, selector, keepData) {
        var node, nodes = selector ? jQuery3.filter(selector, elem) : elem, i = 0;
        for (; (node = nodes[i]) != null; i++) {
          if (!keepData && node.nodeType === 1) {
            jQuery3.cleanData(getAll(node));
          }
          if (node.parentNode) {
            if (keepData && isAttached(node)) {
              setGlobalEval(getAll(node, "script"));
            }
            node.parentNode.removeChild(node);
          }
        }
        return elem;
      }
      jQuery3.extend({
        htmlPrefilter: function(html) {
          return html;
        },
        clone: function(elem, dataAndEvents, deepDataAndEvents) {
          var i, l, srcElements, destElements, clone = elem.cloneNode(true), inPage = isAttached(elem);
          if (!support.noCloneChecked && (elem.nodeType === 1 || elem.nodeType === 11) && !jQuery3.isXMLDoc(elem)) {
            destElements = getAll(clone);
            srcElements = getAll(elem);
            for (i = 0, l = srcElements.length; i < l; i++) {
              fixInput(srcElements[i], destElements[i]);
            }
          }
          if (dataAndEvents) {
            if (deepDataAndEvents) {
              srcElements = srcElements || getAll(elem);
              destElements = destElements || getAll(clone);
              for (i = 0, l = srcElements.length; i < l; i++) {
                cloneCopyEvent(srcElements[i], destElements[i]);
              }
            } else {
              cloneCopyEvent(elem, clone);
            }
          }
          destElements = getAll(clone, "script");
          if (destElements.length > 0) {
            setGlobalEval(destElements, !inPage && getAll(elem, "script"));
          }
          return clone;
        },
        cleanData: function(elems) {
          var data, elem, type, special = jQuery3.event.special, i = 0;
          for (; (elem = elems[i]) !== void 0; i++) {
            if (acceptData(elem)) {
              if (data = elem[dataPriv.expando]) {
                if (data.events) {
                  for (type in data.events) {
                    if (special[type]) {
                      jQuery3.event.remove(elem, type);
                    } else {
                      jQuery3.removeEvent(elem, type, data.handle);
                    }
                  }
                }
                elem[dataPriv.expando] = void 0;
              }
              if (elem[dataUser.expando]) {
                elem[dataUser.expando] = void 0;
              }
            }
          }
        }
      });
      jQuery3.fn.extend({
        detach: function(selector) {
          return remove(this, selector, true);
        },
        remove: function(selector) {
          return remove(this, selector);
        },
        text: function(value) {
          return access(this, function(value2) {
            return value2 === void 0 ? jQuery3.text(this) : this.empty().each(function() {
              if (this.nodeType === 1 || this.nodeType === 11 || this.nodeType === 9) {
                this.textContent = value2;
              }
            });
          }, null, value, arguments.length);
        },
        append: function() {
          return domManip(this, arguments, function(elem) {
            if (this.nodeType === 1 || this.nodeType === 11 || this.nodeType === 9) {
              var target = manipulationTarget(this, elem);
              target.appendChild(elem);
            }
          });
        },
        prepend: function() {
          return domManip(this, arguments, function(elem) {
            if (this.nodeType === 1 || this.nodeType === 11 || this.nodeType === 9) {
              var target = manipulationTarget(this, elem);
              target.insertBefore(elem, target.firstChild);
            }
          });
        },
        before: function() {
          return domManip(this, arguments, function(elem) {
            if (this.parentNode) {
              this.parentNode.insertBefore(elem, this);
            }
          });
        },
        after: function() {
          return domManip(this, arguments, function(elem) {
            if (this.parentNode) {
              this.parentNode.insertBefore(elem, this.nextSibling);
            }
          });
        },
        empty: function() {
          var elem, i = 0;
          for (; (elem = this[i]) != null; i++) {
            if (elem.nodeType === 1) {
              jQuery3.cleanData(getAll(elem, false));
              elem.textContent = "";
            }
          }
          return this;
        },
        clone: function(dataAndEvents, deepDataAndEvents) {
          dataAndEvents = dataAndEvents == null ? false : dataAndEvents;
          deepDataAndEvents = deepDataAndEvents == null ? dataAndEvents : deepDataAndEvents;
          return this.map(function() {
            return jQuery3.clone(this, dataAndEvents, deepDataAndEvents);
          });
        },
        html: function(value) {
          return access(this, function(value2) {
            var elem = this[0] || {}, i = 0, l = this.length;
            if (value2 === void 0 && elem.nodeType === 1) {
              return elem.innerHTML;
            }
            if (typeof value2 === "string" && !rnoInnerhtml.test(value2) && !wrapMap[(rtagName.exec(value2) || ["", ""])[1].toLowerCase()]) {
              value2 = jQuery3.htmlPrefilter(value2);
              try {
                for (; i < l; i++) {
                  elem = this[i] || {};
                  if (elem.nodeType === 1) {
                    jQuery3.cleanData(getAll(elem, false));
                    elem.innerHTML = value2;
                  }
                }
                elem = 0;
              } catch (e) {
              }
            }
            if (elem) {
              this.empty().append(value2);
            }
          }, null, value, arguments.length);
        },
        replaceWith: function() {
          var ignored = [];
          return domManip(this, arguments, function(elem) {
            var parent = this.parentNode;
            if (jQuery3.inArray(this, ignored) < 0) {
              jQuery3.cleanData(getAll(this));
              if (parent) {
                parent.replaceChild(elem, this);
              }
            }
          }, ignored);
        }
      });
      jQuery3.each({
        appendTo: "append",
        prependTo: "prepend",
        insertBefore: "before",
        insertAfter: "after",
        replaceAll: "replaceWith"
      }, function(name, original) {
        jQuery3.fn[name] = function(selector) {
          var elems, ret = [], insert = jQuery3(selector), last = insert.length - 1, i = 0;
          for (; i <= last; i++) {
            elems = i === last ? this : this.clone(true);
            jQuery3(insert[i])[original](elems);
            push.apply(ret, elems.get());
          }
          return this.pushStack(ret);
        };
      });
      var rnumnonpx = new RegExp("^(" + pnum + ")(?!px)[a-z%]+$", "i");
      var getStyles = function(elem) {
        var view = elem.ownerDocument.defaultView;
        if (!view || !view.opener) {
          view = window2;
        }
        return view.getComputedStyle(elem);
      };
      var swap = function(elem, options, callback) {
        var ret, name, old = {};
        for (name in options) {
          old[name] = elem.style[name];
          elem.style[name] = options[name];
        }
        ret = callback.call(elem);
        for (name in options) {
          elem.style[name] = old[name];
        }
        return ret;
      };
      var rboxStyle = new RegExp(cssExpand.join("|"), "i");
      (function() {
        function computeStyleTests() {
          if (!div) {
            return;
          }
          container.style.cssText = "position:absolute;left:-11111px;width:60px;margin-top:1px;padding:0;border:0";
          div.style.cssText = "position:relative;display:block;box-sizing:border-box;overflow:scroll;margin:auto;border:1px;padding:1px;width:60%;top:1%";
          documentElement.appendChild(container).appendChild(div);
          var divStyle = window2.getComputedStyle(div);
          pixelPositionVal = divStyle.top !== "1%";
          reliableMarginLeftVal = roundPixelMeasures(divStyle.marginLeft) === 12;
          div.style.right = "60%";
          pixelBoxStylesVal = roundPixelMeasures(divStyle.right) === 36;
          boxSizingReliableVal = roundPixelMeasures(divStyle.width) === 36;
          div.style.position = "absolute";
          scrollboxSizeVal = roundPixelMeasures(div.offsetWidth / 3) === 12;
          documentElement.removeChild(container);
          div = null;
        }
        function roundPixelMeasures(measure) {
          return Math.round(parseFloat(measure));
        }
        var pixelPositionVal, boxSizingReliableVal, scrollboxSizeVal, pixelBoxStylesVal, reliableTrDimensionsVal, reliableMarginLeftVal, container = document2.createElement("div"), div = document2.createElement("div");
        if (!div.style) {
          return;
        }
        div.style.backgroundClip = "content-box";
        div.cloneNode(true).style.backgroundClip = "";
        support.clearCloneStyle = div.style.backgroundClip === "content-box";
        jQuery3.extend(support, {
          boxSizingReliable: function() {
            computeStyleTests();
            return boxSizingReliableVal;
          },
          pixelBoxStyles: function() {
            computeStyleTests();
            return pixelBoxStylesVal;
          },
          pixelPosition: function() {
            computeStyleTests();
            return pixelPositionVal;
          },
          reliableMarginLeft: function() {
            computeStyleTests();
            return reliableMarginLeftVal;
          },
          scrollboxSize: function() {
            computeStyleTests();
            return scrollboxSizeVal;
          },
          reliableTrDimensions: function() {
            var table, tr, trChild, trStyle;
            if (reliableTrDimensionsVal == null) {
              table = document2.createElement("table");
              tr = document2.createElement("tr");
              trChild = document2.createElement("div");
              table.style.cssText = "position:absolute;left:-11111px;border-collapse:separate";
              tr.style.cssText = "border:1px solid";
              tr.style.height = "1px";
              trChild.style.height = "9px";
              trChild.style.display = "block";
              documentElement.appendChild(table).appendChild(tr).appendChild(trChild);
              trStyle = window2.getComputedStyle(tr);
              reliableTrDimensionsVal = parseInt(trStyle.height, 10) + parseInt(trStyle.borderTopWidth, 10) + parseInt(trStyle.borderBottomWidth, 10) === tr.offsetHeight;
              documentElement.removeChild(table);
            }
            return reliableTrDimensionsVal;
          }
        });
      })();
      function curCSS(elem, name, computed) {
        var width, minWidth, maxWidth, ret, style = elem.style;
        computed = computed || getStyles(elem);
        if (computed) {
          ret = computed.getPropertyValue(name) || computed[name];
          if (ret === "" && !isAttached(elem)) {
            ret = jQuery3.style(elem, name);
          }
          if (!support.pixelBoxStyles() && rnumnonpx.test(ret) && rboxStyle.test(name)) {
            width = style.width;
            minWidth = style.minWidth;
            maxWidth = style.maxWidth;
            style.minWidth = style.maxWidth = style.width = ret;
            ret = computed.width;
            style.width = width;
            style.minWidth = minWidth;
            style.maxWidth = maxWidth;
          }
        }
        return ret !== void 0 ? ret + "" : ret;
      }
      function addGetHookIf(conditionFn, hookFn) {
        return {
          get: function() {
            if (conditionFn()) {
              delete this.get;
              return;
            }
            return (this.get = hookFn).apply(this, arguments);
          }
        };
      }
      var cssPrefixes = ["Webkit", "Moz", "ms"], emptyStyle = document2.createElement("div").style, vendorProps = {};
      function vendorPropName(name) {
        var capName = name[0].toUpperCase() + name.slice(1), i = cssPrefixes.length;
        while (i--) {
          name = cssPrefixes[i] + capName;
          if (name in emptyStyle) {
            return name;
          }
        }
      }
      function finalPropName(name) {
        var final = jQuery3.cssProps[name] || vendorProps[name];
        if (final) {
          return final;
        }
        if (name in emptyStyle) {
          return name;
        }
        return vendorProps[name] = vendorPropName(name) || name;
      }
      var rdisplayswap = /^(none|table(?!-c[ea]).+)/, rcustomProp = /^--/, cssShow = {position: "absolute", visibility: "hidden", display: "block"}, cssNormalTransform = {
        letterSpacing: "0",
        fontWeight: "400"
      };
      function setPositiveNumber(_elem, value, subtract) {
        var matches = rcssNum.exec(value);
        return matches ? Math.max(0, matches[2] - (subtract || 0)) + (matches[3] || "px") : value;
      }
      function boxModelAdjustment(elem, dimension, box, isBorderBox, styles, computedVal) {
        var i = dimension === "width" ? 1 : 0, extra = 0, delta = 0;
        if (box === (isBorderBox ? "border" : "content")) {
          return 0;
        }
        for (; i < 4; i += 2) {
          if (box === "margin") {
            delta += jQuery3.css(elem, box + cssExpand[i], true, styles);
          }
          if (!isBorderBox) {
            delta += jQuery3.css(elem, "padding" + cssExpand[i], true, styles);
            if (box !== "padding") {
              delta += jQuery3.css(elem, "border" + cssExpand[i] + "Width", true, styles);
            } else {
              extra += jQuery3.css(elem, "border" + cssExpand[i] + "Width", true, styles);
            }
          } else {
            if (box === "content") {
              delta -= jQuery3.css(elem, "padding" + cssExpand[i], true, styles);
            }
            if (box !== "margin") {
              delta -= jQuery3.css(elem, "border" + cssExpand[i] + "Width", true, styles);
            }
          }
        }
        if (!isBorderBox && computedVal >= 0) {
          delta += Math.max(0, Math.ceil(elem["offset" + dimension[0].toUpperCase() + dimension.slice(1)] - computedVal - delta - extra - 0.5)) || 0;
        }
        return delta;
      }
      function getWidthOrHeight(elem, dimension, extra) {
        var styles = getStyles(elem), boxSizingNeeded = !support.boxSizingReliable() || extra, isBorderBox = boxSizingNeeded && jQuery3.css(elem, "boxSizing", false, styles) === "border-box", valueIsBorderBox = isBorderBox, val = curCSS(elem, dimension, styles), offsetProp = "offset" + dimension[0].toUpperCase() + dimension.slice(1);
        if (rnumnonpx.test(val)) {
          if (!extra) {
            return val;
          }
          val = "auto";
        }
        if ((!support.boxSizingReliable() && isBorderBox || !support.reliableTrDimensions() && nodeName(elem, "tr") || val === "auto" || !parseFloat(val) && jQuery3.css(elem, "display", false, styles) === "inline") && elem.getClientRects().length) {
          isBorderBox = jQuery3.css(elem, "boxSizing", false, styles) === "border-box";
          valueIsBorderBox = offsetProp in elem;
          if (valueIsBorderBox) {
            val = elem[offsetProp];
          }
        }
        val = parseFloat(val) || 0;
        return val + boxModelAdjustment(elem, dimension, extra || (isBorderBox ? "border" : "content"), valueIsBorderBox, styles, val) + "px";
      }
      jQuery3.extend({
        cssHooks: {
          opacity: {
            get: function(elem, computed) {
              if (computed) {
                var ret = curCSS(elem, "opacity");
                return ret === "" ? "1" : ret;
              }
            }
          }
        },
        cssNumber: {
          animationIterationCount: true,
          columnCount: true,
          fillOpacity: true,
          flexGrow: true,
          flexShrink: true,
          fontWeight: true,
          gridArea: true,
          gridColumn: true,
          gridColumnEnd: true,
          gridColumnStart: true,
          gridRow: true,
          gridRowEnd: true,
          gridRowStart: true,
          lineHeight: true,
          opacity: true,
          order: true,
          orphans: true,
          widows: true,
          zIndex: true,
          zoom: true
        },
        cssProps: {},
        style: function(elem, name, value, extra) {
          if (!elem || elem.nodeType === 3 || elem.nodeType === 8 || !elem.style) {
            return;
          }
          var ret, type, hooks, origName = camelCase(name), isCustomProp = rcustomProp.test(name), style = elem.style;
          if (!isCustomProp) {
            name = finalPropName(origName);
          }
          hooks = jQuery3.cssHooks[name] || jQuery3.cssHooks[origName];
          if (value !== void 0) {
            type = typeof value;
            if (type === "string" && (ret = rcssNum.exec(value)) && ret[1]) {
              value = adjustCSS(elem, name, ret);
              type = "number";
            }
            if (value == null || value !== value) {
              return;
            }
            if (type === "number" && !isCustomProp) {
              value += ret && ret[3] || (jQuery3.cssNumber[origName] ? "" : "px");
            }
            if (!support.clearCloneStyle && value === "" && name.indexOf("background") === 0) {
              style[name] = "inherit";
            }
            if (!hooks || !("set" in hooks) || (value = hooks.set(elem, value, extra)) !== void 0) {
              if (isCustomProp) {
                style.setProperty(name, value);
              } else {
                style[name] = value;
              }
            }
          } else {
            if (hooks && "get" in hooks && (ret = hooks.get(elem, false, extra)) !== void 0) {
              return ret;
            }
            return style[name];
          }
        },
        css: function(elem, name, extra, styles) {
          var val, num, hooks, origName = camelCase(name), isCustomProp = rcustomProp.test(name);
          if (!isCustomProp) {
            name = finalPropName(origName);
          }
          hooks = jQuery3.cssHooks[name] || jQuery3.cssHooks[origName];
          if (hooks && "get" in hooks) {
            val = hooks.get(elem, true, extra);
          }
          if (val === void 0) {
            val = curCSS(elem, name, styles);
          }
          if (val === "normal" && name in cssNormalTransform) {
            val = cssNormalTransform[name];
          }
          if (extra === "" || extra) {
            num = parseFloat(val);
            return extra === true || isFinite(num) ? num || 0 : val;
          }
          return val;
        }
      });
      jQuery3.each(["height", "width"], function(_i, dimension) {
        jQuery3.cssHooks[dimension] = {
          get: function(elem, computed, extra) {
            if (computed) {
              return rdisplayswap.test(jQuery3.css(elem, "display")) && (!elem.getClientRects().length || !elem.getBoundingClientRect().width) ? swap(elem, cssShow, function() {
                return getWidthOrHeight(elem, dimension, extra);
              }) : getWidthOrHeight(elem, dimension, extra);
            }
          },
          set: function(elem, value, extra) {
            var matches, styles = getStyles(elem), scrollboxSizeBuggy = !support.scrollboxSize() && styles.position === "absolute", boxSizingNeeded = scrollboxSizeBuggy || extra, isBorderBox = boxSizingNeeded && jQuery3.css(elem, "boxSizing", false, styles) === "border-box", subtract = extra ? boxModelAdjustment(elem, dimension, extra, isBorderBox, styles) : 0;
            if (isBorderBox && scrollboxSizeBuggy) {
              subtract -= Math.ceil(elem["offset" + dimension[0].toUpperCase() + dimension.slice(1)] - parseFloat(styles[dimension]) - boxModelAdjustment(elem, dimension, "border", false, styles) - 0.5);
            }
            if (subtract && (matches = rcssNum.exec(value)) && (matches[3] || "px") !== "px") {
              elem.style[dimension] = value;
              value = jQuery3.css(elem, dimension);
            }
            return setPositiveNumber(elem, value, subtract);
          }
        };
      });
      jQuery3.cssHooks.marginLeft = addGetHookIf(support.reliableMarginLeft, function(elem, computed) {
        if (computed) {
          return (parseFloat(curCSS(elem, "marginLeft")) || elem.getBoundingClientRect().left - swap(elem, {marginLeft: 0}, function() {
            return elem.getBoundingClientRect().left;
          })) + "px";
        }
      });
      jQuery3.each({
        margin: "",
        padding: "",
        border: "Width"
      }, function(prefix, suffix) {
        jQuery3.cssHooks[prefix + suffix] = {
          expand: function(value) {
            var i = 0, expanded = {}, parts = typeof value === "string" ? value.split(" ") : [value];
            for (; i < 4; i++) {
              expanded[prefix + cssExpand[i] + suffix] = parts[i] || parts[i - 2] || parts[0];
            }
            return expanded;
          }
        };
        if (prefix !== "margin") {
          jQuery3.cssHooks[prefix + suffix].set = setPositiveNumber;
        }
      });
      jQuery3.fn.extend({
        css: function(name, value) {
          return access(this, function(elem, name2, value2) {
            var styles, len, map = {}, i = 0;
            if (Array.isArray(name2)) {
              styles = getStyles(elem);
              len = name2.length;
              for (; i < len; i++) {
                map[name2[i]] = jQuery3.css(elem, name2[i], false, styles);
              }
              return map;
            }
            return value2 !== void 0 ? jQuery3.style(elem, name2, value2) : jQuery3.css(elem, name2);
          }, name, value, arguments.length > 1);
        }
      });
      function Tween(elem, options, prop, end, easing) {
        return new Tween.prototype.init(elem, options, prop, end, easing);
      }
      jQuery3.Tween = Tween;
      Tween.prototype = {
        constructor: Tween,
        init: function(elem, options, prop, end, easing, unit) {
          this.elem = elem;
          this.prop = prop;
          this.easing = easing || jQuery3.easing._default;
          this.options = options;
          this.start = this.now = this.cur();
          this.end = end;
          this.unit = unit || (jQuery3.cssNumber[prop] ? "" : "px");
        },
        cur: function() {
          var hooks = Tween.propHooks[this.prop];
          return hooks && hooks.get ? hooks.get(this) : Tween.propHooks._default.get(this);
        },
        run: function(percent) {
          var eased, hooks = Tween.propHooks[this.prop];
          if (this.options.duration) {
            this.pos = eased = jQuery3.easing[this.easing](percent, this.options.duration * percent, 0, 1, this.options.duration);
          } else {
            this.pos = eased = percent;
          }
          this.now = (this.end - this.start) * eased + this.start;
          if (this.options.step) {
            this.options.step.call(this.elem, this.now, this);
          }
          if (hooks && hooks.set) {
            hooks.set(this);
          } else {
            Tween.propHooks._default.set(this);
          }
          return this;
        }
      };
      Tween.prototype.init.prototype = Tween.prototype;
      Tween.propHooks = {
        _default: {
          get: function(tween) {
            var result;
            if (tween.elem.nodeType !== 1 || tween.elem[tween.prop] != null && tween.elem.style[tween.prop] == null) {
              return tween.elem[tween.prop];
            }
            result = jQuery3.css(tween.elem, tween.prop, "");
            return !result || result === "auto" ? 0 : result;
          },
          set: function(tween) {
            if (jQuery3.fx.step[tween.prop]) {
              jQuery3.fx.step[tween.prop](tween);
            } else if (tween.elem.nodeType === 1 && (jQuery3.cssHooks[tween.prop] || tween.elem.style[finalPropName(tween.prop)] != null)) {
              jQuery3.style(tween.elem, tween.prop, tween.now + tween.unit);
            } else {
              tween.elem[tween.prop] = tween.now;
            }
          }
        }
      };
      Tween.propHooks.scrollTop = Tween.propHooks.scrollLeft = {
        set: function(tween) {
          if (tween.elem.nodeType && tween.elem.parentNode) {
            tween.elem[tween.prop] = tween.now;
          }
        }
      };
      jQuery3.easing = {
        linear: function(p) {
          return p;
        },
        swing: function(p) {
          return 0.5 - Math.cos(p * Math.PI) / 2;
        },
        _default: "swing"
      };
      jQuery3.fx = Tween.prototype.init;
      jQuery3.fx.step = {};
      var fxNow, inProgress, rfxtypes = /^(?:toggle|show|hide)$/, rrun = /queueHooks$/;
      function schedule() {
        if (inProgress) {
          if (document2.hidden === false && window2.requestAnimationFrame) {
            window2.requestAnimationFrame(schedule);
          } else {
            window2.setTimeout(schedule, jQuery3.fx.interval);
          }
          jQuery3.fx.tick();
        }
      }
      function createFxNow() {
        window2.setTimeout(function() {
          fxNow = void 0;
        });
        return fxNow = Date.now();
      }
      function genFx(type, includeWidth) {
        var which, i = 0, attrs = {height: type};
        includeWidth = includeWidth ? 1 : 0;
        for (; i < 4; i += 2 - includeWidth) {
          which = cssExpand[i];
          attrs["margin" + which] = attrs["padding" + which] = type;
        }
        if (includeWidth) {
          attrs.opacity = attrs.width = type;
        }
        return attrs;
      }
      function createTween(value, prop, animation) {
        var tween, collection = (Animation.tweeners[prop] || []).concat(Animation.tweeners["*"]), index = 0, length = collection.length;
        for (; index < length; index++) {
          if (tween = collection[index].call(animation, prop, value)) {
            return tween;
          }
        }
      }
      function defaultPrefilter(elem, props, opts) {
        var prop, value, toggle, hooks, oldfire, propTween, restoreDisplay, display, isBox = "width" in props || "height" in props, anim = this, orig = {}, style = elem.style, hidden = elem.nodeType && isHiddenWithinTree(elem), dataShow = dataPriv.get(elem, "fxshow");
        if (!opts.queue) {
          hooks = jQuery3._queueHooks(elem, "fx");
          if (hooks.unqueued == null) {
            hooks.unqueued = 0;
            oldfire = hooks.empty.fire;
            hooks.empty.fire = function() {
              if (!hooks.unqueued) {
                oldfire();
              }
            };
          }
          hooks.unqueued++;
          anim.always(function() {
            anim.always(function() {
              hooks.unqueued--;
              if (!jQuery3.queue(elem, "fx").length) {
                hooks.empty.fire();
              }
            });
          });
        }
        for (prop in props) {
          value = props[prop];
          if (rfxtypes.test(value)) {
            delete props[prop];
            toggle = toggle || value === "toggle";
            if (value === (hidden ? "hide" : "show")) {
              if (value === "show" && dataShow && dataShow[prop] !== void 0) {
                hidden = true;
              } else {
                continue;
              }
            }
            orig[prop] = dataShow && dataShow[prop] || jQuery3.style(elem, prop);
          }
        }
        propTween = !jQuery3.isEmptyObject(props);
        if (!propTween && jQuery3.isEmptyObject(orig)) {
          return;
        }
        if (isBox && elem.nodeType === 1) {
          opts.overflow = [style.overflow, style.overflowX, style.overflowY];
          restoreDisplay = dataShow && dataShow.display;
          if (restoreDisplay == null) {
            restoreDisplay = dataPriv.get(elem, "display");
          }
          display = jQuery3.css(elem, "display");
          if (display === "none") {
            if (restoreDisplay) {
              display = restoreDisplay;
            } else {
              showHide([elem], true);
              restoreDisplay = elem.style.display || restoreDisplay;
              display = jQuery3.css(elem, "display");
              showHide([elem]);
            }
          }
          if (display === "inline" || display === "inline-block" && restoreDisplay != null) {
            if (jQuery3.css(elem, "float") === "none") {
              if (!propTween) {
                anim.done(function() {
                  style.display = restoreDisplay;
                });
                if (restoreDisplay == null) {
                  display = style.display;
                  restoreDisplay = display === "none" ? "" : display;
                }
              }
              style.display = "inline-block";
            }
          }
        }
        if (opts.overflow) {
          style.overflow = "hidden";
          anim.always(function() {
            style.overflow = opts.overflow[0];
            style.overflowX = opts.overflow[1];
            style.overflowY = opts.overflow[2];
          });
        }
        propTween = false;
        for (prop in orig) {
          if (!propTween) {
            if (dataShow) {
              if ("hidden" in dataShow) {
                hidden = dataShow.hidden;
              }
            } else {
              dataShow = dataPriv.access(elem, "fxshow", {display: restoreDisplay});
            }
            if (toggle) {
              dataShow.hidden = !hidden;
            }
            if (hidden) {
              showHide([elem], true);
            }
            anim.done(function() {
              if (!hidden) {
                showHide([elem]);
              }
              dataPriv.remove(elem, "fxshow");
              for (prop in orig) {
                jQuery3.style(elem, prop, orig[prop]);
              }
            });
          }
          propTween = createTween(hidden ? dataShow[prop] : 0, prop, anim);
          if (!(prop in dataShow)) {
            dataShow[prop] = propTween.start;
            if (hidden) {
              propTween.end = propTween.start;
              propTween.start = 0;
            }
          }
        }
      }
      function propFilter(props, specialEasing) {
        var index, name, easing, value, hooks;
        for (index in props) {
          name = camelCase(index);
          easing = specialEasing[name];
          value = props[index];
          if (Array.isArray(value)) {
            easing = value[1];
            value = props[index] = value[0];
          }
          if (index !== name) {
            props[name] = value;
            delete props[index];
          }
          hooks = jQuery3.cssHooks[name];
          if (hooks && "expand" in hooks) {
            value = hooks.expand(value);
            delete props[name];
            for (index in value) {
              if (!(index in props)) {
                props[index] = value[index];
                specialEasing[index] = easing;
              }
            }
          } else {
            specialEasing[name] = easing;
          }
        }
      }
      function Animation(elem, properties, options) {
        var result, stopped, index = 0, length = Animation.prefilters.length, deferred = jQuery3.Deferred().always(function() {
          delete tick.elem;
        }), tick = function() {
          if (stopped) {
            return false;
          }
          var currentTime = fxNow || createFxNow(), remaining = Math.max(0, animation.startTime + animation.duration - currentTime), temp = remaining / animation.duration || 0, percent = 1 - temp, index2 = 0, length2 = animation.tweens.length;
          for (; index2 < length2; index2++) {
            animation.tweens[index2].run(percent);
          }
          deferred.notifyWith(elem, [animation, percent, remaining]);
          if (percent < 1 && length2) {
            return remaining;
          }
          if (!length2) {
            deferred.notifyWith(elem, [animation, 1, 0]);
          }
          deferred.resolveWith(elem, [animation]);
          return false;
        }, animation = deferred.promise({
          elem,
          props: jQuery3.extend({}, properties),
          opts: jQuery3.extend(true, {
            specialEasing: {},
            easing: jQuery3.easing._default
          }, options),
          originalProperties: properties,
          originalOptions: options,
          startTime: fxNow || createFxNow(),
          duration: options.duration,
          tweens: [],
          createTween: function(prop, end) {
            var tween = jQuery3.Tween(elem, animation.opts, prop, end, animation.opts.specialEasing[prop] || animation.opts.easing);
            animation.tweens.push(tween);
            return tween;
          },
          stop: function(gotoEnd) {
            var index2 = 0, length2 = gotoEnd ? animation.tweens.length : 0;
            if (stopped) {
              return this;
            }
            stopped = true;
            for (; index2 < length2; index2++) {
              animation.tweens[index2].run(1);
            }
            if (gotoEnd) {
              deferred.notifyWith(elem, [animation, 1, 0]);
              deferred.resolveWith(elem, [animation, gotoEnd]);
            } else {
              deferred.rejectWith(elem, [animation, gotoEnd]);
            }
            return this;
          }
        }), props = animation.props;
        propFilter(props, animation.opts.specialEasing);
        for (; index < length; index++) {
          result = Animation.prefilters[index].call(animation, elem, props, animation.opts);
          if (result) {
            if (isFunction(result.stop)) {
              jQuery3._queueHooks(animation.elem, animation.opts.queue).stop = result.stop.bind(result);
            }
            return result;
          }
        }
        jQuery3.map(props, createTween, animation);
        if (isFunction(animation.opts.start)) {
          animation.opts.start.call(elem, animation);
        }
        animation.progress(animation.opts.progress).done(animation.opts.done, animation.opts.complete).fail(animation.opts.fail).always(animation.opts.always);
        jQuery3.fx.timer(jQuery3.extend(tick, {
          elem,
          anim: animation,
          queue: animation.opts.queue
        }));
        return animation;
      }
      jQuery3.Animation = jQuery3.extend(Animation, {
        tweeners: {
          "*": [function(prop, value) {
            var tween = this.createTween(prop, value);
            adjustCSS(tween.elem, prop, rcssNum.exec(value), tween);
            return tween;
          }]
        },
        tweener: function(props, callback) {
          if (isFunction(props)) {
            callback = props;
            props = ["*"];
          } else {
            props = props.match(rnothtmlwhite);
          }
          var prop, index = 0, length = props.length;
          for (; index < length; index++) {
            prop = props[index];
            Animation.tweeners[prop] = Animation.tweeners[prop] || [];
            Animation.tweeners[prop].unshift(callback);
          }
        },
        prefilters: [defaultPrefilter],
        prefilter: function(callback, prepend) {
          if (prepend) {
            Animation.prefilters.unshift(callback);
          } else {
            Animation.prefilters.push(callback);
          }
        }
      });
      jQuery3.speed = function(speed, easing, fn) {
        var opt = speed && typeof speed === "object" ? jQuery3.extend({}, speed) : {
          complete: fn || !fn && easing || isFunction(speed) && speed,
          duration: speed,
          easing: fn && easing || easing && !isFunction(easing) && easing
        };
        if (jQuery3.fx.off) {
          opt.duration = 0;
        } else {
          if (typeof opt.duration !== "number") {
            if (opt.duration in jQuery3.fx.speeds) {
              opt.duration = jQuery3.fx.speeds[opt.duration];
            } else {
              opt.duration = jQuery3.fx.speeds._default;
            }
          }
        }
        if (opt.queue == null || opt.queue === true) {
          opt.queue = "fx";
        }
        opt.old = opt.complete;
        opt.complete = function() {
          if (isFunction(opt.old)) {
            opt.old.call(this);
          }
          if (opt.queue) {
            jQuery3.dequeue(this, opt.queue);
          }
        };
        return opt;
      };
      jQuery3.fn.extend({
        fadeTo: function(speed, to, easing, callback) {
          return this.filter(isHiddenWithinTree).css("opacity", 0).show().end().animate({opacity: to}, speed, easing, callback);
        },
        animate: function(prop, speed, easing, callback) {
          var empty = jQuery3.isEmptyObject(prop), optall = jQuery3.speed(speed, easing, callback), doAnimation = function() {
            var anim = Animation(this, jQuery3.extend({}, prop), optall);
            if (empty || dataPriv.get(this, "finish")) {
              anim.stop(true);
            }
          };
          doAnimation.finish = doAnimation;
          return empty || optall.queue === false ? this.each(doAnimation) : this.queue(optall.queue, doAnimation);
        },
        stop: function(type, clearQueue, gotoEnd) {
          var stopQueue = function(hooks) {
            var stop = hooks.stop;
            delete hooks.stop;
            stop(gotoEnd);
          };
          if (typeof type !== "string") {
            gotoEnd = clearQueue;
            clearQueue = type;
            type = void 0;
          }
          if (clearQueue) {
            this.queue(type || "fx", []);
          }
          return this.each(function() {
            var dequeue = true, index = type != null && type + "queueHooks", timers = jQuery3.timers, data = dataPriv.get(this);
            if (index) {
              if (data[index] && data[index].stop) {
                stopQueue(data[index]);
              }
            } else {
              for (index in data) {
                if (data[index] && data[index].stop && rrun.test(index)) {
                  stopQueue(data[index]);
                }
              }
            }
            for (index = timers.length; index--; ) {
              if (timers[index].elem === this && (type == null || timers[index].queue === type)) {
                timers[index].anim.stop(gotoEnd);
                dequeue = false;
                timers.splice(index, 1);
              }
            }
            if (dequeue || !gotoEnd) {
              jQuery3.dequeue(this, type);
            }
          });
        },
        finish: function(type) {
          if (type !== false) {
            type = type || "fx";
          }
          return this.each(function() {
            var index, data = dataPriv.get(this), queue = data[type + "queue"], hooks = data[type + "queueHooks"], timers = jQuery3.timers, length = queue ? queue.length : 0;
            data.finish = true;
            jQuery3.queue(this, type, []);
            if (hooks && hooks.stop) {
              hooks.stop.call(this, true);
            }
            for (index = timers.length; index--; ) {
              if (timers[index].elem === this && timers[index].queue === type) {
                timers[index].anim.stop(true);
                timers.splice(index, 1);
              }
            }
            for (index = 0; index < length; index++) {
              if (queue[index] && queue[index].finish) {
                queue[index].finish.call(this);
              }
            }
            delete data.finish;
          });
        }
      });
      jQuery3.each(["toggle", "show", "hide"], function(_i, name) {
        var cssFn = jQuery3.fn[name];
        jQuery3.fn[name] = function(speed, easing, callback) {
          return speed == null || typeof speed === "boolean" ? cssFn.apply(this, arguments) : this.animate(genFx(name, true), speed, easing, callback);
        };
      });
      jQuery3.each({
        slideDown: genFx("show"),
        slideUp: genFx("hide"),
        slideToggle: genFx("toggle"),
        fadeIn: {opacity: "show"},
        fadeOut: {opacity: "hide"},
        fadeToggle: {opacity: "toggle"}
      }, function(name, props) {
        jQuery3.fn[name] = function(speed, easing, callback) {
          return this.animate(props, speed, easing, callback);
        };
      });
      jQuery3.timers = [];
      jQuery3.fx.tick = function() {
        var timer, i = 0, timers = jQuery3.timers;
        fxNow = Date.now();
        for (; i < timers.length; i++) {
          timer = timers[i];
          if (!timer() && timers[i] === timer) {
            timers.splice(i--, 1);
          }
        }
        if (!timers.length) {
          jQuery3.fx.stop();
        }
        fxNow = void 0;
      };
      jQuery3.fx.timer = function(timer) {
        jQuery3.timers.push(timer);
        jQuery3.fx.start();
      };
      jQuery3.fx.interval = 13;
      jQuery3.fx.start = function() {
        if (inProgress) {
          return;
        }
        inProgress = true;
        schedule();
      };
      jQuery3.fx.stop = function() {
        inProgress = null;
      };
      jQuery3.fx.speeds = {
        slow: 600,
        fast: 200,
        _default: 400
      };
      jQuery3.fn.delay = function(time, type) {
        time = jQuery3.fx ? jQuery3.fx.speeds[time] || time : time;
        type = type || "fx";
        return this.queue(type, function(next, hooks) {
          var timeout = window2.setTimeout(next, time);
          hooks.stop = function() {
            window2.clearTimeout(timeout);
          };
        });
      };
      (function() {
        var input = document2.createElement("input"), select = document2.createElement("select"), opt = select.appendChild(document2.createElement("option"));
        input.type = "checkbox";
        support.checkOn = input.value !== "";
        support.optSelected = opt.selected;
        input = document2.createElement("input");
        input.value = "t";
        input.type = "radio";
        support.radioValue = input.value === "t";
      })();
      var boolHook, attrHandle = jQuery3.expr.attrHandle;
      jQuery3.fn.extend({
        attr: function(name, value) {
          return access(this, jQuery3.attr, name, value, arguments.length > 1);
        },
        removeAttr: function(name) {
          return this.each(function() {
            jQuery3.removeAttr(this, name);
          });
        }
      });
      jQuery3.extend({
        attr: function(elem, name, value) {
          var ret, hooks, nType = elem.nodeType;
          if (nType === 3 || nType === 8 || nType === 2) {
            return;
          }
          if (typeof elem.getAttribute === "undefined") {
            return jQuery3.prop(elem, name, value);
          }
          if (nType !== 1 || !jQuery3.isXMLDoc(elem)) {
            hooks = jQuery3.attrHooks[name.toLowerCase()] || (jQuery3.expr.match.bool.test(name) ? boolHook : void 0);
          }
          if (value !== void 0) {
            if (value === null) {
              jQuery3.removeAttr(elem, name);
              return;
            }
            if (hooks && "set" in hooks && (ret = hooks.set(elem, value, name)) !== void 0) {
              return ret;
            }
            elem.setAttribute(name, value + "");
            return value;
          }
          if (hooks && "get" in hooks && (ret = hooks.get(elem, name)) !== null) {
            return ret;
          }
          ret = jQuery3.find.attr(elem, name);
          return ret == null ? void 0 : ret;
        },
        attrHooks: {
          type: {
            set: function(elem, value) {
              if (!support.radioValue && value === "radio" && nodeName(elem, "input")) {
                var val = elem.value;
                elem.setAttribute("type", value);
                if (val) {
                  elem.value = val;
                }
                return value;
              }
            }
          }
        },
        removeAttr: function(elem, value) {
          var name, i = 0, attrNames = value && value.match(rnothtmlwhite);
          if (attrNames && elem.nodeType === 1) {
            while (name = attrNames[i++]) {
              elem.removeAttribute(name);
            }
          }
        }
      });
      boolHook = {
        set: function(elem, value, name) {
          if (value === false) {
            jQuery3.removeAttr(elem, name);
          } else {
            elem.setAttribute(name, name);
          }
          return name;
        }
      };
      jQuery3.each(jQuery3.expr.match.bool.source.match(/\w+/g), function(_i, name) {
        var getter = attrHandle[name] || jQuery3.find.attr;
        attrHandle[name] = function(elem, name2, isXML) {
          var ret, handle, lowercaseName = name2.toLowerCase();
          if (!isXML) {
            handle = attrHandle[lowercaseName];
            attrHandle[lowercaseName] = ret;
            ret = getter(elem, name2, isXML) != null ? lowercaseName : null;
            attrHandle[lowercaseName] = handle;
          }
          return ret;
        };
      });
      var rfocusable = /^(?:input|select|textarea|button)$/i, rclickable = /^(?:a|area)$/i;
      jQuery3.fn.extend({
        prop: function(name, value) {
          return access(this, jQuery3.prop, name, value, arguments.length > 1);
        },
        removeProp: function(name) {
          return this.each(function() {
            delete this[jQuery3.propFix[name] || name];
          });
        }
      });
      jQuery3.extend({
        prop: function(elem, name, value) {
          var ret, hooks, nType = elem.nodeType;
          if (nType === 3 || nType === 8 || nType === 2) {
            return;
          }
          if (nType !== 1 || !jQuery3.isXMLDoc(elem)) {
            name = jQuery3.propFix[name] || name;
            hooks = jQuery3.propHooks[name];
          }
          if (value !== void 0) {
            if (hooks && "set" in hooks && (ret = hooks.set(elem, value, name)) !== void 0) {
              return ret;
            }
            return elem[name] = value;
          }
          if (hooks && "get" in hooks && (ret = hooks.get(elem, name)) !== null) {
            return ret;
          }
          return elem[name];
        },
        propHooks: {
          tabIndex: {
            get: function(elem) {
              var tabindex = jQuery3.find.attr(elem, "tabindex");
              if (tabindex) {
                return parseInt(tabindex, 10);
              }
              if (rfocusable.test(elem.nodeName) || rclickable.test(elem.nodeName) && elem.href) {
                return 0;
              }
              return -1;
            }
          }
        },
        propFix: {
          for: "htmlFor",
          class: "className"
        }
      });
      if (!support.optSelected) {
        jQuery3.propHooks.selected = {
          get: function(elem) {
            var parent = elem.parentNode;
            if (parent && parent.parentNode) {
              parent.parentNode.selectedIndex;
            }
            return null;
          },
          set: function(elem) {
            var parent = elem.parentNode;
            if (parent) {
              parent.selectedIndex;
              if (parent.parentNode) {
                parent.parentNode.selectedIndex;
              }
            }
          }
        };
      }
      jQuery3.each([
        "tabIndex",
        "readOnly",
        "maxLength",
        "cellSpacing",
        "cellPadding",
        "rowSpan",
        "colSpan",
        "useMap",
        "frameBorder",
        "contentEditable"
      ], function() {
        jQuery3.propFix[this.toLowerCase()] = this;
      });
      function stripAndCollapse(value) {
        var tokens = value.match(rnothtmlwhite) || [];
        return tokens.join(" ");
      }
      function getClass(elem) {
        return elem.getAttribute && elem.getAttribute("class") || "";
      }
      function classesToArray(value) {
        if (Array.isArray(value)) {
          return value;
        }
        if (typeof value === "string") {
          return value.match(rnothtmlwhite) || [];
        }
        return [];
      }
      jQuery3.fn.extend({
        addClass: function(value) {
          var classes, elem, cur, curValue, clazz, j, finalValue, i = 0;
          if (isFunction(value)) {
            return this.each(function(j2) {
              jQuery3(this).addClass(value.call(this, j2, getClass(this)));
            });
          }
          classes = classesToArray(value);
          if (classes.length) {
            while (elem = this[i++]) {
              curValue = getClass(elem);
              cur = elem.nodeType === 1 && " " + stripAndCollapse(curValue) + " ";
              if (cur) {
                j = 0;
                while (clazz = classes[j++]) {
                  if (cur.indexOf(" " + clazz + " ") < 0) {
                    cur += clazz + " ";
                  }
                }
                finalValue = stripAndCollapse(cur);
                if (curValue !== finalValue) {
                  elem.setAttribute("class", finalValue);
                }
              }
            }
          }
          return this;
        },
        removeClass: function(value) {
          var classes, elem, cur, curValue, clazz, j, finalValue, i = 0;
          if (isFunction(value)) {
            return this.each(function(j2) {
              jQuery3(this).removeClass(value.call(this, j2, getClass(this)));
            });
          }
          if (!arguments.length) {
            return this.attr("class", "");
          }
          classes = classesToArray(value);
          if (classes.length) {
            while (elem = this[i++]) {
              curValue = getClass(elem);
              cur = elem.nodeType === 1 && " " + stripAndCollapse(curValue) + " ";
              if (cur) {
                j = 0;
                while (clazz = classes[j++]) {
                  while (cur.indexOf(" " + clazz + " ") > -1) {
                    cur = cur.replace(" " + clazz + " ", " ");
                  }
                }
                finalValue = stripAndCollapse(cur);
                if (curValue !== finalValue) {
                  elem.setAttribute("class", finalValue);
                }
              }
            }
          }
          return this;
        },
        toggleClass: function(value, stateVal) {
          var type = typeof value, isValidValue = type === "string" || Array.isArray(value);
          if (typeof stateVal === "boolean" && isValidValue) {
            return stateVal ? this.addClass(value) : this.removeClass(value);
          }
          if (isFunction(value)) {
            return this.each(function(i) {
              jQuery3(this).toggleClass(value.call(this, i, getClass(this), stateVal), stateVal);
            });
          }
          return this.each(function() {
            var className, i, self, classNames;
            if (isValidValue) {
              i = 0;
              self = jQuery3(this);
              classNames = classesToArray(value);
              while (className = classNames[i++]) {
                if (self.hasClass(className)) {
                  self.removeClass(className);
                } else {
                  self.addClass(className);
                }
              }
            } else if (value === void 0 || type === "boolean") {
              className = getClass(this);
              if (className) {
                dataPriv.set(this, "__className__", className);
              }
              if (this.setAttribute) {
                this.setAttribute("class", className || value === false ? "" : dataPriv.get(this, "__className__") || "");
              }
            }
          });
        },
        hasClass: function(selector) {
          var className, elem, i = 0;
          className = " " + selector + " ";
          while (elem = this[i++]) {
            if (elem.nodeType === 1 && (" " + stripAndCollapse(getClass(elem)) + " ").indexOf(className) > -1) {
              return true;
            }
          }
          return false;
        }
      });
      var rreturn = /\r/g;
      jQuery3.fn.extend({
        val: function(value) {
          var hooks, ret, valueIsFunction, elem = this[0];
          if (!arguments.length) {
            if (elem) {
              hooks = jQuery3.valHooks[elem.type] || jQuery3.valHooks[elem.nodeName.toLowerCase()];
              if (hooks && "get" in hooks && (ret = hooks.get(elem, "value")) !== void 0) {
                return ret;
              }
              ret = elem.value;
              if (typeof ret === "string") {
                return ret.replace(rreturn, "");
              }
              return ret == null ? "" : ret;
            }
            return;
          }
          valueIsFunction = isFunction(value);
          return this.each(function(i) {
            var val;
            if (this.nodeType !== 1) {
              return;
            }
            if (valueIsFunction) {
              val = value.call(this, i, jQuery3(this).val());
            } else {
              val = value;
            }
            if (val == null) {
              val = "";
            } else if (typeof val === "number") {
              val += "";
            } else if (Array.isArray(val)) {
              val = jQuery3.map(val, function(value2) {
                return value2 == null ? "" : value2 + "";
              });
            }
            hooks = jQuery3.valHooks[this.type] || jQuery3.valHooks[this.nodeName.toLowerCase()];
            if (!hooks || !("set" in hooks) || hooks.set(this, val, "value") === void 0) {
              this.value = val;
            }
          });
        }
      });
      jQuery3.extend({
        valHooks: {
          option: {
            get: function(elem) {
              var val = jQuery3.find.attr(elem, "value");
              return val != null ? val : stripAndCollapse(jQuery3.text(elem));
            }
          },
          select: {
            get: function(elem) {
              var value, option, i, options = elem.options, index = elem.selectedIndex, one = elem.type === "select-one", values = one ? null : [], max = one ? index + 1 : options.length;
              if (index < 0) {
                i = max;
              } else {
                i = one ? index : 0;
              }
              for (; i < max; i++) {
                option = options[i];
                if ((option.selected || i === index) && !option.disabled && (!option.parentNode.disabled || !nodeName(option.parentNode, "optgroup"))) {
                  value = jQuery3(option).val();
                  if (one) {
                    return value;
                  }
                  values.push(value);
                }
              }
              return values;
            },
            set: function(elem, value) {
              var optionSet, option, options = elem.options, values = jQuery3.makeArray(value), i = options.length;
              while (i--) {
                option = options[i];
                if (option.selected = jQuery3.inArray(jQuery3.valHooks.option.get(option), values) > -1) {
                  optionSet = true;
                }
              }
              if (!optionSet) {
                elem.selectedIndex = -1;
              }
              return values;
            }
          }
        }
      });
      jQuery3.each(["radio", "checkbox"], function() {
        jQuery3.valHooks[this] = {
          set: function(elem, value) {
            if (Array.isArray(value)) {
              return elem.checked = jQuery3.inArray(jQuery3(elem).val(), value) > -1;
            }
          }
        };
        if (!support.checkOn) {
          jQuery3.valHooks[this].get = function(elem) {
            return elem.getAttribute("value") === null ? "on" : elem.value;
          };
        }
      });
      support.focusin = "onfocusin" in window2;
      var rfocusMorph = /^(?:focusinfocus|focusoutblur)$/, stopPropagationCallback = function(e) {
        e.stopPropagation();
      };
      jQuery3.extend(jQuery3.event, {
        trigger: function(event, data, elem, onlyHandlers) {
          var i, cur, tmp, bubbleType, ontype, handle, special, lastElement, eventPath = [elem || document2], type = hasOwn.call(event, "type") ? event.type : event, namespaces = hasOwn.call(event, "namespace") ? event.namespace.split(".") : [];
          cur = lastElement = tmp = elem = elem || document2;
          if (elem.nodeType === 3 || elem.nodeType === 8) {
            return;
          }
          if (rfocusMorph.test(type + jQuery3.event.triggered)) {
            return;
          }
          if (type.indexOf(".") > -1) {
            namespaces = type.split(".");
            type = namespaces.shift();
            namespaces.sort();
          }
          ontype = type.indexOf(":") < 0 && "on" + type;
          event = event[jQuery3.expando] ? event : new jQuery3.Event(type, typeof event === "object" && event);
          event.isTrigger = onlyHandlers ? 2 : 3;
          event.namespace = namespaces.join(".");
          event.rnamespace = event.namespace ? new RegExp("(^|\\.)" + namespaces.join("\\.(?:.*\\.|)") + "(\\.|$)") : null;
          event.result = void 0;
          if (!event.target) {
            event.target = elem;
          }
          data = data == null ? [event] : jQuery3.makeArray(data, [event]);
          special = jQuery3.event.special[type] || {};
          if (!onlyHandlers && special.trigger && special.trigger.apply(elem, data) === false) {
            return;
          }
          if (!onlyHandlers && !special.noBubble && !isWindow(elem)) {
            bubbleType = special.delegateType || type;
            if (!rfocusMorph.test(bubbleType + type)) {
              cur = cur.parentNode;
            }
            for (; cur; cur = cur.parentNode) {
              eventPath.push(cur);
              tmp = cur;
            }
            if (tmp === (elem.ownerDocument || document2)) {
              eventPath.push(tmp.defaultView || tmp.parentWindow || window2);
            }
          }
          i = 0;
          while ((cur = eventPath[i++]) && !event.isPropagationStopped()) {
            lastElement = cur;
            event.type = i > 1 ? bubbleType : special.bindType || type;
            handle = (dataPriv.get(cur, "events") || Object.create(null))[event.type] && dataPriv.get(cur, "handle");
            if (handle) {
              handle.apply(cur, data);
            }
            handle = ontype && cur[ontype];
            if (handle && handle.apply && acceptData(cur)) {
              event.result = handle.apply(cur, data);
              if (event.result === false) {
                event.preventDefault();
              }
            }
          }
          event.type = type;
          if (!onlyHandlers && !event.isDefaultPrevented()) {
            if ((!special._default || special._default.apply(eventPath.pop(), data) === false) && acceptData(elem)) {
              if (ontype && isFunction(elem[type]) && !isWindow(elem)) {
                tmp = elem[ontype];
                if (tmp) {
                  elem[ontype] = null;
                }
                jQuery3.event.triggered = type;
                if (event.isPropagationStopped()) {
                  lastElement.addEventListener(type, stopPropagationCallback);
                }
                elem[type]();
                if (event.isPropagationStopped()) {
                  lastElement.removeEventListener(type, stopPropagationCallback);
                }
                jQuery3.event.triggered = void 0;
                if (tmp) {
                  elem[ontype] = tmp;
                }
              }
            }
          }
          return event.result;
        },
        simulate: function(type, elem, event) {
          var e = jQuery3.extend(new jQuery3.Event(), event, {
            type,
            isSimulated: true
          });
          jQuery3.event.trigger(e, null, elem);
        }
      });
      jQuery3.fn.extend({
        trigger: function(type, data) {
          return this.each(function() {
            jQuery3.event.trigger(type, data, this);
          });
        },
        triggerHandler: function(type, data) {
          var elem = this[0];
          if (elem) {
            return jQuery3.event.trigger(type, data, elem, true);
          }
        }
      });
      if (!support.focusin) {
        jQuery3.each({focus: "focusin", blur: "focusout"}, function(orig, fix) {
          var handler = function(event) {
            jQuery3.event.simulate(fix, event.target, jQuery3.event.fix(event));
          };
          jQuery3.event.special[fix] = {
            setup: function() {
              var doc = this.ownerDocument || this.document || this, attaches = dataPriv.access(doc, fix);
              if (!attaches) {
                doc.addEventListener(orig, handler, true);
              }
              dataPriv.access(doc, fix, (attaches || 0) + 1);
            },
            teardown: function() {
              var doc = this.ownerDocument || this.document || this, attaches = dataPriv.access(doc, fix) - 1;
              if (!attaches) {
                doc.removeEventListener(orig, handler, true);
                dataPriv.remove(doc, fix);
              } else {
                dataPriv.access(doc, fix, attaches);
              }
            }
          };
        });
      }
      var location = window2.location;
      var nonce = {guid: Date.now()};
      var rquery = /\?/;
      jQuery3.parseXML = function(data) {
        var xml, parserErrorElem;
        if (!data || typeof data !== "string") {
          return null;
        }
        try {
          xml = new window2.DOMParser().parseFromString(data, "text/xml");
        } catch (e) {
        }
        parserErrorElem = xml && xml.getElementsByTagName("parsererror")[0];
        if (!xml || parserErrorElem) {
          jQuery3.error("Invalid XML: " + (parserErrorElem ? jQuery3.map(parserErrorElem.childNodes, function(el) {
            return el.textContent;
          }).join("\n") : data));
        }
        return xml;
      };
      var rbracket = /\[\]$/, rCRLF = /\r?\n/g, rsubmitterTypes = /^(?:submit|button|image|reset|file)$/i, rsubmittable = /^(?:input|select|textarea|keygen)/i;
      function buildParams(prefix, obj, traditional, add) {
        var name;
        if (Array.isArray(obj)) {
          jQuery3.each(obj, function(i, v) {
            if (traditional || rbracket.test(prefix)) {
              add(prefix, v);
            } else {
              buildParams(prefix + "[" + (typeof v === "object" && v != null ? i : "") + "]", v, traditional, add);
            }
          });
        } else if (!traditional && toType(obj) === "object") {
          for (name in obj) {
            buildParams(prefix + "[" + name + "]", obj[name], traditional, add);
          }
        } else {
          add(prefix, obj);
        }
      }
      jQuery3.param = function(a, traditional) {
        var prefix, s = [], add = function(key, valueOrFunction) {
          var value = isFunction(valueOrFunction) ? valueOrFunction() : valueOrFunction;
          s[s.length] = encodeURIComponent(key) + "=" + encodeURIComponent(value == null ? "" : value);
        };
        if (a == null) {
          return "";
        }
        if (Array.isArray(a) || a.jquery && !jQuery3.isPlainObject(a)) {
          jQuery3.each(a, function() {
            add(this.name, this.value);
          });
        } else {
          for (prefix in a) {
            buildParams(prefix, a[prefix], traditional, add);
          }
        }
        return s.join("&");
      };
      jQuery3.fn.extend({
        serialize: function() {
          return jQuery3.param(this.serializeArray());
        },
        serializeArray: function() {
          return this.map(function() {
            var elements = jQuery3.prop(this, "elements");
            return elements ? jQuery3.makeArray(elements) : this;
          }).filter(function() {
            var type = this.type;
            return this.name && !jQuery3(this).is(":disabled") && rsubmittable.test(this.nodeName) && !rsubmitterTypes.test(type) && (this.checked || !rcheckableType.test(type));
          }).map(function(_i, elem) {
            var val = jQuery3(this).val();
            if (val == null) {
              return null;
            }
            if (Array.isArray(val)) {
              return jQuery3.map(val, function(val2) {
                return {name: elem.name, value: val2.replace(rCRLF, "\r\n")};
              });
            }
            return {name: elem.name, value: val.replace(rCRLF, "\r\n")};
          }).get();
        }
      });
      var r20 = /%20/g, rhash = /#.*$/, rantiCache = /([?&])_=[^&]*/, rheaders = /^(.*?):[ \t]*([^\r\n]*)$/mg, rlocalProtocol = /^(?:about|app|app-storage|.+-extension|file|res|widget):$/, rnoContent = /^(?:GET|HEAD)$/, rprotocol = /^\/\//, prefilters = {}, transports = {}, allTypes = "*/".concat("*"), originAnchor = document2.createElement("a");
      originAnchor.href = location.href;
      function addToPrefiltersOrTransports(structure) {
        return function(dataTypeExpression, func) {
          if (typeof dataTypeExpression !== "string") {
            func = dataTypeExpression;
            dataTypeExpression = "*";
          }
          var dataType, i = 0, dataTypes = dataTypeExpression.toLowerCase().match(rnothtmlwhite) || [];
          if (isFunction(func)) {
            while (dataType = dataTypes[i++]) {
              if (dataType[0] === "+") {
                dataType = dataType.slice(1) || "*";
                (structure[dataType] = structure[dataType] || []).unshift(func);
              } else {
                (structure[dataType] = structure[dataType] || []).push(func);
              }
            }
          }
        };
      }
      function inspectPrefiltersOrTransports(structure, options, originalOptions, jqXHR) {
        var inspected = {}, seekingTransport = structure === transports;
        function inspect(dataType) {
          var selected;
          inspected[dataType] = true;
          jQuery3.each(structure[dataType] || [], function(_, prefilterOrFactory) {
            var dataTypeOrTransport = prefilterOrFactory(options, originalOptions, jqXHR);
            if (typeof dataTypeOrTransport === "string" && !seekingTransport && !inspected[dataTypeOrTransport]) {
              options.dataTypes.unshift(dataTypeOrTransport);
              inspect(dataTypeOrTransport);
              return false;
            } else if (seekingTransport) {
              return !(selected = dataTypeOrTransport);
            }
          });
          return selected;
        }
        return inspect(options.dataTypes[0]) || !inspected["*"] && inspect("*");
      }
      function ajaxExtend(target, src) {
        var key, deep, flatOptions = jQuery3.ajaxSettings.flatOptions || {};
        for (key in src) {
          if (src[key] !== void 0) {
            (flatOptions[key] ? target : deep || (deep = {}))[key] = src[key];
          }
        }
        if (deep) {
          jQuery3.extend(true, target, deep);
        }
        return target;
      }
      function ajaxHandleResponses(s, jqXHR, responses) {
        var ct, type, finalDataType, firstDataType, contents = s.contents, dataTypes = s.dataTypes;
        while (dataTypes[0] === "*") {
          dataTypes.shift();
          if (ct === void 0) {
            ct = s.mimeType || jqXHR.getResponseHeader("Content-Type");
          }
        }
        if (ct) {
          for (type in contents) {
            if (contents[type] && contents[type].test(ct)) {
              dataTypes.unshift(type);
              break;
            }
          }
        }
        if (dataTypes[0] in responses) {
          finalDataType = dataTypes[0];
        } else {
          for (type in responses) {
            if (!dataTypes[0] || s.converters[type + " " + dataTypes[0]]) {
              finalDataType = type;
              break;
            }
            if (!firstDataType) {
              firstDataType = type;
            }
          }
          finalDataType = finalDataType || firstDataType;
        }
        if (finalDataType) {
          if (finalDataType !== dataTypes[0]) {
            dataTypes.unshift(finalDataType);
          }
          return responses[finalDataType];
        }
      }
      function ajaxConvert(s, response, jqXHR, isSuccess) {
        var conv2, current, conv, tmp, prev, converters = {}, dataTypes = s.dataTypes.slice();
        if (dataTypes[1]) {
          for (conv in s.converters) {
            converters[conv.toLowerCase()] = s.converters[conv];
          }
        }
        current = dataTypes.shift();
        while (current) {
          if (s.responseFields[current]) {
            jqXHR[s.responseFields[current]] = response;
          }
          if (!prev && isSuccess && s.dataFilter) {
            response = s.dataFilter(response, s.dataType);
          }
          prev = current;
          current = dataTypes.shift();
          if (current) {
            if (current === "*") {
              current = prev;
            } else if (prev !== "*" && prev !== current) {
              conv = converters[prev + " " + current] || converters["* " + current];
              if (!conv) {
                for (conv2 in converters) {
                  tmp = conv2.split(" ");
                  if (tmp[1] === current) {
                    conv = converters[prev + " " + tmp[0]] || converters["* " + tmp[0]];
                    if (conv) {
                      if (conv === true) {
                        conv = converters[conv2];
                      } else if (converters[conv2] !== true) {
                        current = tmp[0];
                        dataTypes.unshift(tmp[1]);
                      }
                      break;
                    }
                  }
                }
              }
              if (conv !== true) {
                if (conv && s.throws) {
                  response = conv(response);
                } else {
                  try {
                    response = conv(response);
                  } catch (e) {
                    return {
                      state: "parsererror",
                      error: conv ? e : "No conversion from " + prev + " to " + current
                    };
                  }
                }
              }
            }
          }
        }
        return {state: "success", data: response};
      }
      jQuery3.extend({
        active: 0,
        lastModified: {},
        etag: {},
        ajaxSettings: {
          url: location.href,
          type: "GET",
          isLocal: rlocalProtocol.test(location.protocol),
          global: true,
          processData: true,
          async: true,
          contentType: "application/x-www-form-urlencoded; charset=UTF-8",
          accepts: {
            "*": allTypes,
            text: "text/plain",
            html: "text/html",
            xml: "application/xml, text/xml",
            json: "application/json, text/javascript"
          },
          contents: {
            xml: /\bxml\b/,
            html: /\bhtml/,
            json: /\bjson\b/
          },
          responseFields: {
            xml: "responseXML",
            text: "responseText",
            json: "responseJSON"
          },
          converters: {
            "* text": String,
            "text html": true,
            "text json": JSON.parse,
            "text xml": jQuery3.parseXML
          },
          flatOptions: {
            url: true,
            context: true
          }
        },
        ajaxSetup: function(target, settings) {
          return settings ? ajaxExtend(ajaxExtend(target, jQuery3.ajaxSettings), settings) : ajaxExtend(jQuery3.ajaxSettings, target);
        },
        ajaxPrefilter: addToPrefiltersOrTransports(prefilters),
        ajaxTransport: addToPrefiltersOrTransports(transports),
        ajax: function(url, options) {
          if (typeof url === "object") {
            options = url;
            url = void 0;
          }
          options = options || {};
          var transport, cacheURL, responseHeadersString, responseHeaders, timeoutTimer, urlAnchor, completed2, fireGlobals, i, uncached, s = jQuery3.ajaxSetup({}, options), callbackContext = s.context || s, globalEventContext = s.context && (callbackContext.nodeType || callbackContext.jquery) ? jQuery3(callbackContext) : jQuery3.event, deferred = jQuery3.Deferred(), completeDeferred = jQuery3.Callbacks("once memory"), statusCode = s.statusCode || {}, requestHeaders = {}, requestHeadersNames = {}, strAbort = "canceled", jqXHR = {
            readyState: 0,
            getResponseHeader: function(key) {
              var match;
              if (completed2) {
                if (!responseHeaders) {
                  responseHeaders = {};
                  while (match = rheaders.exec(responseHeadersString)) {
                    responseHeaders[match[1].toLowerCase() + " "] = (responseHeaders[match[1].toLowerCase() + " "] || []).concat(match[2]);
                  }
                }
                match = responseHeaders[key.toLowerCase() + " "];
              }
              return match == null ? null : match.join(", ");
            },
            getAllResponseHeaders: function() {
              return completed2 ? responseHeadersString : null;
            },
            setRequestHeader: function(name, value) {
              if (completed2 == null) {
                name = requestHeadersNames[name.toLowerCase()] = requestHeadersNames[name.toLowerCase()] || name;
                requestHeaders[name] = value;
              }
              return this;
            },
            overrideMimeType: function(type) {
              if (completed2 == null) {
                s.mimeType = type;
              }
              return this;
            },
            statusCode: function(map) {
              var code;
              if (map) {
                if (completed2) {
                  jqXHR.always(map[jqXHR.status]);
                } else {
                  for (code in map) {
                    statusCode[code] = [statusCode[code], map[code]];
                  }
                }
              }
              return this;
            },
            abort: function(statusText) {
              var finalText = statusText || strAbort;
              if (transport) {
                transport.abort(finalText);
              }
              done(0, finalText);
              return this;
            }
          };
          deferred.promise(jqXHR);
          s.url = ((url || s.url || location.href) + "").replace(rprotocol, location.protocol + "//");
          s.type = options.method || options.type || s.method || s.type;
          s.dataTypes = (s.dataType || "*").toLowerCase().match(rnothtmlwhite) || [""];
          if (s.crossDomain == null) {
            urlAnchor = document2.createElement("a");
            try {
              urlAnchor.href = s.url;
              urlAnchor.href = urlAnchor.href;
              s.crossDomain = originAnchor.protocol + "//" + originAnchor.host !== urlAnchor.protocol + "//" + urlAnchor.host;
            } catch (e) {
              s.crossDomain = true;
            }
          }
          if (s.data && s.processData && typeof s.data !== "string") {
            s.data = jQuery3.param(s.data, s.traditional);
          }
          inspectPrefiltersOrTransports(prefilters, s, options, jqXHR);
          if (completed2) {
            return jqXHR;
          }
          fireGlobals = jQuery3.event && s.global;
          if (fireGlobals && jQuery3.active++ === 0) {
            jQuery3.event.trigger("ajaxStart");
          }
          s.type = s.type.toUpperCase();
          s.hasContent = !rnoContent.test(s.type);
          cacheURL = s.url.replace(rhash, "");
          if (!s.hasContent) {
            uncached = s.url.slice(cacheURL.length);
            if (s.data && (s.processData || typeof s.data === "string")) {
              cacheURL += (rquery.test(cacheURL) ? "&" : "?") + s.data;
              delete s.data;
            }
            if (s.cache === false) {
              cacheURL = cacheURL.replace(rantiCache, "$1");
              uncached = (rquery.test(cacheURL) ? "&" : "?") + "_=" + nonce.guid++ + uncached;
            }
            s.url = cacheURL + uncached;
          } else if (s.data && s.processData && (s.contentType || "").indexOf("application/x-www-form-urlencoded") === 0) {
            s.data = s.data.replace(r20, "+");
          }
          if (s.ifModified) {
            if (jQuery3.lastModified[cacheURL]) {
              jqXHR.setRequestHeader("If-Modified-Since", jQuery3.lastModified[cacheURL]);
            }
            if (jQuery3.etag[cacheURL]) {
              jqXHR.setRequestHeader("If-None-Match", jQuery3.etag[cacheURL]);
            }
          }
          if (s.data && s.hasContent && s.contentType !== false || options.contentType) {
            jqXHR.setRequestHeader("Content-Type", s.contentType);
          }
          jqXHR.setRequestHeader("Accept", s.dataTypes[0] && s.accepts[s.dataTypes[0]] ? s.accepts[s.dataTypes[0]] + (s.dataTypes[0] !== "*" ? ", " + allTypes + "; q=0.01" : "") : s.accepts["*"]);
          for (i in s.headers) {
            jqXHR.setRequestHeader(i, s.headers[i]);
          }
          if (s.beforeSend && (s.beforeSend.call(callbackContext, jqXHR, s) === false || completed2)) {
            return jqXHR.abort();
          }
          strAbort = "abort";
          completeDeferred.add(s.complete);
          jqXHR.done(s.success);
          jqXHR.fail(s.error);
          transport = inspectPrefiltersOrTransports(transports, s, options, jqXHR);
          if (!transport) {
            done(-1, "No Transport");
          } else {
            jqXHR.readyState = 1;
            if (fireGlobals) {
              globalEventContext.trigger("ajaxSend", [jqXHR, s]);
            }
            if (completed2) {
              return jqXHR;
            }
            if (s.async && s.timeout > 0) {
              timeoutTimer = window2.setTimeout(function() {
                jqXHR.abort("timeout");
              }, s.timeout);
            }
            try {
              completed2 = false;
              transport.send(requestHeaders, done);
            } catch (e) {
              if (completed2) {
                throw e;
              }
              done(-1, e);
            }
          }
          function done(status, nativeStatusText, responses, headers) {
            var isSuccess, success, error, response, modified, statusText = nativeStatusText;
            if (completed2) {
              return;
            }
            completed2 = true;
            if (timeoutTimer) {
              window2.clearTimeout(timeoutTimer);
            }
            transport = void 0;
            responseHeadersString = headers || "";
            jqXHR.readyState = status > 0 ? 4 : 0;
            isSuccess = status >= 200 && status < 300 || status === 304;
            if (responses) {
              response = ajaxHandleResponses(s, jqXHR, responses);
            }
            if (!isSuccess && jQuery3.inArray("script", s.dataTypes) > -1 && jQuery3.inArray("json", s.dataTypes) < 0) {
              s.converters["text script"] = function() {
              };
            }
            response = ajaxConvert(s, response, jqXHR, isSuccess);
            if (isSuccess) {
              if (s.ifModified) {
                modified = jqXHR.getResponseHeader("Last-Modified");
                if (modified) {
                  jQuery3.lastModified[cacheURL] = modified;
                }
                modified = jqXHR.getResponseHeader("etag");
                if (modified) {
                  jQuery3.etag[cacheURL] = modified;
                }
              }
              if (status === 204 || s.type === "HEAD") {
                statusText = "nocontent";
              } else if (status === 304) {
                statusText = "notmodified";
              } else {
                statusText = response.state;
                success = response.data;
                error = response.error;
                isSuccess = !error;
              }
            } else {
              error = statusText;
              if (status || !statusText) {
                statusText = "error";
                if (status < 0) {
                  status = 0;
                }
              }
            }
            jqXHR.status = status;
            jqXHR.statusText = (nativeStatusText || statusText) + "";
            if (isSuccess) {
              deferred.resolveWith(callbackContext, [success, statusText, jqXHR]);
            } else {
              deferred.rejectWith(callbackContext, [jqXHR, statusText, error]);
            }
            jqXHR.statusCode(statusCode);
            statusCode = void 0;
            if (fireGlobals) {
              globalEventContext.trigger(isSuccess ? "ajaxSuccess" : "ajaxError", [jqXHR, s, isSuccess ? success : error]);
            }
            completeDeferred.fireWith(callbackContext, [jqXHR, statusText]);
            if (fireGlobals) {
              globalEventContext.trigger("ajaxComplete", [jqXHR, s]);
              if (!--jQuery3.active) {
                jQuery3.event.trigger("ajaxStop");
              }
            }
          }
          return jqXHR;
        },
        getJSON: function(url, data, callback) {
          return jQuery3.get(url, data, callback, "json");
        },
        getScript: function(url, callback) {
          return jQuery3.get(url, void 0, callback, "script");
        }
      });
      jQuery3.each(["get", "post"], function(_i, method) {
        jQuery3[method] = function(url, data, callback, type) {
          if (isFunction(data)) {
            type = type || callback;
            callback = data;
            data = void 0;
          }
          return jQuery3.ajax(jQuery3.extend({
            url,
            type: method,
            dataType: type,
            data,
            success: callback
          }, jQuery3.isPlainObject(url) && url));
        };
      });
      jQuery3.ajaxPrefilter(function(s) {
        var i;
        for (i in s.headers) {
          if (i.toLowerCase() === "content-type") {
            s.contentType = s.headers[i] || "";
          }
        }
      });
      jQuery3._evalUrl = function(url, options, doc) {
        return jQuery3.ajax({
          url,
          type: "GET",
          dataType: "script",
          cache: true,
          async: false,
          global: false,
          converters: {
            "text script": function() {
            }
          },
          dataFilter: function(response) {
            jQuery3.globalEval(response, options, doc);
          }
        });
      };
      jQuery3.fn.extend({
        wrapAll: function(html) {
          var wrap;
          if (this[0]) {
            if (isFunction(html)) {
              html = html.call(this[0]);
            }
            wrap = jQuery3(html, this[0].ownerDocument).eq(0).clone(true);
            if (this[0].parentNode) {
              wrap.insertBefore(this[0]);
            }
            wrap.map(function() {
              var elem = this;
              while (elem.firstElementChild) {
                elem = elem.firstElementChild;
              }
              return elem;
            }).append(this);
          }
          return this;
        },
        wrapInner: function(html) {
          if (isFunction(html)) {
            return this.each(function(i) {
              jQuery3(this).wrapInner(html.call(this, i));
            });
          }
          return this.each(function() {
            var self = jQuery3(this), contents = self.contents();
            if (contents.length) {
              contents.wrapAll(html);
            } else {
              self.append(html);
            }
          });
        },
        wrap: function(html) {
          var htmlIsFunction = isFunction(html);
          return this.each(function(i) {
            jQuery3(this).wrapAll(htmlIsFunction ? html.call(this, i) : html);
          });
        },
        unwrap: function(selector) {
          this.parent(selector).not("body").each(function() {
            jQuery3(this).replaceWith(this.childNodes);
          });
          return this;
        }
      });
      jQuery3.expr.pseudos.hidden = function(elem) {
        return !jQuery3.expr.pseudos.visible(elem);
      };
      jQuery3.expr.pseudos.visible = function(elem) {
        return !!(elem.offsetWidth || elem.offsetHeight || elem.getClientRects().length);
      };
      jQuery3.ajaxSettings.xhr = function() {
        try {
          return new window2.XMLHttpRequest();
        } catch (e) {
        }
      };
      var xhrSuccessStatus = {
        0: 200,
        1223: 204
      }, xhrSupported = jQuery3.ajaxSettings.xhr();
      support.cors = !!xhrSupported && "withCredentials" in xhrSupported;
      support.ajax = xhrSupported = !!xhrSupported;
      jQuery3.ajaxTransport(function(options) {
        var callback, errorCallback;
        if (support.cors || xhrSupported && !options.crossDomain) {
          return {
            send: function(headers, complete) {
              var i, xhr = options.xhr();
              xhr.open(options.type, options.url, options.async, options.username, options.password);
              if (options.xhrFields) {
                for (i in options.xhrFields) {
                  xhr[i] = options.xhrFields[i];
                }
              }
              if (options.mimeType && xhr.overrideMimeType) {
                xhr.overrideMimeType(options.mimeType);
              }
              if (!options.crossDomain && !headers["X-Requested-With"]) {
                headers["X-Requested-With"] = "XMLHttpRequest";
              }
              for (i in headers) {
                xhr.setRequestHeader(i, headers[i]);
              }
              callback = function(type) {
                return function() {
                  if (callback) {
                    callback = errorCallback = xhr.onload = xhr.onerror = xhr.onabort = xhr.ontimeout = xhr.onreadystatechange = null;
                    if (type === "abort") {
                      xhr.abort();
                    } else if (type === "error") {
                      if (typeof xhr.status !== "number") {
                        complete(0, "error");
                      } else {
                        complete(xhr.status, xhr.statusText);
                      }
                    } else {
                      complete(xhrSuccessStatus[xhr.status] || xhr.status, xhr.statusText, (xhr.responseType || "text") !== "text" || typeof xhr.responseText !== "string" ? {binary: xhr.response} : {text: xhr.responseText}, xhr.getAllResponseHeaders());
                    }
                  }
                };
              };
              xhr.onload = callback();
              errorCallback = xhr.onerror = xhr.ontimeout = callback("error");
              if (xhr.onabort !== void 0) {
                xhr.onabort = errorCallback;
              } else {
                xhr.onreadystatechange = function() {
                  if (xhr.readyState === 4) {
                    window2.setTimeout(function() {
                      if (callback) {
                        errorCallback();
                      }
                    });
                  }
                };
              }
              callback = callback("abort");
              try {
                xhr.send(options.hasContent && options.data || null);
              } catch (e) {
                if (callback) {
                  throw e;
                }
              }
            },
            abort: function() {
              if (callback) {
                callback();
              }
            }
          };
        }
      });
      jQuery3.ajaxPrefilter(function(s) {
        if (s.crossDomain) {
          s.contents.script = false;
        }
      });
      jQuery3.ajaxSetup({
        accepts: {
          script: "text/javascript, application/javascript, application/ecmascript, application/x-ecmascript"
        },
        contents: {
          script: /\b(?:java|ecma)script\b/
        },
        converters: {
          "text script": function(text) {
            jQuery3.globalEval(text);
            return text;
          }
        }
      });
      jQuery3.ajaxPrefilter("script", function(s) {
        if (s.cache === void 0) {
          s.cache = false;
        }
        if (s.crossDomain) {
          s.type = "GET";
        }
      });
      jQuery3.ajaxTransport("script", function(s) {
        if (s.crossDomain || s.scriptAttrs) {
          var script, callback;
          return {
            send: function(_, complete) {
              script = jQuery3("<script>").attr(s.scriptAttrs || {}).prop({charset: s.scriptCharset, src: s.url}).on("load error", callback = function(evt) {
                script.remove();
                callback = null;
                if (evt) {
                  complete(evt.type === "error" ? 404 : 200, evt.type);
                }
              });
              document2.head.appendChild(script[0]);
            },
            abort: function() {
              if (callback) {
                callback();
              }
            }
          };
        }
      });
      var oldCallbacks = [], rjsonp = /(=)\?(?=&|$)|\?\?/;
      jQuery3.ajaxSetup({
        jsonp: "callback",
        jsonpCallback: function() {
          var callback = oldCallbacks.pop() || jQuery3.expando + "_" + nonce.guid++;
          this[callback] = true;
          return callback;
        }
      });
      jQuery3.ajaxPrefilter("json jsonp", function(s, originalSettings, jqXHR) {
        var callbackName, overwritten, responseContainer, jsonProp = s.jsonp !== false && (rjsonp.test(s.url) ? "url" : typeof s.data === "string" && (s.contentType || "").indexOf("application/x-www-form-urlencoded") === 0 && rjsonp.test(s.data) && "data");
        if (jsonProp || s.dataTypes[0] === "jsonp") {
          callbackName = s.jsonpCallback = isFunction(s.jsonpCallback) ? s.jsonpCallback() : s.jsonpCallback;
          if (jsonProp) {
            s[jsonProp] = s[jsonProp].replace(rjsonp, "$1" + callbackName);
          } else if (s.jsonp !== false) {
            s.url += (rquery.test(s.url) ? "&" : "?") + s.jsonp + "=" + callbackName;
          }
          s.converters["script json"] = function() {
            if (!responseContainer) {
              jQuery3.error(callbackName + " was not called");
            }
            return responseContainer[0];
          };
          s.dataTypes[0] = "json";
          overwritten = window2[callbackName];
          window2[callbackName] = function() {
            responseContainer = arguments;
          };
          jqXHR.always(function() {
            if (overwritten === void 0) {
              jQuery3(window2).removeProp(callbackName);
            } else {
              window2[callbackName] = overwritten;
            }
            if (s[callbackName]) {
              s.jsonpCallback = originalSettings.jsonpCallback;
              oldCallbacks.push(callbackName);
            }
            if (responseContainer && isFunction(overwritten)) {
              overwritten(responseContainer[0]);
            }
            responseContainer = overwritten = void 0;
          });
          return "script";
        }
      });
      support.createHTMLDocument = function() {
        var body = document2.implementation.createHTMLDocument("").body;
        body.innerHTML = "<form></form><form></form>";
        return body.childNodes.length === 2;
      }();
      jQuery3.parseHTML = function(data, context, keepScripts) {
        if (typeof data !== "string") {
          return [];
        }
        if (typeof context === "boolean") {
          keepScripts = context;
          context = false;
        }
        var base, parsed, scripts;
        if (!context) {
          if (support.createHTMLDocument) {
            context = document2.implementation.createHTMLDocument("");
            base = context.createElement("base");
            base.href = document2.location.href;
            context.head.appendChild(base);
          } else {
            context = document2;
          }
        }
        parsed = rsingleTag.exec(data);
        scripts = !keepScripts && [];
        if (parsed) {
          return [context.createElement(parsed[1])];
        }
        parsed = buildFragment([data], context, scripts);
        if (scripts && scripts.length) {
          jQuery3(scripts).remove();
        }
        return jQuery3.merge([], parsed.childNodes);
      };
      jQuery3.fn.load = function(url, params, callback) {
        var selector, type, response, self = this, off = url.indexOf(" ");
        if (off > -1) {
          selector = stripAndCollapse(url.slice(off));
          url = url.slice(0, off);
        }
        if (isFunction(params)) {
          callback = params;
          params = void 0;
        } else if (params && typeof params === "object") {
          type = "POST";
        }
        if (self.length > 0) {
          jQuery3.ajax({
            url,
            type: type || "GET",
            dataType: "html",
            data: params
          }).done(function(responseText) {
            response = arguments;
            self.html(selector ? jQuery3("<div>").append(jQuery3.parseHTML(responseText)).find(selector) : responseText);
          }).always(callback && function(jqXHR, status) {
            self.each(function() {
              callback.apply(this, response || [jqXHR.responseText, status, jqXHR]);
            });
          });
        }
        return this;
      };
      jQuery3.expr.pseudos.animated = function(elem) {
        return jQuery3.grep(jQuery3.timers, function(fn) {
          return elem === fn.elem;
        }).length;
      };
      jQuery3.offset = {
        setOffset: function(elem, options, i) {
          var curPosition, curLeft, curCSSTop, curTop, curOffset, curCSSLeft, calculatePosition, position = jQuery3.css(elem, "position"), curElem = jQuery3(elem), props = {};
          if (position === "static") {
            elem.style.position = "relative";
          }
          curOffset = curElem.offset();
          curCSSTop = jQuery3.css(elem, "top");
          curCSSLeft = jQuery3.css(elem, "left");
          calculatePosition = (position === "absolute" || position === "fixed") && (curCSSTop + curCSSLeft).indexOf("auto") > -1;
          if (calculatePosition) {
            curPosition = curElem.position();
            curTop = curPosition.top;
            curLeft = curPosition.left;
          } else {
            curTop = parseFloat(curCSSTop) || 0;
            curLeft = parseFloat(curCSSLeft) || 0;
          }
          if (isFunction(options)) {
            options = options.call(elem, i, jQuery3.extend({}, curOffset));
          }
          if (options.top != null) {
            props.top = options.top - curOffset.top + curTop;
          }
          if (options.left != null) {
            props.left = options.left - curOffset.left + curLeft;
          }
          if ("using" in options) {
            options.using.call(elem, props);
          } else {
            curElem.css(props);
          }
        }
      };
      jQuery3.fn.extend({
        offset: function(options) {
          if (arguments.length) {
            return options === void 0 ? this : this.each(function(i) {
              jQuery3.offset.setOffset(this, options, i);
            });
          }
          var rect, win, elem = this[0];
          if (!elem) {
            return;
          }
          if (!elem.getClientRects().length) {
            return {top: 0, left: 0};
          }
          rect = elem.getBoundingClientRect();
          win = elem.ownerDocument.defaultView;
          return {
            top: rect.top + win.pageYOffset,
            left: rect.left + win.pageXOffset
          };
        },
        position: function() {
          if (!this[0]) {
            return;
          }
          var offsetParent, offset, doc, elem = this[0], parentOffset = {top: 0, left: 0};
          if (jQuery3.css(elem, "position") === "fixed") {
            offset = elem.getBoundingClientRect();
          } else {
            offset = this.offset();
            doc = elem.ownerDocument;
            offsetParent = elem.offsetParent || doc.documentElement;
            while (offsetParent && (offsetParent === doc.body || offsetParent === doc.documentElement) && jQuery3.css(offsetParent, "position") === "static") {
              offsetParent = offsetParent.parentNode;
            }
            if (offsetParent && offsetParent !== elem && offsetParent.nodeType === 1) {
              parentOffset = jQuery3(offsetParent).offset();
              parentOffset.top += jQuery3.css(offsetParent, "borderTopWidth", true);
              parentOffset.left += jQuery3.css(offsetParent, "borderLeftWidth", true);
            }
          }
          return {
            top: offset.top - parentOffset.top - jQuery3.css(elem, "marginTop", true),
            left: offset.left - parentOffset.left - jQuery3.css(elem, "marginLeft", true)
          };
        },
        offsetParent: function() {
          return this.map(function() {
            var offsetParent = this.offsetParent;
            while (offsetParent && jQuery3.css(offsetParent, "position") === "static") {
              offsetParent = offsetParent.offsetParent;
            }
            return offsetParent || documentElement;
          });
        }
      });
      jQuery3.each({scrollLeft: "pageXOffset", scrollTop: "pageYOffset"}, function(method, prop) {
        var top = prop === "pageYOffset";
        jQuery3.fn[method] = function(val) {
          return access(this, function(elem, method2, val2) {
            var win;
            if (isWindow(elem)) {
              win = elem;
            } else if (elem.nodeType === 9) {
              win = elem.defaultView;
            }
            if (val2 === void 0) {
              return win ? win[prop] : elem[method2];
            }
            if (win) {
              win.scrollTo(!top ? val2 : win.pageXOffset, top ? val2 : win.pageYOffset);
            } else {
              elem[method2] = val2;
            }
          }, method, val, arguments.length);
        };
      });
      jQuery3.each(["top", "left"], function(_i, prop) {
        jQuery3.cssHooks[prop] = addGetHookIf(support.pixelPosition, function(elem, computed) {
          if (computed) {
            computed = curCSS(elem, prop);
            return rnumnonpx.test(computed) ? jQuery3(elem).position()[prop] + "px" : computed;
          }
        });
      });
      jQuery3.each({Height: "height", Width: "width"}, function(name, type) {
        jQuery3.each({
          padding: "inner" + name,
          content: type,
          "": "outer" + name
        }, function(defaultExtra, funcName) {
          jQuery3.fn[funcName] = function(margin, value) {
            var chainable = arguments.length && (defaultExtra || typeof margin !== "boolean"), extra = defaultExtra || (margin === true || value === true ? "margin" : "border");
            return access(this, function(elem, type2, value2) {
              var doc;
              if (isWindow(elem)) {
                return funcName.indexOf("outer") === 0 ? elem["inner" + name] : elem.document.documentElement["client" + name];
              }
              if (elem.nodeType === 9) {
                doc = elem.documentElement;
                return Math.max(elem.body["scroll" + name], doc["scroll" + name], elem.body["offset" + name], doc["offset" + name], doc["client" + name]);
              }
              return value2 === void 0 ? jQuery3.css(elem, type2, extra) : jQuery3.style(elem, type2, value2, extra);
            }, type, chainable ? margin : void 0, chainable);
          };
        });
      });
      jQuery3.each([
        "ajaxStart",
        "ajaxStop",
        "ajaxComplete",
        "ajaxError",
        "ajaxSuccess",
        "ajaxSend"
      ], function(_i, type) {
        jQuery3.fn[type] = function(fn) {
          return this.on(type, fn);
        };
      });
      jQuery3.fn.extend({
        bind: function(types, data, fn) {
          return this.on(types, null, data, fn);
        },
        unbind: function(types, fn) {
          return this.off(types, null, fn);
        },
        delegate: function(selector, types, data, fn) {
          return this.on(types, selector, data, fn);
        },
        undelegate: function(selector, types, fn) {
          return arguments.length === 1 ? this.off(selector, "**") : this.off(types, selector || "**", fn);
        },
        hover: function(fnOver, fnOut) {
          return this.mouseenter(fnOver).mouseleave(fnOut || fnOver);
        }
      });
      jQuery3.each("blur focus focusin focusout resize scroll click dblclick mousedown mouseup mousemove mouseover mouseout mouseenter mouseleave change select submit keydown keypress keyup contextmenu".split(" "), function(_i, name) {
        jQuery3.fn[name] = function(data, fn) {
          return arguments.length > 0 ? this.on(name, null, data, fn) : this.trigger(name);
        };
      });
      var rtrim = /^[\s\uFEFF\xA0]+|[\s\uFEFF\xA0]+$/g;
      jQuery3.proxy = function(fn, context) {
        var tmp, args, proxy;
        if (typeof context === "string") {
          tmp = fn[context];
          context = fn;
          fn = tmp;
        }
        if (!isFunction(fn)) {
          return void 0;
        }
        args = slice.call(arguments, 2);
        proxy = function() {
          return fn.apply(context || this, args.concat(slice.call(arguments)));
        };
        proxy.guid = fn.guid = fn.guid || jQuery3.guid++;
        return proxy;
      };
      jQuery3.holdReady = function(hold) {
        if (hold) {
          jQuery3.readyWait++;
        } else {
          jQuery3.ready(true);
        }
      };
      jQuery3.isArray = Array.isArray;
      jQuery3.parseJSON = JSON.parse;
      jQuery3.nodeName = nodeName;
      jQuery3.isFunction = isFunction;
      jQuery3.isWindow = isWindow;
      jQuery3.camelCase = camelCase;
      jQuery3.type = toType;
      jQuery3.now = Date.now;
      jQuery3.isNumeric = function(obj) {
        var type = jQuery3.type(obj);
        return (type === "number" || type === "string") && !isNaN(obj - parseFloat(obj));
      };
      jQuery3.trim = function(text) {
        return text == null ? "" : (text + "").replace(rtrim, "");
      };
      if (typeof define === "function" && define.amd) {
        define("jquery", [], function() {
          return jQuery3;
        });
      }
      var _jQuery = window2.jQuery, _$ = window2.$;
      jQuery3.noConflict = function(deep) {
        if (window2.$ === jQuery3) {
          window2.$ = _$;
        }
        if (deep && window2.jQuery === jQuery3) {
          window2.jQuery = _jQuery;
        }
        return jQuery3;
      };
      if (typeof noGlobal === "undefined") {
        window2.jQuery = window2.$ = jQuery3;
      }
      return jQuery3;
    });
  });

  // node_modules/jstree/dist/jstree.js
  var require_jstree = __commonJS((exports, module) => {
    (function(factory) {
      "use strict";
      if (typeof define === "function" && define.amd) {
        define(["jquery"], factory);
      } else if (typeof module !== "undefined" && module.exports) {
        module.exports = factory(require_jquery());
      } else {
        factory(jQuery);
      }
    })(function($2, undefined2) {
      "use strict";
      /*!
       * jsTree 3.3.11
       * http://jstree.com/
       *
       * Copyright (c) 2014 Ivan Bozhanov (http://vakata.com)
       *
       * Licensed same as jquery - under the terms of the MIT License
       *   http://www.opensource.org/licenses/mit-license.php
       */
      /*!
       * if using jslint please allow for the jQuery global and use following options:
       * jslint: loopfunc: true, browser: true, ass: true, bitwise: true, continue: true, nomen: true, plusplus: true, regexp: true, unparam: true, todo: true, white: true
       */
      if ($2.jstree) {
        return;
      }
      var instance_counter = 0, ccp_node = false, ccp_mode = false, ccp_inst = false, themes_loaded = [], src = $2("script:last").attr("src"), document2 = window.document;
      var setImmediate = window.setImmediate;
      var Promise2 = window.Promise;
      if (!setImmediate && Promise2) {
        setImmediate = function(cb, arg) {
          Promise2.resolve(arg).then(cb);
        };
      }
      $2.jstree = {
        version: "3.3.11",
        defaults: {
          plugins: []
        },
        plugins: {},
        path: src && src.indexOf("/") !== -1 ? src.replace(/\/[^\/]+$/, "") : "",
        idregex: /[\\:&!^|()\[\]<>@*'+~#";.,=\- \/${}%?`]/g,
        root: "#"
      };
      $2.jstree.create = function(el, options) {
        var tmp = new $2.jstree.core(++instance_counter), opt = options;
        options = $2.extend(true, {}, $2.jstree.defaults, options);
        if (opt && opt.plugins) {
          options.plugins = opt.plugins;
        }
        $2.each(options.plugins, function(i, k) {
          if (i !== "core") {
            tmp = tmp.plugin(k, options[k]);
          }
        });
        $2(el).data("jstree", tmp);
        tmp.init(el, options);
        return tmp;
      };
      $2.jstree.destroy = function() {
        $2(".jstree:jstree").jstree("destroy");
        $2(document2).off(".jstree");
      };
      $2.jstree.core = function(id) {
        this._id = id;
        this._cnt = 0;
        this._wrk = null;
        this._data = {
          core: {
            themes: {
              name: false,
              dots: false,
              icons: false,
              ellipsis: false
            },
            selected: [],
            last_error: {},
            working: false,
            worker_queue: [],
            focused: null
          }
        };
      };
      $2.jstree.reference = function(needle) {
        var tmp = null, obj = null;
        if (needle && needle.id && (!needle.tagName || !needle.nodeType)) {
          needle = needle.id;
        }
        if (!obj || !obj.length) {
          try {
            obj = $2(needle);
          } catch (ignore) {
          }
        }
        if (!obj || !obj.length) {
          try {
            obj = $2("#" + needle.replace($2.jstree.idregex, "\\$&"));
          } catch (ignore) {
          }
        }
        if (obj && obj.length && (obj = obj.closest(".jstree")).length && (obj = obj.data("jstree"))) {
          tmp = obj;
        } else {
          $2(".jstree").each(function() {
            var inst = $2(this).data("jstree");
            if (inst && inst._model.data[needle]) {
              tmp = inst;
              return false;
            }
          });
        }
        return tmp;
      };
      $2.fn.jstree = function(arg) {
        var is_method = typeof arg === "string", args = Array.prototype.slice.call(arguments, 1), result = null;
        if (arg === true && !this.length) {
          return false;
        }
        this.each(function() {
          var instance = $2.jstree.reference(this), method = is_method && instance ? instance[arg] : null;
          result = is_method && method ? method.apply(instance, args) : null;
          if (!instance && !is_method && (arg === undefined2 || $2.isPlainObject(arg))) {
            $2.jstree.create(this, arg);
          }
          if (instance && !is_method || arg === true) {
            result = instance || false;
          }
          if (result !== null && result !== undefined2) {
            return false;
          }
        });
        return result !== null && result !== undefined2 ? result : this;
      };
      $2.expr.pseudos.jstree = $2.expr.createPseudo(function(search) {
        return function(a) {
          return $2(a).hasClass("jstree") && $2(a).data("jstree") !== undefined2;
        };
      });
      $2.jstree.defaults.core = {
        data: false,
        strings: false,
        check_callback: false,
        error: $2.noop,
        animation: 200,
        multiple: true,
        themes: {
          name: false,
          url: false,
          dir: false,
          dots: true,
          icons: true,
          ellipsis: false,
          stripes: false,
          variant: false,
          responsive: false
        },
        expand_selected_onload: true,
        worker: true,
        force_text: false,
        dblclick_toggle: true,
        loaded_state: false,
        restore_focus: true,
        compute_elements_positions: false,
        keyboard: {
          "ctrl-space": function(e) {
            e.type = "click";
            $2(e.currentTarget).trigger(e);
          },
          enter: function(e) {
            e.type = "click";
            $2(e.currentTarget).trigger(e);
          },
          left: function(e) {
            e.preventDefault();
            if (this.is_open(e.currentTarget)) {
              this.close_node(e.currentTarget);
            } else {
              var o = this.get_parent(e.currentTarget);
              if (o && o.id !== $2.jstree.root) {
                this.get_node(o, true).children(".jstree-anchor").focus();
              }
            }
          },
          up: function(e) {
            e.preventDefault();
            var o = this.get_prev_dom(e.currentTarget);
            if (o && o.length) {
              o.children(".jstree-anchor").focus();
            }
          },
          right: function(e) {
            e.preventDefault();
            if (this.is_closed(e.currentTarget)) {
              this.open_node(e.currentTarget, function(o2) {
                this.get_node(o2, true).children(".jstree-anchor").focus();
              });
            } else if (this.is_open(e.currentTarget)) {
              var o = this.get_node(e.currentTarget, true).children(".jstree-children")[0];
              if (o) {
                $2(this._firstChild(o)).children(".jstree-anchor").focus();
              }
            }
          },
          down: function(e) {
            e.preventDefault();
            var o = this.get_next_dom(e.currentTarget);
            if (o && o.length) {
              o.children(".jstree-anchor").focus();
            }
          },
          "*": function(e) {
            this.open_all();
          },
          home: function(e) {
            e.preventDefault();
            var o = this._firstChild(this.get_container_ul()[0]);
            if (o) {
              $2(o).children(".jstree-anchor").filter(":visible").focus();
            }
          },
          end: function(e) {
            e.preventDefault();
            this.element.find(".jstree-anchor").filter(":visible").last().focus();
          },
          f2: function(e) {
            e.preventDefault();
            this.edit(e.currentTarget);
          }
        }
      };
      $2.jstree.core.prototype = {
        plugin: function(deco, opts) {
          var Child = $2.jstree.plugins[deco];
          if (Child) {
            this._data[deco] = {};
            Child.prototype = this;
            return new Child(opts, this);
          }
          return this;
        },
        init: function(el, options) {
          this._model = {
            data: {},
            changed: [],
            force_full_redraw: false,
            redraw_timeout: false,
            default_state: {
              loaded: true,
              opened: false,
              selected: false,
              disabled: false
            }
          };
          this._model.data[$2.jstree.root] = {
            id: $2.jstree.root,
            parent: null,
            parents: [],
            children: [],
            children_d: [],
            state: {loaded: false}
          };
          this.element = $2(el).addClass("jstree jstree-" + this._id);
          this.settings = options;
          this._data.core.ready = false;
          this._data.core.loaded = false;
          this._data.core.rtl = this.element.css("direction") === "rtl";
          this.element[this._data.core.rtl ? "addClass" : "removeClass"]("jstree-rtl");
          this.element.attr("role", "tree");
          if (this.settings.core.multiple) {
            this.element.attr("aria-multiselectable", true);
          }
          if (!this.element.attr("tabindex")) {
            this.element.attr("tabindex", "0");
          }
          this.bind();
          this.trigger("init");
          this._data.core.original_container_html = this.element.find(" > ul > li").clone(true);
          this._data.core.original_container_html.find("li").addBack().contents().filter(function() {
            return this.nodeType === 3 && (!this.nodeValue || /^\s+$/.test(this.nodeValue));
          }).remove();
          this.element.html("<ul class='jstree-container-ul jstree-children' role='group'><li id='j" + this._id + "_loading' class='jstree-initial-node jstree-loading jstree-leaf jstree-last' role='none'><i class='jstree-icon jstree-ocl'></i><a class='jstree-anchor' role='treeitem' href='#'><i class='jstree-icon jstree-themeicon-hidden'></i>" + this.get_string("Loading ...") + "</a></li></ul>");
          this.element.attr("aria-activedescendant", "j" + this._id + "_loading");
          this._data.core.li_height = this.get_container_ul().children("li").first().outerHeight() || 24;
          this._data.core.node = this._create_prototype_node();
          this.trigger("loading");
          this.load_node($2.jstree.root);
        },
        destroy: function(keep_html) {
          this.trigger("destroy");
          if (this._wrk) {
            try {
              window.URL.revokeObjectURL(this._wrk);
              this._wrk = null;
            } catch (ignore) {
            }
          }
          if (!keep_html) {
            this.element.empty();
          }
          this.teardown();
        },
        _create_prototype_node: function() {
          var _node = document2.createElement("LI"), _temp1, _temp2;
          _node.setAttribute("role", "none");
          _temp1 = document2.createElement("I");
          _temp1.className = "jstree-icon jstree-ocl";
          _temp1.setAttribute("role", "presentation");
          _node.appendChild(_temp1);
          _temp1 = document2.createElement("A");
          _temp1.className = "jstree-anchor";
          _temp1.setAttribute("href", "#");
          _temp1.setAttribute("tabindex", "-1");
          _temp1.setAttribute("role", "treeitem");
          _temp2 = document2.createElement("I");
          _temp2.className = "jstree-icon jstree-themeicon";
          _temp2.setAttribute("role", "presentation");
          _temp1.appendChild(_temp2);
          _node.appendChild(_temp1);
          _temp1 = _temp2 = null;
          return _node;
        },
        _kbevent_to_func: function(e) {
          var keys = {
            8: "Backspace",
            9: "Tab",
            13: "Enter",
            19: "Pause",
            27: "Esc",
            32: "Space",
            33: "PageUp",
            34: "PageDown",
            35: "End",
            36: "Home",
            37: "Left",
            38: "Up",
            39: "Right",
            40: "Down",
            44: "Print",
            45: "Insert",
            46: "Delete",
            96: "Numpad0",
            97: "Numpad1",
            98: "Numpad2",
            99: "Numpad3",
            100: "Numpad4",
            101: "Numpad5",
            102: "Numpad6",
            103: "Numpad7",
            104: "Numpad8",
            105: "Numpad9",
            "-13": "NumpadEnter",
            112: "F1",
            113: "F2",
            114: "F3",
            115: "F4",
            116: "F5",
            117: "F6",
            118: "F7",
            119: "F8",
            120: "F9",
            121: "F10",
            122: "F11",
            123: "F12",
            144: "Numlock",
            145: "Scrolllock",
            16: "Shift",
            17: "Ctrl",
            18: "Alt",
            48: "0",
            49: "1",
            50: "2",
            51: "3",
            52: "4",
            53: "5",
            54: "6",
            55: "7",
            56: "8",
            57: "9",
            59: ";",
            61: "=",
            65: "a",
            66: "b",
            67: "c",
            68: "d",
            69: "e",
            70: "f",
            71: "g",
            72: "h",
            73: "i",
            74: "j",
            75: "k",
            76: "l",
            77: "m",
            78: "n",
            79: "o",
            80: "p",
            81: "q",
            82: "r",
            83: "s",
            84: "t",
            85: "u",
            86: "v",
            87: "w",
            88: "x",
            89: "y",
            90: "z",
            107: "+",
            109: "-",
            110: ".",
            186: ";",
            187: "=",
            188: ",",
            189: "-",
            190: ".",
            191: "/",
            192: "`",
            219: "[",
            220: "\\",
            221: "]",
            222: "'",
            111: "/",
            106: "*",
            173: "-"
          };
          var parts = [];
          if (e.ctrlKey) {
            parts.push("ctrl");
          }
          if (e.altKey) {
            parts.push("alt");
          }
          if (e.shiftKey) {
            parts.push("shift");
          }
          parts.push(keys[e.which] || e.which);
          parts = parts.sort().join("-").toLowerCase();
          if (parts === "shift-shift" || parts === "ctrl-ctrl" || parts === "alt-alt") {
            return null;
          }
          var kb = this.settings.core.keyboard, i, tmp;
          for (i in kb) {
            if (kb.hasOwnProperty(i)) {
              tmp = i;
              if (tmp !== "-" && tmp !== "+") {
                tmp = tmp.replace("--", "-MINUS").replace("+-", "-MINUS").replace("++", "-PLUS").replace("-+", "-PLUS");
                tmp = tmp.split(/-|\+/).sort().join("-").replace("MINUS", "-").replace("PLUS", "+").toLowerCase();
              }
              if (tmp === parts) {
                return kb[i];
              }
            }
          }
          return null;
        },
        teardown: function() {
          this.unbind();
          this.element.removeClass("jstree").removeData("jstree").find("[class^='jstree']").addBack().attr("class", function() {
            return this.className.replace(/jstree[^ ]*|$/ig, "");
          });
          this.element = null;
        },
        bind: function() {
          var word = "", tout = null, was_click = 0;
          this.element.on("dblclick.jstree", function(e) {
            if (e.target.tagName && e.target.tagName.toLowerCase() === "input") {
              return true;
            }
            if (document2.selection && document2.selection.empty) {
              document2.selection.empty();
            } else {
              if (window.getSelection) {
                var sel = window.getSelection();
                try {
                  sel.removeAllRanges();
                  sel.collapse();
                } catch (ignore) {
                }
              }
            }
          }).on("mousedown.jstree", $2.proxy(function(e) {
            if (e.target === this.element[0]) {
              e.preventDefault();
              was_click = +new Date();
            }
          }, this)).on("mousedown.jstree", ".jstree-ocl", function(e) {
            e.preventDefault();
          }).on("click.jstree", ".jstree-ocl", $2.proxy(function(e) {
            this.toggle_node(e.target);
          }, this)).on("dblclick.jstree", ".jstree-anchor", $2.proxy(function(e) {
            if (e.target.tagName && e.target.tagName.toLowerCase() === "input") {
              return true;
            }
            if (this.settings.core.dblclick_toggle) {
              this.toggle_node(e.target);
            }
          }, this)).on("click.jstree", ".jstree-anchor", $2.proxy(function(e) {
            e.preventDefault();
            if (e.currentTarget !== document2.activeElement) {
              $2(e.currentTarget).focus();
            }
            this.activate_node(e.currentTarget, e);
          }, this)).on("keydown.jstree", ".jstree-anchor", $2.proxy(function(e) {
            if (e.target.tagName && e.target.tagName.toLowerCase() === "input") {
              return true;
            }
            if (this._data.core.rtl) {
              if (e.which === 37) {
                e.which = 39;
              } else if (e.which === 39) {
                e.which = 37;
              }
            }
            var f = this._kbevent_to_func(e);
            if (f) {
              var r = f.call(this, e);
              if (r === false || r === true) {
                return r;
              }
            }
          }, this)).on("load_node.jstree", $2.proxy(function(e, data) {
            if (data.status) {
              if (data.node.id === $2.jstree.root && !this._data.core.loaded) {
                this._data.core.loaded = true;
                if (this._firstChild(this.get_container_ul()[0])) {
                  this.element.attr("aria-activedescendant", this._firstChild(this.get_container_ul()[0]).id);
                }
                this.trigger("loaded");
              }
              if (!this._data.core.ready) {
                setTimeout($2.proxy(function() {
                  if (this.element && !this.get_container_ul().find(".jstree-loading").length) {
                    this._data.core.ready = true;
                    if (this._data.core.selected.length) {
                      if (this.settings.core.expand_selected_onload) {
                        var tmp = [], i, j;
                        for (i = 0, j = this._data.core.selected.length; i < j; i++) {
                          tmp = tmp.concat(this._model.data[this._data.core.selected[i]].parents);
                        }
                        tmp = $2.vakata.array_unique(tmp);
                        for (i = 0, j = tmp.length; i < j; i++) {
                          this.open_node(tmp[i], false, 0);
                        }
                      }
                      this.trigger("changed", {action: "ready", selected: this._data.core.selected});
                    }
                    this.trigger("ready");
                  }
                }, this), 0);
              }
            }
          }, this)).on("keypress.jstree", $2.proxy(function(e) {
            if (e.target.tagName && e.target.tagName.toLowerCase() === "input") {
              return true;
            }
            if (tout) {
              clearTimeout(tout);
            }
            tout = setTimeout(function() {
              word = "";
            }, 500);
            var chr = String.fromCharCode(e.which).toLowerCase(), col = this.element.find(".jstree-anchor").filter(":visible"), ind = col.index(document2.activeElement) || 0, end = false;
            word += chr;
            if (word.length > 1) {
              col.slice(ind).each($2.proxy(function(i, v) {
                if ($2(v).text().toLowerCase().indexOf(word) === 0) {
                  $2(v).focus();
                  end = true;
                  return false;
                }
              }, this));
              if (end) {
                return;
              }
              col.slice(0, ind).each($2.proxy(function(i, v) {
                if ($2(v).text().toLowerCase().indexOf(word) === 0) {
                  $2(v).focus();
                  end = true;
                  return false;
                }
              }, this));
              if (end) {
                return;
              }
            }
            if (new RegExp("^" + chr.replace(/[-\/\\^$*+?.()|[\]{}]/g, "\\$&") + "+$").test(word)) {
              col.slice(ind + 1).each($2.proxy(function(i, v) {
                if ($2(v).text().toLowerCase().charAt(0) === chr) {
                  $2(v).focus();
                  end = true;
                  return false;
                }
              }, this));
              if (end) {
                return;
              }
              col.slice(0, ind + 1).each($2.proxy(function(i, v) {
                if ($2(v).text().toLowerCase().charAt(0) === chr) {
                  $2(v).focus();
                  end = true;
                  return false;
                }
              }, this));
              if (end) {
                return;
              }
            }
          }, this)).on("init.jstree", $2.proxy(function() {
            var s = this.settings.core.themes;
            this._data.core.themes.dots = s.dots;
            this._data.core.themes.stripes = s.stripes;
            this._data.core.themes.icons = s.icons;
            this._data.core.themes.ellipsis = s.ellipsis;
            this.set_theme(s.name || "default", s.url);
            this.set_theme_variant(s.variant);
          }, this)).on("loading.jstree", $2.proxy(function() {
            this[this._data.core.themes.dots ? "show_dots" : "hide_dots"]();
            this[this._data.core.themes.icons ? "show_icons" : "hide_icons"]();
            this[this._data.core.themes.stripes ? "show_stripes" : "hide_stripes"]();
            this[this._data.core.themes.ellipsis ? "show_ellipsis" : "hide_ellipsis"]();
          }, this)).on("blur.jstree", ".jstree-anchor", $2.proxy(function(e) {
            this._data.core.focused = null;
            $2(e.currentTarget).filter(".jstree-hovered").trigger("mouseleave");
            this.element.attr("tabindex", "0");
          }, this)).on("focus.jstree", ".jstree-anchor", $2.proxy(function(e) {
            var tmp = this.get_node(e.currentTarget);
            if (tmp && tmp.id) {
              this._data.core.focused = tmp.id;
            }
            this.element.find(".jstree-hovered").not(e.currentTarget).trigger("mouseleave");
            $2(e.currentTarget).trigger("mouseenter");
            this.element.attr("tabindex", "-1");
          }, this)).on("focus.jstree", $2.proxy(function() {
            if (+new Date() - was_click > 500 && !this._data.core.focused && this.settings.core.restore_focus) {
              was_click = 0;
              var act = this.get_node(this.element.attr("aria-activedescendant"), true);
              if (act) {
                act.find("> .jstree-anchor").focus();
              }
            }
          }, this)).on("mouseenter.jstree", ".jstree-anchor", $2.proxy(function(e) {
            this.hover_node(e.currentTarget);
          }, this)).on("mouseleave.jstree", ".jstree-anchor", $2.proxy(function(e) {
            this.dehover_node(e.currentTarget);
          }, this));
        },
        unbind: function() {
          this.element.off(".jstree");
          $2(document2).off(".jstree-" + this._id);
        },
        trigger: function(ev, data) {
          if (!data) {
            data = {};
          }
          data.instance = this;
          this.element.triggerHandler(ev.replace(".jstree", "") + ".jstree", data);
        },
        get_container: function() {
          return this.element;
        },
        get_container_ul: function() {
          return this.element.children(".jstree-children").first();
        },
        get_string: function(key) {
          var a = this.settings.core.strings;
          if ($2.isFunction(a)) {
            return a.call(this, key);
          }
          if (a && a[key]) {
            return a[key];
          }
          return key;
        },
        _firstChild: function(dom) {
          dom = dom ? dom.firstChild : null;
          while (dom !== null && dom.nodeType !== 1) {
            dom = dom.nextSibling;
          }
          return dom;
        },
        _nextSibling: function(dom) {
          dom = dom ? dom.nextSibling : null;
          while (dom !== null && dom.nodeType !== 1) {
            dom = dom.nextSibling;
          }
          return dom;
        },
        _previousSibling: function(dom) {
          dom = dom ? dom.previousSibling : null;
          while (dom !== null && dom.nodeType !== 1) {
            dom = dom.previousSibling;
          }
          return dom;
        },
        get_node: function(obj, as_dom) {
          if (obj && obj.id) {
            obj = obj.id;
          }
          if (obj instanceof $2 && obj.length && obj[0].id) {
            obj = obj[0].id;
          }
          var dom;
          try {
            if (this._model.data[obj]) {
              obj = this._model.data[obj];
            } else if (typeof obj === "string" && this._model.data[obj.replace(/^#/, "")]) {
              obj = this._model.data[obj.replace(/^#/, "")];
            } else if (typeof obj === "string" && (dom = $2("#" + obj.replace($2.jstree.idregex, "\\$&"), this.element)).length && this._model.data[dom.closest(".jstree-node").attr("id")]) {
              obj = this._model.data[dom.closest(".jstree-node").attr("id")];
            } else if ((dom = this.element.find(obj)).length && this._model.data[dom.closest(".jstree-node").attr("id")]) {
              obj = this._model.data[dom.closest(".jstree-node").attr("id")];
            } else if ((dom = this.element.find(obj)).length && dom.hasClass("jstree")) {
              obj = this._model.data[$2.jstree.root];
            } else {
              return false;
            }
            if (as_dom) {
              obj = obj.id === $2.jstree.root ? this.element : $2("#" + obj.id.replace($2.jstree.idregex, "\\$&"), this.element);
            }
            return obj;
          } catch (ex) {
            return false;
          }
        },
        get_path: function(obj, glue, ids) {
          obj = obj.parents ? obj : this.get_node(obj);
          if (!obj || obj.id === $2.jstree.root || !obj.parents) {
            return false;
          }
          var i, j, p = [];
          p.push(ids ? obj.id : obj.text);
          for (i = 0, j = obj.parents.length; i < j; i++) {
            p.push(ids ? obj.parents[i] : this.get_text(obj.parents[i]));
          }
          p = p.reverse().slice(1);
          return glue ? p.join(glue) : p;
        },
        get_next_dom: function(obj, strict) {
          var tmp;
          obj = this.get_node(obj, true);
          if (obj[0] === this.element[0]) {
            tmp = this._firstChild(this.get_container_ul()[0]);
            while (tmp && tmp.offsetHeight === 0) {
              tmp = this._nextSibling(tmp);
            }
            return tmp ? $2(tmp) : false;
          }
          if (!obj || !obj.length) {
            return false;
          }
          if (strict) {
            tmp = obj[0];
            do {
              tmp = this._nextSibling(tmp);
            } while (tmp && tmp.offsetHeight === 0);
            return tmp ? $2(tmp) : false;
          }
          if (obj.hasClass("jstree-open")) {
            tmp = this._firstChild(obj.children(".jstree-children")[0]);
            while (tmp && tmp.offsetHeight === 0) {
              tmp = this._nextSibling(tmp);
            }
            if (tmp !== null) {
              return $2(tmp);
            }
          }
          tmp = obj[0];
          do {
            tmp = this._nextSibling(tmp);
          } while (tmp && tmp.offsetHeight === 0);
          if (tmp !== null) {
            return $2(tmp);
          }
          return obj.parentsUntil(".jstree", ".jstree-node").nextAll(".jstree-node:visible").first();
        },
        get_prev_dom: function(obj, strict) {
          var tmp;
          obj = this.get_node(obj, true);
          if (obj[0] === this.element[0]) {
            tmp = this.get_container_ul()[0].lastChild;
            while (tmp && tmp.offsetHeight === 0) {
              tmp = this._previousSibling(tmp);
            }
            return tmp ? $2(tmp) : false;
          }
          if (!obj || !obj.length) {
            return false;
          }
          if (strict) {
            tmp = obj[0];
            do {
              tmp = this._previousSibling(tmp);
            } while (tmp && tmp.offsetHeight === 0);
            return tmp ? $2(tmp) : false;
          }
          tmp = obj[0];
          do {
            tmp = this._previousSibling(tmp);
          } while (tmp && tmp.offsetHeight === 0);
          if (tmp !== null) {
            obj = $2(tmp);
            while (obj.hasClass("jstree-open")) {
              obj = obj.children(".jstree-children").first().children(".jstree-node:visible:last");
            }
            return obj;
          }
          tmp = obj[0].parentNode.parentNode;
          return tmp && tmp.className && tmp.className.indexOf("jstree-node") !== -1 ? $2(tmp) : false;
        },
        get_parent: function(obj) {
          obj = this.get_node(obj);
          if (!obj || obj.id === $2.jstree.root) {
            return false;
          }
          return obj.parent;
        },
        get_children_dom: function(obj) {
          obj = this.get_node(obj, true);
          if (obj[0] === this.element[0]) {
            return this.get_container_ul().children(".jstree-node");
          }
          if (!obj || !obj.length) {
            return false;
          }
          return obj.children(".jstree-children").children(".jstree-node");
        },
        is_parent: function(obj) {
          obj = this.get_node(obj);
          return obj && (obj.state.loaded === false || obj.children.length > 0);
        },
        is_loaded: function(obj) {
          obj = this.get_node(obj);
          return obj && obj.state.loaded;
        },
        is_loading: function(obj) {
          obj = this.get_node(obj);
          return obj && obj.state && obj.state.loading;
        },
        is_open: function(obj) {
          obj = this.get_node(obj);
          return obj && obj.state.opened;
        },
        is_closed: function(obj) {
          obj = this.get_node(obj);
          return obj && this.is_parent(obj) && !obj.state.opened;
        },
        is_leaf: function(obj) {
          return !this.is_parent(obj);
        },
        load_node: function(obj, callback) {
          var k, l, i, j, c;
          if ($2.isArray(obj)) {
            this._load_nodes(obj.slice(), callback);
            return true;
          }
          obj = this.get_node(obj);
          if (!obj) {
            if (callback) {
              callback.call(this, obj, false);
            }
            return false;
          }
          if (obj.state.loaded) {
            obj.state.loaded = false;
            for (i = 0, j = obj.parents.length; i < j; i++) {
              this._model.data[obj.parents[i]].children_d = $2.vakata.array_filter(this._model.data[obj.parents[i]].children_d, function(v) {
                return $2.inArray(v, obj.children_d) === -1;
              });
            }
            for (k = 0, l = obj.children_d.length; k < l; k++) {
              if (this._model.data[obj.children_d[k]].state.selected) {
                c = true;
              }
              delete this._model.data[obj.children_d[k]];
            }
            if (c) {
              this._data.core.selected = $2.vakata.array_filter(this._data.core.selected, function(v) {
                return $2.inArray(v, obj.children_d) === -1;
              });
            }
            obj.children = [];
            obj.children_d = [];
            if (c) {
              this.trigger("changed", {action: "load_node", node: obj, selected: this._data.core.selected});
            }
          }
          obj.state.failed = false;
          obj.state.loading = true;
          this.get_node(obj, true).addClass("jstree-loading").attr("aria-busy", true);
          this._load_node(obj, $2.proxy(function(status) {
            obj = this._model.data[obj.id];
            obj.state.loading = false;
            obj.state.loaded = status;
            obj.state.failed = !obj.state.loaded;
            var dom = this.get_node(obj, true), i2 = 0, j2 = 0, m = this._model.data, has_children = false;
            for (i2 = 0, j2 = obj.children.length; i2 < j2; i2++) {
              if (m[obj.children[i2]] && !m[obj.children[i2]].state.hidden) {
                has_children = true;
                break;
              }
            }
            if (obj.state.loaded && dom && dom.length) {
              dom.removeClass("jstree-closed jstree-open jstree-leaf");
              if (!has_children) {
                dom.addClass("jstree-leaf");
              } else {
                if (obj.id !== "#") {
                  dom.addClass(obj.state.opened ? "jstree-open" : "jstree-closed");
                }
              }
            }
            dom.removeClass("jstree-loading").attr("aria-busy", false);
            this.trigger("load_node", {node: obj, status});
            if (callback) {
              callback.call(this, obj, status);
            }
          }, this));
          return true;
        },
        _load_nodes: function(nodes, callback, is_callback, force_reload) {
          var r = true, c = function() {
            this._load_nodes(nodes, callback, true);
          }, m = this._model.data, i, j, tmp = [];
          for (i = 0, j = nodes.length; i < j; i++) {
            if (m[nodes[i]] && (!m[nodes[i]].state.loaded && !m[nodes[i]].state.failed || !is_callback && force_reload)) {
              if (!this.is_loading(nodes[i])) {
                this.load_node(nodes[i], c);
              }
              r = false;
            }
          }
          if (r) {
            for (i = 0, j = nodes.length; i < j; i++) {
              if (m[nodes[i]] && m[nodes[i]].state.loaded) {
                tmp.push(nodes[i]);
              }
            }
            if (callback && !callback.done) {
              callback.call(this, tmp);
              callback.done = true;
            }
          }
        },
        load_all: function(obj, callback) {
          if (!obj) {
            obj = $2.jstree.root;
          }
          obj = this.get_node(obj);
          if (!obj) {
            return false;
          }
          var to_load = [], m = this._model.data, c = m[obj.id].children_d, i, j;
          if (obj.state && !obj.state.loaded) {
            to_load.push(obj.id);
          }
          for (i = 0, j = c.length; i < j; i++) {
            if (m[c[i]] && m[c[i]].state && !m[c[i]].state.loaded) {
              to_load.push(c[i]);
            }
          }
          if (to_load.length) {
            this._load_nodes(to_load, function() {
              this.load_all(obj, callback);
            });
          } else {
            if (callback) {
              callback.call(this, obj);
            }
            this.trigger("load_all", {node: obj});
          }
        },
        _load_node: function(obj, callback) {
          var s = this.settings.core.data, t;
          var notTextOrCommentNode = function notTextOrCommentNode2() {
            return this.nodeType !== 3 && this.nodeType !== 8;
          };
          if (!s) {
            if (obj.id === $2.jstree.root) {
              return this._append_html_data(obj, this._data.core.original_container_html.clone(true), function(status) {
                callback.call(this, status);
              });
            } else {
              return callback.call(this, false);
            }
          }
          if ($2.isFunction(s)) {
            return s.call(this, obj, $2.proxy(function(d) {
              if (d === false) {
                callback.call(this, false);
              } else {
                this[typeof d === "string" ? "_append_html_data" : "_append_json_data"](obj, typeof d === "string" ? $2($2.parseHTML(d)).filter(notTextOrCommentNode) : d, function(status) {
                  callback.call(this, status);
                });
              }
            }, this));
          }
          if (typeof s === "object") {
            if (s.url) {
              s = $2.extend(true, {}, s);
              if ($2.isFunction(s.url)) {
                s.url = s.url.call(this, obj);
              }
              if ($2.isFunction(s.data)) {
                s.data = s.data.call(this, obj);
              }
              return $2.ajax(s).done($2.proxy(function(d, t2, x) {
                var type = x.getResponseHeader("Content-Type");
                if (type && type.indexOf("json") !== -1 || typeof d === "object") {
                  return this._append_json_data(obj, d, function(status) {
                    callback.call(this, status);
                  });
                }
                if (type && type.indexOf("html") !== -1 || typeof d === "string") {
                  return this._append_html_data(obj, $2($2.parseHTML(d)).filter(notTextOrCommentNode), function(status) {
                    callback.call(this, status);
                  });
                }
                this._data.core.last_error = {error: "ajax", plugin: "core", id: "core_04", reason: "Could not load node", data: JSON.stringify({id: obj.id, xhr: x})};
                this.settings.core.error.call(this, this._data.core.last_error);
                return callback.call(this, false);
              }, this)).fail($2.proxy(function(f) {
                this._data.core.last_error = {error: "ajax", plugin: "core", id: "core_04", reason: "Could not load node", data: JSON.stringify({id: obj.id, xhr: f})};
                callback.call(this, false);
                this.settings.core.error.call(this, this._data.core.last_error);
              }, this));
            }
            if ($2.isArray(s)) {
              t = $2.extend(true, [], s);
            } else if ($2.isPlainObject(s)) {
              t = $2.extend(true, {}, s);
            } else {
              t = s;
            }
            if (obj.id === $2.jstree.root) {
              return this._append_json_data(obj, t, function(status) {
                callback.call(this, status);
              });
            } else {
              this._data.core.last_error = {error: "nodata", plugin: "core", id: "core_05", reason: "Could not load node", data: JSON.stringify({id: obj.id})};
              this.settings.core.error.call(this, this._data.core.last_error);
              return callback.call(this, false);
            }
          }
          if (typeof s === "string") {
            if (obj.id === $2.jstree.root) {
              return this._append_html_data(obj, $2($2.parseHTML(s)).filter(notTextOrCommentNode), function(status) {
                callback.call(this, status);
              });
            } else {
              this._data.core.last_error = {error: "nodata", plugin: "core", id: "core_06", reason: "Could not load node", data: JSON.stringify({id: obj.id})};
              this.settings.core.error.call(this, this._data.core.last_error);
              return callback.call(this, false);
            }
          }
          return callback.call(this, false);
        },
        _node_changed: function(obj) {
          obj = this.get_node(obj);
          if (obj && $2.inArray(obj.id, this._model.changed) === -1) {
            this._model.changed.push(obj.id);
          }
        },
        _append_html_data: function(dom, data, cb) {
          dom = this.get_node(dom);
          dom.children = [];
          dom.children_d = [];
          var dat = data.is("ul") ? data.children() : data, par = dom.id, chd = [], dpc = [], m = this._model.data, p = m[par], s = this._data.core.selected.length, tmp, i, j;
          dat.each($2.proxy(function(i2, v) {
            tmp = this._parse_model_from_html($2(v), par, p.parents.concat());
            if (tmp) {
              chd.push(tmp);
              dpc.push(tmp);
              if (m[tmp].children_d.length) {
                dpc = dpc.concat(m[tmp].children_d);
              }
            }
          }, this));
          p.children = chd;
          p.children_d = dpc;
          for (i = 0, j = p.parents.length; i < j; i++) {
            m[p.parents[i]].children_d = m[p.parents[i]].children_d.concat(dpc);
          }
          this.trigger("model", {nodes: dpc, parent: par});
          if (par !== $2.jstree.root) {
            this._node_changed(par);
            this.redraw();
          } else {
            this.get_container_ul().children(".jstree-initial-node").remove();
            this.redraw(true);
          }
          if (this._data.core.selected.length !== s) {
            this.trigger("changed", {action: "model", selected: this._data.core.selected});
          }
          cb.call(this, true);
        },
        _append_json_data: function(dom, data, cb, force_processing) {
          if (this.element === null) {
            return;
          }
          dom = this.get_node(dom);
          dom.children = [];
          dom.children_d = [];
          if (data.d) {
            data = data.d;
            if (typeof data === "string") {
              data = JSON.parse(data);
            }
          }
          if (!$2.isArray(data)) {
            data = [data];
          }
          var w = null, args = {
            df: this._model.default_state,
            dat: data,
            par: dom.id,
            m: this._model.data,
            t_id: this._id,
            t_cnt: this._cnt,
            sel: this._data.core.selected
          }, inst = this, func = function(data2, undefined3) {
            if (data2.data) {
              data2 = data2.data;
            }
            var dat = data2.dat, par = data2.par, chd = [], dpc = [], add = [], df = data2.df, t_id = data2.t_id, t_cnt = data2.t_cnt, m = data2.m, p = m[par], sel = data2.sel, tmp, i, j, rslt2, parse_flat = function(d, p2, ps) {
              if (!ps) {
                ps = [];
              } else {
                ps = ps.concat();
              }
              if (p2) {
                ps.unshift(p2);
              }
              var tid = d.id.toString(), i2, j2, c, e, tmp2 = {
                id: tid,
                text: d.text || "",
                icon: d.icon !== undefined3 ? d.icon : true,
                parent: p2,
                parents: ps,
                children: d.children || [],
                children_d: d.children_d || [],
                data: d.data,
                state: {},
                li_attr: {id: false},
                a_attr: {href: "#"},
                original: false
              };
              for (i2 in df) {
                if (df.hasOwnProperty(i2)) {
                  tmp2.state[i2] = df[i2];
                }
              }
              if (d && d.data && d.data.jstree && d.data.jstree.icon) {
                tmp2.icon = d.data.jstree.icon;
              }
              if (tmp2.icon === undefined3 || tmp2.icon === null || tmp2.icon === "") {
                tmp2.icon = true;
              }
              if (d && d.data) {
                tmp2.data = d.data;
                if (d.data.jstree) {
                  for (i2 in d.data.jstree) {
                    if (d.data.jstree.hasOwnProperty(i2)) {
                      tmp2.state[i2] = d.data.jstree[i2];
                    }
                  }
                }
              }
              if (d && typeof d.state === "object") {
                for (i2 in d.state) {
                  if (d.state.hasOwnProperty(i2)) {
                    tmp2.state[i2] = d.state[i2];
                  }
                }
              }
              if (d && typeof d.li_attr === "object") {
                for (i2 in d.li_attr) {
                  if (d.li_attr.hasOwnProperty(i2)) {
                    tmp2.li_attr[i2] = d.li_attr[i2];
                  }
                }
              }
              if (!tmp2.li_attr.id) {
                tmp2.li_attr.id = tid;
              }
              if (d && typeof d.a_attr === "object") {
                for (i2 in d.a_attr) {
                  if (d.a_attr.hasOwnProperty(i2)) {
                    tmp2.a_attr[i2] = d.a_attr[i2];
                  }
                }
              }
              if (d && d.children && d.children === true) {
                tmp2.state.loaded = false;
                tmp2.children = [];
                tmp2.children_d = [];
              }
              m[tmp2.id] = tmp2;
              for (i2 = 0, j2 = tmp2.children.length; i2 < j2; i2++) {
                c = parse_flat(m[tmp2.children[i2]], tmp2.id, ps);
                e = m[c];
                tmp2.children_d.push(c);
                if (e.children_d.length) {
                  tmp2.children_d = tmp2.children_d.concat(e.children_d);
                }
              }
              delete d.data;
              delete d.children;
              m[tmp2.id].original = d;
              if (tmp2.state.selected) {
                add.push(tmp2.id);
              }
              return tmp2.id;
            }, parse_nest = function(d, p2, ps) {
              if (!ps) {
                ps = [];
              } else {
                ps = ps.concat();
              }
              if (p2) {
                ps.unshift(p2);
              }
              var tid = false, i2, j2, c, e, tmp2;
              do {
                tid = "j" + t_id + "_" + ++t_cnt;
              } while (m[tid]);
              tmp2 = {
                id: false,
                text: typeof d === "string" ? d : "",
                icon: typeof d === "object" && d.icon !== undefined3 ? d.icon : true,
                parent: p2,
                parents: ps,
                children: [],
                children_d: [],
                data: null,
                state: {},
                li_attr: {id: false},
                a_attr: {href: "#"},
                original: false
              };
              for (i2 in df) {
                if (df.hasOwnProperty(i2)) {
                  tmp2.state[i2] = df[i2];
                }
              }
              if (d && d.id) {
                tmp2.id = d.id.toString();
              }
              if (d && d.text) {
                tmp2.text = d.text;
              }
              if (d && d.data && d.data.jstree && d.data.jstree.icon) {
                tmp2.icon = d.data.jstree.icon;
              }
              if (tmp2.icon === undefined3 || tmp2.icon === null || tmp2.icon === "") {
                tmp2.icon = true;
              }
              if (d && d.data) {
                tmp2.data = d.data;
                if (d.data.jstree) {
                  for (i2 in d.data.jstree) {
                    if (d.data.jstree.hasOwnProperty(i2)) {
                      tmp2.state[i2] = d.data.jstree[i2];
                    }
                  }
                }
              }
              if (d && typeof d.state === "object") {
                for (i2 in d.state) {
                  if (d.state.hasOwnProperty(i2)) {
                    tmp2.state[i2] = d.state[i2];
                  }
                }
              }
              if (d && typeof d.li_attr === "object") {
                for (i2 in d.li_attr) {
                  if (d.li_attr.hasOwnProperty(i2)) {
                    tmp2.li_attr[i2] = d.li_attr[i2];
                  }
                }
              }
              if (tmp2.li_attr.id && !tmp2.id) {
                tmp2.id = tmp2.li_attr.id.toString();
              }
              if (!tmp2.id) {
                tmp2.id = tid;
              }
              if (!tmp2.li_attr.id) {
                tmp2.li_attr.id = tmp2.id;
              }
              if (d && typeof d.a_attr === "object") {
                for (i2 in d.a_attr) {
                  if (d.a_attr.hasOwnProperty(i2)) {
                    tmp2.a_attr[i2] = d.a_attr[i2];
                  }
                }
              }
              if (d && d.children && d.children.length) {
                for (i2 = 0, j2 = d.children.length; i2 < j2; i2++) {
                  c = parse_nest(d.children[i2], tmp2.id, ps);
                  e = m[c];
                  tmp2.children.push(c);
                  if (e.children_d.length) {
                    tmp2.children_d = tmp2.children_d.concat(e.children_d);
                  }
                }
                tmp2.children_d = tmp2.children_d.concat(tmp2.children);
              }
              if (d && d.children && d.children === true) {
                tmp2.state.loaded = false;
                tmp2.children = [];
                tmp2.children_d = [];
              }
              delete d.data;
              delete d.children;
              tmp2.original = d;
              m[tmp2.id] = tmp2;
              if (tmp2.state.selected) {
                add.push(tmp2.id);
              }
              return tmp2.id;
            };
            if (dat.length && dat[0].id !== undefined3 && dat[0].parent !== undefined3) {
              for (i = 0, j = dat.length; i < j; i++) {
                if (!dat[i].children) {
                  dat[i].children = [];
                }
                if (!dat[i].state) {
                  dat[i].state = {};
                }
                m[dat[i].id.toString()] = dat[i];
              }
              for (i = 0, j = dat.length; i < j; i++) {
                if (!m[dat[i].parent.toString()]) {
                  if (typeof inst !== "undefined") {
                    inst._data.core.last_error = {error: "parse", plugin: "core", id: "core_07", reason: "Node with invalid parent", data: JSON.stringify({id: dat[i].id.toString(), parent: dat[i].parent.toString()})};
                    inst.settings.core.error.call(inst, inst._data.core.last_error);
                  }
                  continue;
                }
                m[dat[i].parent.toString()].children.push(dat[i].id.toString());
                p.children_d.push(dat[i].id.toString());
              }
              for (i = 0, j = p.children.length; i < j; i++) {
                tmp = parse_flat(m[p.children[i]], par, p.parents.concat());
                dpc.push(tmp);
                if (m[tmp].children_d.length) {
                  dpc = dpc.concat(m[tmp].children_d);
                }
              }
              for (i = 0, j = p.parents.length; i < j; i++) {
                m[p.parents[i]].children_d = m[p.parents[i]].children_d.concat(dpc);
              }
              rslt2 = {
                cnt: t_cnt,
                mod: m,
                sel,
                par,
                dpc,
                add
              };
            } else {
              for (i = 0, j = dat.length; i < j; i++) {
                tmp = parse_nest(dat[i], par, p.parents.concat());
                if (tmp) {
                  chd.push(tmp);
                  dpc.push(tmp);
                  if (m[tmp].children_d.length) {
                    dpc = dpc.concat(m[tmp].children_d);
                  }
                }
              }
              p.children = chd;
              p.children_d = dpc;
              for (i = 0, j = p.parents.length; i < j; i++) {
                m[p.parents[i]].children_d = m[p.parents[i]].children_d.concat(dpc);
              }
              rslt2 = {
                cnt: t_cnt,
                mod: m,
                sel,
                par,
                dpc,
                add
              };
            }
            if (typeof window === "undefined" || typeof window.document === "undefined") {
              postMessage(rslt2);
            } else {
              return rslt2;
            }
          }, rslt = function(rslt2, worker) {
            if (this.element === null) {
              return;
            }
            this._cnt = rslt2.cnt;
            var i, m = this._model.data;
            for (i in m) {
              if (m.hasOwnProperty(i) && m[i].state && m[i].state.loading && rslt2.mod[i]) {
                rslt2.mod[i].state.loading = true;
              }
            }
            this._model.data = rslt2.mod;
            if (worker) {
              var j, a = rslt2.add, r = rslt2.sel, s = this._data.core.selected.slice();
              m = this._model.data;
              if (r.length !== s.length || $2.vakata.array_unique(r.concat(s)).length !== r.length) {
                for (i = 0, j = r.length; i < j; i++) {
                  if ($2.inArray(r[i], a) === -1 && $2.inArray(r[i], s) === -1) {
                    m[r[i]].state.selected = false;
                  }
                }
                for (i = 0, j = s.length; i < j; i++) {
                  if ($2.inArray(s[i], r) === -1) {
                    m[s[i]].state.selected = true;
                  }
                }
              }
            }
            if (rslt2.add.length) {
              this._data.core.selected = this._data.core.selected.concat(rslt2.add);
            }
            this.trigger("model", {nodes: rslt2.dpc, parent: rslt2.par});
            if (rslt2.par !== $2.jstree.root) {
              this._node_changed(rslt2.par);
              this.redraw();
            } else {
              this.redraw(true);
            }
            if (rslt2.add.length) {
              this.trigger("changed", {action: "model", selected: this._data.core.selected});
            }
            if (!worker && setImmediate) {
              setImmediate(function() {
                cb.call(inst, true);
              });
            } else {
              cb.call(inst, true);
            }
          };
          if (this.settings.core.worker && window.Blob && window.URL && window.Worker) {
            try {
              if (this._wrk === null) {
                this._wrk = window.URL.createObjectURL(new window.Blob(["self.onmessage = " + func.toString()], {type: "text/javascript"}));
              }
              if (!this._data.core.working || force_processing) {
                this._data.core.working = true;
                w = new window.Worker(this._wrk);
                w.onmessage = $2.proxy(function(e) {
                  rslt.call(this, e.data, true);
                  try {
                    w.terminate();
                    w = null;
                  } catch (ignore) {
                  }
                  if (this._data.core.worker_queue.length) {
                    this._append_json_data.apply(this, this._data.core.worker_queue.shift());
                  } else {
                    this._data.core.working = false;
                  }
                }, this);
                if (!args.par) {
                  if (this._data.core.worker_queue.length) {
                    this._append_json_data.apply(this, this._data.core.worker_queue.shift());
                  } else {
                    this._data.core.working = false;
                  }
                } else {
                  w.postMessage(args);
                }
              } else {
                this._data.core.worker_queue.push([dom, data, cb, true]);
              }
            } catch (e) {
              rslt.call(this, func(args), false);
              if (this._data.core.worker_queue.length) {
                this._append_json_data.apply(this, this._data.core.worker_queue.shift());
              } else {
                this._data.core.working = false;
              }
            }
          } else {
            rslt.call(this, func(args), false);
          }
        },
        _parse_model_from_html: function(d, p, ps) {
          if (!ps) {
            ps = [];
          } else {
            ps = [].concat(ps);
          }
          if (p) {
            ps.unshift(p);
          }
          var c, e, m = this._model.data, data = {
            id: false,
            text: false,
            icon: true,
            parent: p,
            parents: ps,
            children: [],
            children_d: [],
            data: null,
            state: {},
            li_attr: {id: false},
            a_attr: {href: "#"},
            original: false
          }, i, tmp, tid;
          for (i in this._model.default_state) {
            if (this._model.default_state.hasOwnProperty(i)) {
              data.state[i] = this._model.default_state[i];
            }
          }
          tmp = $2.vakata.attributes(d, true);
          $2.each(tmp, function(i2, v) {
            v = $2.vakata.trim(v);
            if (!v.length) {
              return true;
            }
            data.li_attr[i2] = v;
            if (i2 === "id") {
              data.id = v.toString();
            }
          });
          tmp = d.children("a").first();
          if (tmp.length) {
            tmp = $2.vakata.attributes(tmp, true);
            $2.each(tmp, function(i2, v) {
              v = $2.vakata.trim(v);
              if (v.length) {
                data.a_attr[i2] = v;
              }
            });
          }
          tmp = d.children("a").first().length ? d.children("a").first().clone() : d.clone();
          tmp.children("ins, i, ul").remove();
          tmp = tmp.html();
          tmp = $2("<div></div>").html(tmp);
          data.text = this.settings.core.force_text ? tmp.text() : tmp.html();
          tmp = d.data();
          data.data = tmp ? $2.extend(true, {}, tmp) : null;
          data.state.opened = d.hasClass("jstree-open");
          data.state.selected = d.children("a").hasClass("jstree-clicked");
          data.state.disabled = d.children("a").hasClass("jstree-disabled");
          if (data.data && data.data.jstree) {
            for (i in data.data.jstree) {
              if (data.data.jstree.hasOwnProperty(i)) {
                data.state[i] = data.data.jstree[i];
              }
            }
          }
          tmp = d.children("a").children(".jstree-themeicon");
          if (tmp.length) {
            data.icon = tmp.hasClass("jstree-themeicon-hidden") ? false : tmp.attr("rel");
          }
          if (data.state.icon !== undefined2) {
            data.icon = data.state.icon;
          }
          if (data.icon === undefined2 || data.icon === null || data.icon === "") {
            data.icon = true;
          }
          tmp = d.children("ul").children("li");
          do {
            tid = "j" + this._id + "_" + ++this._cnt;
          } while (m[tid]);
          data.id = data.li_attr.id ? data.li_attr.id.toString() : tid;
          if (tmp.length) {
            tmp.each($2.proxy(function(i2, v) {
              c = this._parse_model_from_html($2(v), data.id, ps);
              e = this._model.data[c];
              data.children.push(c);
              if (e.children_d.length) {
                data.children_d = data.children_d.concat(e.children_d);
              }
            }, this));
            data.children_d = data.children_d.concat(data.children);
          } else {
            if (d.hasClass("jstree-closed")) {
              data.state.loaded = false;
            }
          }
          if (data.li_attr["class"]) {
            data.li_attr["class"] = data.li_attr["class"].replace("jstree-closed", "").replace("jstree-open", "");
          }
          if (data.a_attr["class"]) {
            data.a_attr["class"] = data.a_attr["class"].replace("jstree-clicked", "").replace("jstree-disabled", "");
          }
          m[data.id] = data;
          if (data.state.selected) {
            this._data.core.selected.push(data.id);
          }
          return data.id;
        },
        _parse_model_from_flat_json: function(d, p, ps) {
          if (!ps) {
            ps = [];
          } else {
            ps = ps.concat();
          }
          if (p) {
            ps.unshift(p);
          }
          var tid = d.id.toString(), m = this._model.data, df = this._model.default_state, i, j, c, e, tmp = {
            id: tid,
            text: d.text || "",
            icon: d.icon !== undefined2 ? d.icon : true,
            parent: p,
            parents: ps,
            children: d.children || [],
            children_d: d.children_d || [],
            data: d.data,
            state: {},
            li_attr: {id: false},
            a_attr: {href: "#"},
            original: false
          };
          for (i in df) {
            if (df.hasOwnProperty(i)) {
              tmp.state[i] = df[i];
            }
          }
          if (d && d.data && d.data.jstree && d.data.jstree.icon) {
            tmp.icon = d.data.jstree.icon;
          }
          if (tmp.icon === undefined2 || tmp.icon === null || tmp.icon === "") {
            tmp.icon = true;
          }
          if (d && d.data) {
            tmp.data = d.data;
            if (d.data.jstree) {
              for (i in d.data.jstree) {
                if (d.data.jstree.hasOwnProperty(i)) {
                  tmp.state[i] = d.data.jstree[i];
                }
              }
            }
          }
          if (d && typeof d.state === "object") {
            for (i in d.state) {
              if (d.state.hasOwnProperty(i)) {
                tmp.state[i] = d.state[i];
              }
            }
          }
          if (d && typeof d.li_attr === "object") {
            for (i in d.li_attr) {
              if (d.li_attr.hasOwnProperty(i)) {
                tmp.li_attr[i] = d.li_attr[i];
              }
            }
          }
          if (!tmp.li_attr.id) {
            tmp.li_attr.id = tid;
          }
          if (d && typeof d.a_attr === "object") {
            for (i in d.a_attr) {
              if (d.a_attr.hasOwnProperty(i)) {
                tmp.a_attr[i] = d.a_attr[i];
              }
            }
          }
          if (d && d.children && d.children === true) {
            tmp.state.loaded = false;
            tmp.children = [];
            tmp.children_d = [];
          }
          m[tmp.id] = tmp;
          for (i = 0, j = tmp.children.length; i < j; i++) {
            c = this._parse_model_from_flat_json(m[tmp.children[i]], tmp.id, ps);
            e = m[c];
            tmp.children_d.push(c);
            if (e.children_d.length) {
              tmp.children_d = tmp.children_d.concat(e.children_d);
            }
          }
          delete d.data;
          delete d.children;
          m[tmp.id].original = d;
          if (tmp.state.selected) {
            this._data.core.selected.push(tmp.id);
          }
          return tmp.id;
        },
        _parse_model_from_json: function(d, p, ps) {
          if (!ps) {
            ps = [];
          } else {
            ps = ps.concat();
          }
          if (p) {
            ps.unshift(p);
          }
          var tid = false, i, j, c, e, m = this._model.data, df = this._model.default_state, tmp;
          do {
            tid = "j" + this._id + "_" + ++this._cnt;
          } while (m[tid]);
          tmp = {
            id: false,
            text: typeof d === "string" ? d : "",
            icon: typeof d === "object" && d.icon !== undefined2 ? d.icon : true,
            parent: p,
            parents: ps,
            children: [],
            children_d: [],
            data: null,
            state: {},
            li_attr: {id: false},
            a_attr: {href: "#"},
            original: false
          };
          for (i in df) {
            if (df.hasOwnProperty(i)) {
              tmp.state[i] = df[i];
            }
          }
          if (d && d.id) {
            tmp.id = d.id.toString();
          }
          if (d && d.text) {
            tmp.text = d.text;
          }
          if (d && d.data && d.data.jstree && d.data.jstree.icon) {
            tmp.icon = d.data.jstree.icon;
          }
          if (tmp.icon === undefined2 || tmp.icon === null || tmp.icon === "") {
            tmp.icon = true;
          }
          if (d && d.data) {
            tmp.data = d.data;
            if (d.data.jstree) {
              for (i in d.data.jstree) {
                if (d.data.jstree.hasOwnProperty(i)) {
                  tmp.state[i] = d.data.jstree[i];
                }
              }
            }
          }
          if (d && typeof d.state === "object") {
            for (i in d.state) {
              if (d.state.hasOwnProperty(i)) {
                tmp.state[i] = d.state[i];
              }
            }
          }
          if (d && typeof d.li_attr === "object") {
            for (i in d.li_attr) {
              if (d.li_attr.hasOwnProperty(i)) {
                tmp.li_attr[i] = d.li_attr[i];
              }
            }
          }
          if (tmp.li_attr.id && !tmp.id) {
            tmp.id = tmp.li_attr.id.toString();
          }
          if (!tmp.id) {
            tmp.id = tid;
          }
          if (!tmp.li_attr.id) {
            tmp.li_attr.id = tmp.id;
          }
          if (d && typeof d.a_attr === "object") {
            for (i in d.a_attr) {
              if (d.a_attr.hasOwnProperty(i)) {
                tmp.a_attr[i] = d.a_attr[i];
              }
            }
          }
          if (d && d.children && d.children.length) {
            for (i = 0, j = d.children.length; i < j; i++) {
              c = this._parse_model_from_json(d.children[i], tmp.id, ps);
              e = m[c];
              tmp.children.push(c);
              if (e.children_d.length) {
                tmp.children_d = tmp.children_d.concat(e.children_d);
              }
            }
            tmp.children_d = tmp.children.concat(tmp.children_d);
          }
          if (d && d.children && d.children === true) {
            tmp.state.loaded = false;
            tmp.children = [];
            tmp.children_d = [];
          }
          delete d.data;
          delete d.children;
          tmp.original = d;
          m[tmp.id] = tmp;
          if (tmp.state.selected) {
            this._data.core.selected.push(tmp.id);
          }
          return tmp.id;
        },
        _redraw: function() {
          var nodes = this._model.force_full_redraw ? this._model.data[$2.jstree.root].children.concat([]) : this._model.changed.concat([]), f = document2.createElement("UL"), tmp, i, j, fe = this._data.core.focused;
          for (i = 0, j = nodes.length; i < j; i++) {
            tmp = this.redraw_node(nodes[i], true, this._model.force_full_redraw);
            if (tmp && this._model.force_full_redraw) {
              f.appendChild(tmp);
            }
          }
          if (this._model.force_full_redraw) {
            f.className = this.get_container_ul()[0].className;
            f.setAttribute("role", "group");
            this.element.empty().append(f);
          }
          if (fe !== null && this.settings.core.restore_focus) {
            tmp = this.get_node(fe, true);
            if (tmp && tmp.length && tmp.children(".jstree-anchor")[0] !== document2.activeElement) {
              tmp.children(".jstree-anchor").focus();
            } else {
              this._data.core.focused = null;
            }
          }
          this._model.force_full_redraw = false;
          this._model.changed = [];
          this.trigger("redraw", {nodes});
        },
        redraw: function(full) {
          if (full) {
            this._model.force_full_redraw = true;
          }
          this._redraw();
        },
        draw_children: function(node) {
          var obj = this.get_node(node), i = false, j = false, k = false, d = document2;
          if (!obj) {
            return false;
          }
          if (obj.id === $2.jstree.root) {
            return this.redraw(true);
          }
          node = this.get_node(node, true);
          if (!node || !node.length) {
            return false;
          }
          node.children(".jstree-children").remove();
          node = node[0];
          if (obj.children.length && obj.state.loaded) {
            k = d.createElement("UL");
            k.setAttribute("role", "group");
            k.className = "jstree-children";
            for (i = 0, j = obj.children.length; i < j; i++) {
              k.appendChild(this.redraw_node(obj.children[i], true, true));
            }
            node.appendChild(k);
          }
        },
        redraw_node: function(node, deep, is_callback, force_render) {
          var obj = this.get_node(node), par = false, ind = false, old = false, i = false, j = false, k = false, c = "", d = document2, m = this._model.data, f = false, s = false, tmp = null, t = 0, l = 0, has_children = false, last_sibling = false;
          if (!obj) {
            return false;
          }
          if (obj.id === $2.jstree.root) {
            return this.redraw(true);
          }
          deep = deep || obj.children.length === 0;
          node = !document2.querySelector ? document2.getElementById(obj.id) : this.element[0].querySelector("#" + ("0123456789".indexOf(obj.id[0]) !== -1 ? "\\3" + obj.id[0] + " " + obj.id.substr(1).replace($2.jstree.idregex, "\\$&") : obj.id.replace($2.jstree.idregex, "\\$&")));
          if (!node) {
            deep = true;
            if (!is_callback) {
              par = obj.parent !== $2.jstree.root ? $2("#" + obj.parent.replace($2.jstree.idregex, "\\$&"), this.element)[0] : null;
              if (par !== null && (!par || !m[obj.parent].state.opened)) {
                return false;
              }
              ind = $2.inArray(obj.id, par === null ? m[$2.jstree.root].children : m[obj.parent].children);
            }
          } else {
            node = $2(node);
            if (!is_callback) {
              par = node.parent().parent()[0];
              if (par === this.element[0]) {
                par = null;
              }
              ind = node.index();
            }
            if (!deep && obj.children.length && !node.children(".jstree-children").length) {
              deep = true;
            }
            if (!deep) {
              old = node.children(".jstree-children")[0];
            }
            f = node.children(".jstree-anchor")[0] === document2.activeElement;
            node.remove();
          }
          node = this._data.core.node.cloneNode(true);
          c = "jstree-node ";
          for (i in obj.li_attr) {
            if (obj.li_attr.hasOwnProperty(i)) {
              if (i === "id") {
                continue;
              }
              if (i !== "class") {
                node.setAttribute(i, obj.li_attr[i]);
              } else {
                c += obj.li_attr[i];
              }
            }
          }
          if (!obj.a_attr.id) {
            obj.a_attr.id = obj.id + "_anchor";
          }
          node.childNodes[1].setAttribute("aria-selected", !!obj.state.selected);
          node.childNodes[1].setAttribute("aria-level", obj.parents.length);
          if (this.settings.core.compute_elements_positions) {
            node.childNodes[1].setAttribute("aria-setsize", m[obj.parent].children.length);
            node.childNodes[1].setAttribute("aria-posinset", m[obj.parent].children.indexOf(obj.id) + 1);
          }
          if (obj.state.disabled) {
            node.childNodes[1].setAttribute("aria-disabled", true);
          }
          for (i = 0, j = obj.children.length; i < j; i++) {
            if (!m[obj.children[i]].state.hidden) {
              has_children = true;
              break;
            }
          }
          if (obj.parent !== null && m[obj.parent] && !obj.state.hidden) {
            i = $2.inArray(obj.id, m[obj.parent].children);
            last_sibling = obj.id;
            if (i !== -1) {
              i++;
              for (j = m[obj.parent].children.length; i < j; i++) {
                if (!m[m[obj.parent].children[i]].state.hidden) {
                  last_sibling = m[obj.parent].children[i];
                }
                if (last_sibling !== obj.id) {
                  break;
                }
              }
            }
          }
          if (obj.state.hidden) {
            c += " jstree-hidden";
          }
          if (obj.state.loading) {
            c += " jstree-loading";
          }
          if (obj.state.loaded && !has_children) {
            c += " jstree-leaf";
          } else {
            c += obj.state.opened && obj.state.loaded ? " jstree-open" : " jstree-closed";
            node.childNodes[1].setAttribute("aria-expanded", obj.state.opened && obj.state.loaded);
          }
          if (last_sibling === obj.id) {
            c += " jstree-last";
          }
          node.id = obj.id;
          node.className = c;
          c = (obj.state.selected ? " jstree-clicked" : "") + (obj.state.disabled ? " jstree-disabled" : "");
          for (j in obj.a_attr) {
            if (obj.a_attr.hasOwnProperty(j)) {
              if (j === "href" && obj.a_attr[j] === "#") {
                continue;
              }
              if (j !== "class") {
                node.childNodes[1].setAttribute(j, obj.a_attr[j]);
              } else {
                c += " " + obj.a_attr[j];
              }
            }
          }
          if (c.length) {
            node.childNodes[1].className = "jstree-anchor " + c;
          }
          if (obj.icon && obj.icon !== true || obj.icon === false) {
            if (obj.icon === false) {
              node.childNodes[1].childNodes[0].className += " jstree-themeicon-hidden";
            } else if (obj.icon.indexOf("/") === -1 && obj.icon.indexOf(".") === -1) {
              node.childNodes[1].childNodes[0].className += " " + obj.icon + " jstree-themeicon-custom";
            } else {
              node.childNodes[1].childNodes[0].style.backgroundImage = 'url("' + obj.icon + '")';
              node.childNodes[1].childNodes[0].style.backgroundPosition = "center center";
              node.childNodes[1].childNodes[0].style.backgroundSize = "auto";
              node.childNodes[1].childNodes[0].className += " jstree-themeicon-custom";
            }
          }
          if (this.settings.core.force_text) {
            node.childNodes[1].appendChild(d.createTextNode(obj.text));
          } else {
            node.childNodes[1].innerHTML += obj.text;
          }
          if (deep && obj.children.length && (obj.state.opened || force_render) && obj.state.loaded) {
            k = d.createElement("UL");
            k.setAttribute("role", "group");
            k.className = "jstree-children";
            for (i = 0, j = obj.children.length; i < j; i++) {
              k.appendChild(this.redraw_node(obj.children[i], deep, true));
            }
            node.appendChild(k);
          }
          if (old) {
            node.appendChild(old);
          }
          if (!is_callback) {
            if (!par) {
              par = this.element[0];
            }
            for (i = 0, j = par.childNodes.length; i < j; i++) {
              if (par.childNodes[i] && par.childNodes[i].className && par.childNodes[i].className.indexOf("jstree-children") !== -1) {
                tmp = par.childNodes[i];
                break;
              }
            }
            if (!tmp) {
              tmp = d.createElement("UL");
              tmp.setAttribute("role", "group");
              tmp.className = "jstree-children";
              par.appendChild(tmp);
            }
            par = tmp;
            if (ind < par.childNodes.length) {
              par.insertBefore(node, par.childNodes[ind]);
            } else {
              par.appendChild(node);
            }
            if (f) {
              t = this.element[0].scrollTop;
              l = this.element[0].scrollLeft;
              node.childNodes[1].focus();
              this.element[0].scrollTop = t;
              this.element[0].scrollLeft = l;
            }
          }
          if (obj.state.opened && !obj.state.loaded) {
            obj.state.opened = false;
            setTimeout($2.proxy(function() {
              this.open_node(obj.id, false, 0);
            }, this), 0);
          }
          return node;
        },
        open_node: function(obj, callback, animation) {
          var t1, t2, d, t;
          if ($2.isArray(obj)) {
            obj = obj.slice();
            for (t1 = 0, t2 = obj.length; t1 < t2; t1++) {
              this.open_node(obj[t1], callback, animation);
            }
            return true;
          }
          obj = this.get_node(obj);
          if (!obj || obj.id === $2.jstree.root) {
            return false;
          }
          animation = animation === undefined2 ? this.settings.core.animation : animation;
          if (!this.is_closed(obj)) {
            if (callback) {
              callback.call(this, obj, false);
            }
            return false;
          }
          if (!this.is_loaded(obj)) {
            if (this.is_loading(obj)) {
              return setTimeout($2.proxy(function() {
                this.open_node(obj, callback, animation);
              }, this), 500);
            }
            this.load_node(obj, function(o, ok) {
              return ok ? this.open_node(o, callback, animation) : callback ? callback.call(this, o, false) : false;
            });
          } else {
            d = this.get_node(obj, true);
            t = this;
            if (d.length) {
              if (animation && d.children(".jstree-children").length) {
                d.children(".jstree-children").stop(true, true);
              }
              if (obj.children.length && !this._firstChild(d.children(".jstree-children")[0])) {
                this.draw_children(obj);
              }
              if (!animation) {
                this.trigger("before_open", {node: obj});
                d[0].className = d[0].className.replace("jstree-closed", "jstree-open");
                d[0].childNodes[1].setAttribute("aria-expanded", true);
              } else {
                this.trigger("before_open", {node: obj});
                d.children(".jstree-children").css("display", "none").end().removeClass("jstree-closed").addClass("jstree-open").children(".jstree-anchor").attr("aria-expanded", true).end().children(".jstree-children").stop(true, true).slideDown(animation, function() {
                  this.style.display = "";
                  if (t.element) {
                    t.trigger("after_open", {node: obj});
                  }
                });
              }
            }
            obj.state.opened = true;
            if (callback) {
              callback.call(this, obj, true);
            }
            if (!d.length) {
              this.trigger("before_open", {node: obj});
            }
            this.trigger("open_node", {node: obj});
            if (!animation || !d.length) {
              this.trigger("after_open", {node: obj});
            }
            return true;
          }
        },
        _open_to: function(obj) {
          obj = this.get_node(obj);
          if (!obj || obj.id === $2.jstree.root) {
            return false;
          }
          var i, j, p = obj.parents;
          for (i = 0, j = p.length; i < j; i += 1) {
            if (i !== $2.jstree.root) {
              this.open_node(p[i], false, 0);
            }
          }
          return $2("#" + obj.id.replace($2.jstree.idregex, "\\$&"), this.element);
        },
        close_node: function(obj, animation) {
          var t1, t2, t, d;
          if ($2.isArray(obj)) {
            obj = obj.slice();
            for (t1 = 0, t2 = obj.length; t1 < t2; t1++) {
              this.close_node(obj[t1], animation);
            }
            return true;
          }
          obj = this.get_node(obj);
          if (!obj || obj.id === $2.jstree.root) {
            return false;
          }
          if (this.is_closed(obj)) {
            return false;
          }
          animation = animation === undefined2 ? this.settings.core.animation : animation;
          t = this;
          d = this.get_node(obj, true);
          obj.state.opened = false;
          this.trigger("close_node", {node: obj});
          if (!d.length) {
            this.trigger("after_close", {node: obj});
          } else {
            if (!animation) {
              d[0].className = d[0].className.replace("jstree-open", "jstree-closed");
              d.children(".jstree-anchor").attr("aria-expanded", false);
              d.children(".jstree-children").remove();
              this.trigger("after_close", {node: obj});
            } else {
              d.children(".jstree-children").attr("style", "display:block !important").end().removeClass("jstree-open").addClass("jstree-closed").children(".jstree-anchor").attr("aria-expanded", false).end().children(".jstree-children").stop(true, true).slideUp(animation, function() {
                this.style.display = "";
                d.children(".jstree-children").remove();
                if (t.element) {
                  t.trigger("after_close", {node: obj});
                }
              });
            }
          }
        },
        toggle_node: function(obj) {
          var t1, t2;
          if ($2.isArray(obj)) {
            obj = obj.slice();
            for (t1 = 0, t2 = obj.length; t1 < t2; t1++) {
              this.toggle_node(obj[t1]);
            }
            return true;
          }
          if (this.is_closed(obj)) {
            return this.open_node(obj);
          }
          if (this.is_open(obj)) {
            return this.close_node(obj);
          }
        },
        open_all: function(obj, animation, original_obj) {
          if (!obj) {
            obj = $2.jstree.root;
          }
          obj = this.get_node(obj);
          if (!obj) {
            return false;
          }
          var dom = obj.id === $2.jstree.root ? this.get_container_ul() : this.get_node(obj, true), i, j, _this;
          if (!dom.length) {
            for (i = 0, j = obj.children_d.length; i < j; i++) {
              if (this.is_closed(this._model.data[obj.children_d[i]])) {
                this._model.data[obj.children_d[i]].state.opened = true;
              }
            }
            return this.trigger("open_all", {node: obj});
          }
          original_obj = original_obj || dom;
          _this = this;
          dom = this.is_closed(obj) ? dom.find(".jstree-closed").addBack() : dom.find(".jstree-closed");
          dom.each(function() {
            _this.open_node(this, function(node, status) {
              if (status && this.is_parent(node)) {
                this.open_all(node, animation, original_obj);
              }
            }, animation || 0);
          });
          if (original_obj.find(".jstree-closed").length === 0) {
            this.trigger("open_all", {node: this.get_node(original_obj)});
          }
        },
        close_all: function(obj, animation) {
          if (!obj) {
            obj = $2.jstree.root;
          }
          obj = this.get_node(obj);
          if (!obj) {
            return false;
          }
          var dom = obj.id === $2.jstree.root ? this.get_container_ul() : this.get_node(obj, true), _this = this, i, j;
          if (dom.length) {
            dom = this.is_open(obj) ? dom.find(".jstree-open").addBack() : dom.find(".jstree-open");
            $2(dom.get().reverse()).each(function() {
              _this.close_node(this, animation || 0);
            });
          }
          for (i = 0, j = obj.children_d.length; i < j; i++) {
            this._model.data[obj.children_d[i]].state.opened = false;
          }
          this.trigger("close_all", {node: obj});
        },
        is_disabled: function(obj) {
          obj = this.get_node(obj);
          return obj && obj.state && obj.state.disabled;
        },
        enable_node: function(obj) {
          var t1, t2;
          if ($2.isArray(obj)) {
            obj = obj.slice();
            for (t1 = 0, t2 = obj.length; t1 < t2; t1++) {
              this.enable_node(obj[t1]);
            }
            return true;
          }
          obj = this.get_node(obj);
          if (!obj || obj.id === $2.jstree.root) {
            return false;
          }
          obj.state.disabled = false;
          this.get_node(obj, true).children(".jstree-anchor").removeClass("jstree-disabled").attr("aria-disabled", false);
          this.trigger("enable_node", {node: obj});
        },
        disable_node: function(obj) {
          var t1, t2;
          if ($2.isArray(obj)) {
            obj = obj.slice();
            for (t1 = 0, t2 = obj.length; t1 < t2; t1++) {
              this.disable_node(obj[t1]);
            }
            return true;
          }
          obj = this.get_node(obj);
          if (!obj || obj.id === $2.jstree.root) {
            return false;
          }
          obj.state.disabled = true;
          this.get_node(obj, true).children(".jstree-anchor").addClass("jstree-disabled").attr("aria-disabled", true);
          this.trigger("disable_node", {node: obj});
        },
        is_hidden: function(obj) {
          obj = this.get_node(obj);
          return obj.state.hidden === true;
        },
        hide_node: function(obj, skip_redraw) {
          var t1, t2;
          if ($2.isArray(obj)) {
            obj = obj.slice();
            for (t1 = 0, t2 = obj.length; t1 < t2; t1++) {
              this.hide_node(obj[t1], true);
            }
            if (!skip_redraw) {
              this.redraw();
            }
            return true;
          }
          obj = this.get_node(obj);
          if (!obj || obj.id === $2.jstree.root) {
            return false;
          }
          if (!obj.state.hidden) {
            obj.state.hidden = true;
            this._node_changed(obj.parent);
            if (!skip_redraw) {
              this.redraw();
            }
            this.trigger("hide_node", {node: obj});
          }
        },
        show_node: function(obj, skip_redraw) {
          var t1, t2;
          if ($2.isArray(obj)) {
            obj = obj.slice();
            for (t1 = 0, t2 = obj.length; t1 < t2; t1++) {
              this.show_node(obj[t1], true);
            }
            if (!skip_redraw) {
              this.redraw();
            }
            return true;
          }
          obj = this.get_node(obj);
          if (!obj || obj.id === $2.jstree.root) {
            return false;
          }
          if (obj.state.hidden) {
            obj.state.hidden = false;
            this._node_changed(obj.parent);
            if (!skip_redraw) {
              this.redraw();
            }
            this.trigger("show_node", {node: obj});
          }
        },
        hide_all: function(skip_redraw) {
          var i, m = this._model.data, ids = [];
          for (i in m) {
            if (m.hasOwnProperty(i) && i !== $2.jstree.root && !m[i].state.hidden) {
              m[i].state.hidden = true;
              ids.push(i);
            }
          }
          this._model.force_full_redraw = true;
          if (!skip_redraw) {
            this.redraw();
          }
          this.trigger("hide_all", {nodes: ids});
          return ids;
        },
        show_all: function(skip_redraw) {
          var i, m = this._model.data, ids = [];
          for (i in m) {
            if (m.hasOwnProperty(i) && i !== $2.jstree.root && m[i].state.hidden) {
              m[i].state.hidden = false;
              ids.push(i);
            }
          }
          this._model.force_full_redraw = true;
          if (!skip_redraw) {
            this.redraw();
          }
          this.trigger("show_all", {nodes: ids});
          return ids;
        },
        activate_node: function(obj, e) {
          if (this.is_disabled(obj)) {
            return false;
          }
          if (!e || typeof e !== "object") {
            e = {};
          }
          this._data.core.last_clicked = this._data.core.last_clicked && this._data.core.last_clicked.id !== undefined2 ? this.get_node(this._data.core.last_clicked.id) : null;
          if (this._data.core.last_clicked && !this._data.core.last_clicked.state.selected) {
            this._data.core.last_clicked = null;
          }
          if (!this._data.core.last_clicked && this._data.core.selected.length) {
            this._data.core.last_clicked = this.get_node(this._data.core.selected[this._data.core.selected.length - 1]);
          }
          if (!this.settings.core.multiple || !e.metaKey && !e.ctrlKey && !e.shiftKey || e.shiftKey && (!this._data.core.last_clicked || !this.get_parent(obj) || this.get_parent(obj) !== this._data.core.last_clicked.parent)) {
            if (!this.settings.core.multiple && (e.metaKey || e.ctrlKey || e.shiftKey) && this.is_selected(obj)) {
              this.deselect_node(obj, false, e);
            } else {
              this.deselect_all(true);
              this.select_node(obj, false, false, e);
              this._data.core.last_clicked = this.get_node(obj);
            }
          } else {
            if (e.shiftKey) {
              var o = this.get_node(obj).id, l = this._data.core.last_clicked.id, p = this.get_node(this._data.core.last_clicked.parent).children, c = false, i, j;
              for (i = 0, j = p.length; i < j; i += 1) {
                if (p[i] === o) {
                  c = !c;
                }
                if (p[i] === l) {
                  c = !c;
                }
                if (!this.is_disabled(p[i]) && (c || p[i] === o || p[i] === l)) {
                  if (!this.is_hidden(p[i])) {
                    this.select_node(p[i], true, false, e);
                  }
                } else {
                  this.deselect_node(p[i], true, e);
                }
              }
              this.trigger("changed", {action: "select_node", node: this.get_node(obj), selected: this._data.core.selected, event: e});
            } else {
              if (!this.is_selected(obj)) {
                this.select_node(obj, false, false, e);
              } else {
                this.deselect_node(obj, false, e);
              }
            }
          }
          this.trigger("activate_node", {node: this.get_node(obj), event: e});
        },
        hover_node: function(obj) {
          obj = this.get_node(obj, true);
          if (!obj || !obj.length || obj.children(".jstree-hovered").length) {
            return false;
          }
          var o = this.element.find(".jstree-hovered"), t = this.element;
          if (o && o.length) {
            this.dehover_node(o);
          }
          obj.children(".jstree-anchor").addClass("jstree-hovered");
          this.trigger("hover_node", {node: this.get_node(obj)});
          setTimeout(function() {
            t.attr("aria-activedescendant", obj[0].id);
          }, 0);
        },
        dehover_node: function(obj) {
          obj = this.get_node(obj, true);
          if (!obj || !obj.length || !obj.children(".jstree-hovered").length) {
            return false;
          }
          obj.children(".jstree-anchor").removeClass("jstree-hovered");
          this.trigger("dehover_node", {node: this.get_node(obj)});
        },
        select_node: function(obj, supress_event, prevent_open, e) {
          var dom, t1, t2, th;
          if ($2.isArray(obj)) {
            obj = obj.slice();
            for (t1 = 0, t2 = obj.length; t1 < t2; t1++) {
              this.select_node(obj[t1], supress_event, prevent_open, e);
            }
            return true;
          }
          obj = this.get_node(obj);
          if (!obj || obj.id === $2.jstree.root) {
            return false;
          }
          dom = this.get_node(obj, true);
          if (!obj.state.selected) {
            obj.state.selected = true;
            this._data.core.selected.push(obj.id);
            if (!prevent_open) {
              dom = this._open_to(obj);
            }
            if (dom && dom.length) {
              dom.children(".jstree-anchor").addClass("jstree-clicked").attr("aria-selected", true);
            }
            this.trigger("select_node", {node: obj, selected: this._data.core.selected, event: e});
            if (!supress_event) {
              this.trigger("changed", {action: "select_node", node: obj, selected: this._data.core.selected, event: e});
            }
          }
        },
        deselect_node: function(obj, supress_event, e) {
          var t1, t2, dom;
          if ($2.isArray(obj)) {
            obj = obj.slice();
            for (t1 = 0, t2 = obj.length; t1 < t2; t1++) {
              this.deselect_node(obj[t1], supress_event, e);
            }
            return true;
          }
          obj = this.get_node(obj);
          if (!obj || obj.id === $2.jstree.root) {
            return false;
          }
          dom = this.get_node(obj, true);
          if (obj.state.selected) {
            obj.state.selected = false;
            this._data.core.selected = $2.vakata.array_remove_item(this._data.core.selected, obj.id);
            if (dom.length) {
              dom.children(".jstree-anchor").removeClass("jstree-clicked").attr("aria-selected", false);
            }
            this.trigger("deselect_node", {node: obj, selected: this._data.core.selected, event: e});
            if (!supress_event) {
              this.trigger("changed", {action: "deselect_node", node: obj, selected: this._data.core.selected, event: e});
            }
          }
        },
        select_all: function(supress_event) {
          var tmp = this._data.core.selected.concat([]), i, j;
          this._data.core.selected = this._model.data[$2.jstree.root].children_d.concat();
          for (i = 0, j = this._data.core.selected.length; i < j; i++) {
            if (this._model.data[this._data.core.selected[i]]) {
              this._model.data[this._data.core.selected[i]].state.selected = true;
            }
          }
          this.redraw(true);
          this.trigger("select_all", {selected: this._data.core.selected});
          if (!supress_event) {
            this.trigger("changed", {action: "select_all", selected: this._data.core.selected, old_selection: tmp});
          }
        },
        deselect_all: function(supress_event) {
          var tmp = this._data.core.selected.concat([]), i, j;
          for (i = 0, j = this._data.core.selected.length; i < j; i++) {
            if (this._model.data[this._data.core.selected[i]]) {
              this._model.data[this._data.core.selected[i]].state.selected = false;
            }
          }
          this._data.core.selected = [];
          this.element.find(".jstree-clicked").removeClass("jstree-clicked").attr("aria-selected", false);
          this.trigger("deselect_all", {selected: this._data.core.selected, node: tmp});
          if (!supress_event) {
            this.trigger("changed", {action: "deselect_all", selected: this._data.core.selected, old_selection: tmp});
          }
        },
        is_selected: function(obj) {
          obj = this.get_node(obj);
          if (!obj || obj.id === $2.jstree.root) {
            return false;
          }
          return obj.state.selected;
        },
        get_selected: function(full) {
          return full ? $2.map(this._data.core.selected, $2.proxy(function(i) {
            return this.get_node(i);
          }, this)) : this._data.core.selected.slice();
        },
        get_top_selected: function(full) {
          var tmp = this.get_selected(true), obj = {}, i, j, k, l;
          for (i = 0, j = tmp.length; i < j; i++) {
            obj[tmp[i].id] = tmp[i];
          }
          for (i = 0, j = tmp.length; i < j; i++) {
            for (k = 0, l = tmp[i].children_d.length; k < l; k++) {
              if (obj[tmp[i].children_d[k]]) {
                delete obj[tmp[i].children_d[k]];
              }
            }
          }
          tmp = [];
          for (i in obj) {
            if (obj.hasOwnProperty(i)) {
              tmp.push(i);
            }
          }
          return full ? $2.map(tmp, $2.proxy(function(i2) {
            return this.get_node(i2);
          }, this)) : tmp;
        },
        get_bottom_selected: function(full) {
          var tmp = this.get_selected(true), obj = [], i, j;
          for (i = 0, j = tmp.length; i < j; i++) {
            if (!tmp[i].children.length) {
              obj.push(tmp[i].id);
            }
          }
          return full ? $2.map(obj, $2.proxy(function(i2) {
            return this.get_node(i2);
          }, this)) : obj;
        },
        get_state: function() {
          var state = {
            core: {
              open: [],
              loaded: [],
              scroll: {
                left: this.element.scrollLeft(),
                top: this.element.scrollTop()
              },
              selected: []
            }
          }, i;
          for (i in this._model.data) {
            if (this._model.data.hasOwnProperty(i)) {
              if (i !== $2.jstree.root) {
                if (this._model.data[i].state.loaded && this.settings.core.loaded_state) {
                  state.core.loaded.push(i);
                }
                if (this._model.data[i].state.opened) {
                  state.core.open.push(i);
                }
                if (this._model.data[i].state.selected) {
                  state.core.selected.push(i);
                }
              }
            }
          }
          return state;
        },
        set_state: function(state, callback) {
          if (state) {
            if (state.core && state.core.selected && state.core.initial_selection === undefined2) {
              state.core.initial_selection = this._data.core.selected.concat([]).sort().join(",");
            }
            if (state.core) {
              var res, n, t, _this, i;
              if (state.core.loaded) {
                if (!this.settings.core.loaded_state || !$2.isArray(state.core.loaded) || !state.core.loaded.length) {
                  delete state.core.loaded;
                  this.set_state(state, callback);
                } else {
                  this._load_nodes(state.core.loaded, function(nodes) {
                    delete state.core.loaded;
                    this.set_state(state, callback);
                  });
                }
                return false;
              }
              if (state.core.open) {
                if (!$2.isArray(state.core.open) || !state.core.open.length) {
                  delete state.core.open;
                  this.set_state(state, callback);
                } else {
                  this._load_nodes(state.core.open, function(nodes) {
                    this.open_node(nodes, false, 0);
                    delete state.core.open;
                    this.set_state(state, callback);
                  });
                }
                return false;
              }
              if (state.core.scroll) {
                if (state.core.scroll && state.core.scroll.left !== undefined2) {
                  this.element.scrollLeft(state.core.scroll.left);
                }
                if (state.core.scroll && state.core.scroll.top !== undefined2) {
                  this.element.scrollTop(state.core.scroll.top);
                }
                delete state.core.scroll;
                this.set_state(state, callback);
                return false;
              }
              if (state.core.selected) {
                _this = this;
                if (state.core.initial_selection === undefined2 || state.core.initial_selection === this._data.core.selected.concat([]).sort().join(",")) {
                  this.deselect_all();
                  $2.each(state.core.selected, function(i2, v) {
                    _this.select_node(v, false, true);
                  });
                }
                delete state.core.initial_selection;
                delete state.core.selected;
                this.set_state(state, callback);
                return false;
              }
              for (i in state) {
                if (state.hasOwnProperty(i) && i !== "core" && $2.inArray(i, this.settings.plugins) === -1) {
                  delete state[i];
                }
              }
              if ($2.isEmptyObject(state.core)) {
                delete state.core;
                this.set_state(state, callback);
                return false;
              }
            }
            if ($2.isEmptyObject(state)) {
              state = null;
              if (callback) {
                callback.call(this);
              }
              this.trigger("set_state");
              return false;
            }
            return true;
          }
          return false;
        },
        refresh: function(skip_loading, forget_state) {
          this._data.core.state = forget_state === true ? {} : this.get_state();
          if (forget_state && $2.isFunction(forget_state)) {
            this._data.core.state = forget_state.call(this, this._data.core.state);
          }
          this._cnt = 0;
          this._model.data = {};
          this._model.data[$2.jstree.root] = {
            id: $2.jstree.root,
            parent: null,
            parents: [],
            children: [],
            children_d: [],
            state: {loaded: false}
          };
          this._data.core.selected = [];
          this._data.core.last_clicked = null;
          this._data.core.focused = null;
          var c = this.get_container_ul()[0].className;
          if (!skip_loading) {
            this.element.html("<ul class='" + c + "' role='group'><li class='jstree-initial-node jstree-loading jstree-leaf jstree-last' role='none' id='j" + this._id + "_loading'><i class='jstree-icon jstree-ocl'></i><a class='jstree-anchor' role='treeitem' href='#'><i class='jstree-icon jstree-themeicon-hidden'></i>" + this.get_string("Loading ...") + "</a></li></ul>");
            this.element.attr("aria-activedescendant", "j" + this._id + "_loading");
          }
          this.load_node($2.jstree.root, function(o, s) {
            if (s) {
              this.get_container_ul()[0].className = c;
              if (this._firstChild(this.get_container_ul()[0])) {
                this.element.attr("aria-activedescendant", this._firstChild(this.get_container_ul()[0]).id);
              }
              this.set_state($2.extend(true, {}, this._data.core.state), function() {
                this.trigger("refresh");
              });
            }
            this._data.core.state = null;
          });
        },
        refresh_node: function(obj) {
          obj = this.get_node(obj);
          if (!obj || obj.id === $2.jstree.root) {
            return false;
          }
          var opened = [], to_load = [], s = this._data.core.selected.concat([]);
          to_load.push(obj.id);
          if (obj.state.opened === true) {
            opened.push(obj.id);
          }
          this.get_node(obj, true).find(".jstree-open").each(function() {
            to_load.push(this.id);
            opened.push(this.id);
          });
          this._load_nodes(to_load, $2.proxy(function(nodes) {
            this.open_node(opened, false, 0);
            this.select_node(s);
            this.trigger("refresh_node", {node: obj, nodes});
          }, this), false, true);
        },
        set_id: function(obj, id) {
          obj = this.get_node(obj);
          if (!obj || obj.id === $2.jstree.root) {
            return false;
          }
          var i, j, m = this._model.data, old = obj.id;
          id = id.toString();
          m[obj.parent].children[$2.inArray(obj.id, m[obj.parent].children)] = id;
          for (i = 0, j = obj.parents.length; i < j; i++) {
            m[obj.parents[i]].children_d[$2.inArray(obj.id, m[obj.parents[i]].children_d)] = id;
          }
          for (i = 0, j = obj.children.length; i < j; i++) {
            m[obj.children[i]].parent = id;
          }
          for (i = 0, j = obj.children_d.length; i < j; i++) {
            m[obj.children_d[i]].parents[$2.inArray(obj.id, m[obj.children_d[i]].parents)] = id;
          }
          i = $2.inArray(obj.id, this._data.core.selected);
          if (i !== -1) {
            this._data.core.selected[i] = id;
          }
          i = this.get_node(obj.id, true);
          if (i) {
            i.attr("id", id);
            if (this.element.attr("aria-activedescendant") === obj.id) {
              this.element.attr("aria-activedescendant", id);
            }
          }
          delete m[obj.id];
          obj.id = id;
          obj.li_attr.id = id;
          m[id] = obj;
          this.trigger("set_id", {node: obj, new: obj.id, old});
          return true;
        },
        get_text: function(obj) {
          obj = this.get_node(obj);
          return !obj || obj.id === $2.jstree.root ? false : obj.text;
        },
        set_text: function(obj, val) {
          var t1, t2;
          if ($2.isArray(obj)) {
            obj = obj.slice();
            for (t1 = 0, t2 = obj.length; t1 < t2; t1++) {
              this.set_text(obj[t1], val);
            }
            return true;
          }
          obj = this.get_node(obj);
          if (!obj || obj.id === $2.jstree.root) {
            return false;
          }
          obj.text = val;
          if (this.get_node(obj, true).length) {
            this.redraw_node(obj.id);
          }
          this.trigger("set_text", {obj, text: val});
          return true;
        },
        get_json: function(obj, options, flat) {
          obj = this.get_node(obj || $2.jstree.root);
          if (!obj) {
            return false;
          }
          if (options && options.flat && !flat) {
            flat = [];
          }
          var tmp = {
            id: obj.id,
            text: obj.text,
            icon: this.get_icon(obj),
            li_attr: $2.extend(true, {}, obj.li_attr),
            a_attr: $2.extend(true, {}, obj.a_attr),
            state: {},
            data: options && options.no_data ? false : $2.extend(true, $2.isArray(obj.data) ? [] : {}, obj.data)
          }, i, j;
          if (options && options.flat) {
            tmp.parent = obj.parent;
          } else {
            tmp.children = [];
          }
          if (!options || !options.no_state) {
            for (i in obj.state) {
              if (obj.state.hasOwnProperty(i)) {
                tmp.state[i] = obj.state[i];
              }
            }
          } else {
            delete tmp.state;
          }
          if (options && options.no_li_attr) {
            delete tmp.li_attr;
          }
          if (options && options.no_a_attr) {
            delete tmp.a_attr;
          }
          if (options && options.no_id) {
            delete tmp.id;
            if (tmp.li_attr && tmp.li_attr.id) {
              delete tmp.li_attr.id;
            }
            if (tmp.a_attr && tmp.a_attr.id) {
              delete tmp.a_attr.id;
            }
          }
          if (options && options.flat && obj.id !== $2.jstree.root) {
            flat.push(tmp);
          }
          if (!options || !options.no_children) {
            for (i = 0, j = obj.children.length; i < j; i++) {
              if (options && options.flat) {
                this.get_json(obj.children[i], options, flat);
              } else {
                tmp.children.push(this.get_json(obj.children[i], options));
              }
            }
          }
          return options && options.flat ? flat : obj.id === $2.jstree.root ? tmp.children : tmp;
        },
        create_node: function(par, node, pos, callback, is_loaded) {
          if (par === null) {
            par = $2.jstree.root;
          }
          par = this.get_node(par);
          if (!par) {
            return false;
          }
          pos = pos === undefined2 ? "last" : pos;
          if (!pos.toString().match(/^(before|after)$/) && !is_loaded && !this.is_loaded(par)) {
            return this.load_node(par, function() {
              this.create_node(par, node, pos, callback, true);
            });
          }
          if (!node) {
            node = {text: this.get_string("New node")};
          }
          if (typeof node === "string") {
            node = {text: node};
          } else {
            node = $2.extend(true, {}, node);
          }
          if (node.text === undefined2) {
            node.text = this.get_string("New node");
          }
          var tmp, dpc, i, j;
          if (par.id === $2.jstree.root) {
            if (pos === "before") {
              pos = "first";
            }
            if (pos === "after") {
              pos = "last";
            }
          }
          switch (pos) {
            case "before":
              tmp = this.get_node(par.parent);
              pos = $2.inArray(par.id, tmp.children);
              par = tmp;
              break;
            case "after":
              tmp = this.get_node(par.parent);
              pos = $2.inArray(par.id, tmp.children) + 1;
              par = tmp;
              break;
            case "inside":
            case "first":
              pos = 0;
              break;
            case "last":
              pos = par.children.length;
              break;
            default:
              if (!pos) {
                pos = 0;
              }
              break;
          }
          if (pos > par.children.length) {
            pos = par.children.length;
          }
          if (!node.id) {
            node.id = true;
          }
          if (!this.check("create_node", node, par, pos)) {
            this.settings.core.error.call(this, this._data.core.last_error);
            return false;
          }
          if (node.id === true) {
            delete node.id;
          }
          node = this._parse_model_from_json(node, par.id, par.parents.concat());
          if (!node) {
            return false;
          }
          tmp = this.get_node(node);
          dpc = [];
          dpc.push(node);
          dpc = dpc.concat(tmp.children_d);
          this.trigger("model", {nodes: dpc, parent: par.id});
          par.children_d = par.children_d.concat(dpc);
          for (i = 0, j = par.parents.length; i < j; i++) {
            this._model.data[par.parents[i]].children_d = this._model.data[par.parents[i]].children_d.concat(dpc);
          }
          node = tmp;
          tmp = [];
          for (i = 0, j = par.children.length; i < j; i++) {
            tmp[i >= pos ? i + 1 : i] = par.children[i];
          }
          tmp[pos] = node.id;
          par.children = tmp;
          this.redraw_node(par, true);
          this.trigger("create_node", {node: this.get_node(node), parent: par.id, position: pos});
          if (callback) {
            callback.call(this, this.get_node(node));
          }
          return node.id;
        },
        rename_node: function(obj, val) {
          var t1, t2, old;
          if ($2.isArray(obj)) {
            obj = obj.slice();
            for (t1 = 0, t2 = obj.length; t1 < t2; t1++) {
              this.rename_node(obj[t1], val);
            }
            return true;
          }
          obj = this.get_node(obj);
          if (!obj || obj.id === $2.jstree.root) {
            return false;
          }
          old = obj.text;
          if (!this.check("rename_node", obj, this.get_parent(obj), val)) {
            this.settings.core.error.call(this, this._data.core.last_error);
            return false;
          }
          this.set_text(obj, val);
          this.trigger("rename_node", {node: obj, text: val, old});
          return true;
        },
        delete_node: function(obj) {
          var t1, t2, par, pos, tmp, i, j, k, l, c, top, lft;
          if ($2.isArray(obj)) {
            obj = obj.slice();
            for (t1 = 0, t2 = obj.length; t1 < t2; t1++) {
              this.delete_node(obj[t1]);
            }
            return true;
          }
          obj = this.get_node(obj);
          if (!obj || obj.id === $2.jstree.root) {
            return false;
          }
          par = this.get_node(obj.parent);
          pos = $2.inArray(obj.id, par.children);
          c = false;
          if (!this.check("delete_node", obj, par, pos)) {
            this.settings.core.error.call(this, this._data.core.last_error);
            return false;
          }
          if (pos !== -1) {
            par.children = $2.vakata.array_remove(par.children, pos);
          }
          tmp = obj.children_d.concat([]);
          tmp.push(obj.id);
          for (i = 0, j = obj.parents.length; i < j; i++) {
            this._model.data[obj.parents[i]].children_d = $2.vakata.array_filter(this._model.data[obj.parents[i]].children_d, function(v) {
              return $2.inArray(v, tmp) === -1;
            });
          }
          for (k = 0, l = tmp.length; k < l; k++) {
            if (this._model.data[tmp[k]].state.selected) {
              c = true;
              break;
            }
          }
          if (c) {
            this._data.core.selected = $2.vakata.array_filter(this._data.core.selected, function(v) {
              return $2.inArray(v, tmp) === -1;
            });
          }
          this.trigger("delete_node", {node: obj, parent: par.id});
          if (c) {
            this.trigger("changed", {action: "delete_node", node: obj, selected: this._data.core.selected, parent: par.id});
          }
          for (k = 0, l = tmp.length; k < l; k++) {
            delete this._model.data[tmp[k]];
          }
          if ($2.inArray(this._data.core.focused, tmp) !== -1) {
            this._data.core.focused = null;
            top = this.element[0].scrollTop;
            lft = this.element[0].scrollLeft;
            if (par.id === $2.jstree.root) {
              if (this._model.data[$2.jstree.root].children[0]) {
                this.get_node(this._model.data[$2.jstree.root].children[0], true).children(".jstree-anchor").focus();
              }
            } else {
              this.get_node(par, true).children(".jstree-anchor").focus();
            }
            this.element[0].scrollTop = top;
            this.element[0].scrollLeft = lft;
          }
          this.redraw_node(par, true);
          return true;
        },
        check: function(chk, obj, par, pos, more) {
          obj = obj && obj.id ? obj : this.get_node(obj);
          par = par && par.id ? par : this.get_node(par);
          var tmp = chk.match(/^move_node|copy_node|create_node$/i) ? par : obj, chc = this.settings.core.check_callback;
          if (chk === "move_node" || chk === "copy_node") {
            if ((!more || !more.is_multi) && (chk === "move_node" && $2.inArray(obj.id, par.children) === pos)) {
              this._data.core.last_error = {error: "check", plugin: "core", id: "core_08", reason: "Moving node to its current position", data: JSON.stringify({chk, pos, obj: obj && obj.id ? obj.id : false, par: par && par.id ? par.id : false})};
              return false;
            }
            if ((!more || !more.is_multi) && (obj.id === par.id || chk === "move_node" && $2.inArray(obj.id, par.children) === pos || $2.inArray(par.id, obj.children_d) !== -1)) {
              this._data.core.last_error = {error: "check", plugin: "core", id: "core_01", reason: "Moving parent inside child", data: JSON.stringify({chk, pos, obj: obj && obj.id ? obj.id : false, par: par && par.id ? par.id : false})};
              return false;
            }
          }
          if (tmp && tmp.data) {
            tmp = tmp.data;
          }
          if (tmp && tmp.functions && (tmp.functions[chk] === false || tmp.functions[chk] === true)) {
            if (tmp.functions[chk] === false) {
              this._data.core.last_error = {error: "check", plugin: "core", id: "core_02", reason: "Node data prevents function: " + chk, data: JSON.stringify({chk, pos, obj: obj && obj.id ? obj.id : false, par: par && par.id ? par.id : false})};
            }
            return tmp.functions[chk];
          }
          if (chc === false || $2.isFunction(chc) && chc.call(this, chk, obj, par, pos, more) === false || chc && chc[chk] === false) {
            this._data.core.last_error = {error: "check", plugin: "core", id: "core_03", reason: "User config for core.check_callback prevents function: " + chk, data: JSON.stringify({chk, pos, obj: obj && obj.id ? obj.id : false, par: par && par.id ? par.id : false})};
            return false;
          }
          return true;
        },
        last_error: function() {
          return this._data.core.last_error;
        },
        move_node: function(obj, par, pos, callback, is_loaded, skip_redraw, origin) {
          var t1, t2, old_par, old_pos, new_par, old_ins, is_multi, dpc, tmp, i, j, k, l, p;
          par = this.get_node(par);
          pos = pos === undefined2 ? 0 : pos;
          if (!par) {
            return false;
          }
          if (!pos.toString().match(/^(before|after)$/) && !is_loaded && !this.is_loaded(par)) {
            return this.load_node(par, function() {
              this.move_node(obj, par, pos, callback, true, false, origin);
            });
          }
          if ($2.isArray(obj)) {
            if (obj.length === 1) {
              obj = obj[0];
            } else {
              for (t1 = 0, t2 = obj.length; t1 < t2; t1++) {
                if (tmp = this.move_node(obj[t1], par, pos, callback, is_loaded, false, origin)) {
                  par = tmp;
                  pos = "after";
                }
              }
              this.redraw();
              return true;
            }
          }
          obj = obj && obj.id ? obj : this.get_node(obj);
          if (!obj || obj.id === $2.jstree.root) {
            return false;
          }
          old_par = (obj.parent || $2.jstree.root).toString();
          new_par = !pos.toString().match(/^(before|after)$/) || par.id === $2.jstree.root ? par : this.get_node(par.parent);
          old_ins = origin ? origin : this._model.data[obj.id] ? this : $2.jstree.reference(obj.id);
          is_multi = !old_ins || !old_ins._id || this._id !== old_ins._id;
          old_pos = old_ins && old_ins._id && old_par && old_ins._model.data[old_par] && old_ins._model.data[old_par].children ? $2.inArray(obj.id, old_ins._model.data[old_par].children) : -1;
          if (old_ins && old_ins._id) {
            obj = old_ins._model.data[obj.id];
          }
          if (is_multi) {
            if (tmp = this.copy_node(obj, par, pos, callback, is_loaded, false, origin)) {
              if (old_ins) {
                old_ins.delete_node(obj);
              }
              return tmp;
            }
            return false;
          }
          if (par.id === $2.jstree.root) {
            if (pos === "before") {
              pos = "first";
            }
            if (pos === "after") {
              pos = "last";
            }
          }
          switch (pos) {
            case "before":
              pos = $2.inArray(par.id, new_par.children);
              break;
            case "after":
              pos = $2.inArray(par.id, new_par.children) + 1;
              break;
            case "inside":
            case "first":
              pos = 0;
              break;
            case "last":
              pos = new_par.children.length;
              break;
            default:
              if (!pos) {
                pos = 0;
              }
              break;
          }
          if (pos > new_par.children.length) {
            pos = new_par.children.length;
          }
          if (!this.check("move_node", obj, new_par, pos, {core: true, origin, is_multi: old_ins && old_ins._id && old_ins._id !== this._id, is_foreign: !old_ins || !old_ins._id})) {
            this.settings.core.error.call(this, this._data.core.last_error);
            return false;
          }
          if (obj.parent === new_par.id) {
            dpc = new_par.children.concat();
            tmp = $2.inArray(obj.id, dpc);
            if (tmp !== -1) {
              dpc = $2.vakata.array_remove(dpc, tmp);
              if (pos > tmp) {
                pos--;
              }
            }
            tmp = [];
            for (i = 0, j = dpc.length; i < j; i++) {
              tmp[i >= pos ? i + 1 : i] = dpc[i];
            }
            tmp[pos] = obj.id;
            new_par.children = tmp;
            this._node_changed(new_par.id);
            this.redraw(new_par.id === $2.jstree.root);
          } else {
            tmp = obj.children_d.concat();
            tmp.push(obj.id);
            for (i = 0, j = obj.parents.length; i < j; i++) {
              dpc = [];
              p = old_ins._model.data[obj.parents[i]].children_d;
              for (k = 0, l = p.length; k < l; k++) {
                if ($2.inArray(p[k], tmp) === -1) {
                  dpc.push(p[k]);
                }
              }
              old_ins._model.data[obj.parents[i]].children_d = dpc;
            }
            old_ins._model.data[old_par].children = $2.vakata.array_remove_item(old_ins._model.data[old_par].children, obj.id);
            for (i = 0, j = new_par.parents.length; i < j; i++) {
              this._model.data[new_par.parents[i]].children_d = this._model.data[new_par.parents[i]].children_d.concat(tmp);
            }
            dpc = [];
            for (i = 0, j = new_par.children.length; i < j; i++) {
              dpc[i >= pos ? i + 1 : i] = new_par.children[i];
            }
            dpc[pos] = obj.id;
            new_par.children = dpc;
            new_par.children_d.push(obj.id);
            new_par.children_d = new_par.children_d.concat(obj.children_d);
            obj.parent = new_par.id;
            tmp = new_par.parents.concat();
            tmp.unshift(new_par.id);
            p = obj.parents.length;
            obj.parents = tmp;
            tmp = tmp.concat();
            for (i = 0, j = obj.children_d.length; i < j; i++) {
              this._model.data[obj.children_d[i]].parents = this._model.data[obj.children_d[i]].parents.slice(0, p * -1);
              Array.prototype.push.apply(this._model.data[obj.children_d[i]].parents, tmp);
            }
            if (old_par === $2.jstree.root || new_par.id === $2.jstree.root) {
              this._model.force_full_redraw = true;
            }
            if (!this._model.force_full_redraw) {
              this._node_changed(old_par);
              this._node_changed(new_par.id);
            }
            if (!skip_redraw) {
              this.redraw();
            }
          }
          if (callback) {
            callback.call(this, obj, new_par, pos);
          }
          this.trigger("move_node", {node: obj, parent: new_par.id, position: pos, old_parent: old_par, old_position: old_pos, is_multi: old_ins && old_ins._id && old_ins._id !== this._id, is_foreign: !old_ins || !old_ins._id, old_instance: old_ins, new_instance: this});
          return obj.id;
        },
        copy_node: function(obj, par, pos, callback, is_loaded, skip_redraw, origin) {
          var t1, t2, dpc, tmp, i, j, node, old_par, new_par, old_ins, is_multi;
          par = this.get_node(par);
          pos = pos === undefined2 ? 0 : pos;
          if (!par) {
            return false;
          }
          if (!pos.toString().match(/^(before|after)$/) && !is_loaded && !this.is_loaded(par)) {
            return this.load_node(par, function() {
              this.copy_node(obj, par, pos, callback, true, false, origin);
            });
          }
          if ($2.isArray(obj)) {
            if (obj.length === 1) {
              obj = obj[0];
            } else {
              for (t1 = 0, t2 = obj.length; t1 < t2; t1++) {
                if (tmp = this.copy_node(obj[t1], par, pos, callback, is_loaded, true, origin)) {
                  par = tmp;
                  pos = "after";
                }
              }
              this.redraw();
              return true;
            }
          }
          obj = obj && obj.id ? obj : this.get_node(obj);
          if (!obj || obj.id === $2.jstree.root) {
            return false;
          }
          old_par = (obj.parent || $2.jstree.root).toString();
          new_par = !pos.toString().match(/^(before|after)$/) || par.id === $2.jstree.root ? par : this.get_node(par.parent);
          old_ins = origin ? origin : this._model.data[obj.id] ? this : $2.jstree.reference(obj.id);
          is_multi = !old_ins || !old_ins._id || this._id !== old_ins._id;
          if (old_ins && old_ins._id) {
            obj = old_ins._model.data[obj.id];
          }
          if (par.id === $2.jstree.root) {
            if (pos === "before") {
              pos = "first";
            }
            if (pos === "after") {
              pos = "last";
            }
          }
          switch (pos) {
            case "before":
              pos = $2.inArray(par.id, new_par.children);
              break;
            case "after":
              pos = $2.inArray(par.id, new_par.children) + 1;
              break;
            case "inside":
            case "first":
              pos = 0;
              break;
            case "last":
              pos = new_par.children.length;
              break;
            default:
              if (!pos) {
                pos = 0;
              }
              break;
          }
          if (pos > new_par.children.length) {
            pos = new_par.children.length;
          }
          if (!this.check("copy_node", obj, new_par, pos, {core: true, origin, is_multi: old_ins && old_ins._id && old_ins._id !== this._id, is_foreign: !old_ins || !old_ins._id})) {
            this.settings.core.error.call(this, this._data.core.last_error);
            return false;
          }
          node = old_ins ? old_ins.get_json(obj, {no_id: true, no_data: true, no_state: true}) : obj;
          if (!node) {
            return false;
          }
          if (node.id === true) {
            delete node.id;
          }
          node = this._parse_model_from_json(node, new_par.id, new_par.parents.concat());
          if (!node) {
            return false;
          }
          tmp = this.get_node(node);
          if (obj && obj.state && obj.state.loaded === false) {
            tmp.state.loaded = false;
          }
          dpc = [];
          dpc.push(node);
          dpc = dpc.concat(tmp.children_d);
          this.trigger("model", {nodes: dpc, parent: new_par.id});
          for (i = 0, j = new_par.parents.length; i < j; i++) {
            this._model.data[new_par.parents[i]].children_d = this._model.data[new_par.parents[i]].children_d.concat(dpc);
          }
          dpc = [];
          for (i = 0, j = new_par.children.length; i < j; i++) {
            dpc[i >= pos ? i + 1 : i] = new_par.children[i];
          }
          dpc[pos] = tmp.id;
          new_par.children = dpc;
          new_par.children_d.push(tmp.id);
          new_par.children_d = new_par.children_d.concat(tmp.children_d);
          if (new_par.id === $2.jstree.root) {
            this._model.force_full_redraw = true;
          }
          if (!this._model.force_full_redraw) {
            this._node_changed(new_par.id);
          }
          if (!skip_redraw) {
            this.redraw(new_par.id === $2.jstree.root);
          }
          if (callback) {
            callback.call(this, tmp, new_par, pos);
          }
          this.trigger("copy_node", {node: tmp, original: obj, parent: new_par.id, position: pos, old_parent: old_par, old_position: old_ins && old_ins._id && old_par && old_ins._model.data[old_par] && old_ins._model.data[old_par].children ? $2.inArray(obj.id, old_ins._model.data[old_par].children) : -1, is_multi: old_ins && old_ins._id && old_ins._id !== this._id, is_foreign: !old_ins || !old_ins._id, old_instance: old_ins, new_instance: this});
          return tmp.id;
        },
        cut: function(obj) {
          if (!obj) {
            obj = this._data.core.selected.concat();
          }
          if (!$2.isArray(obj)) {
            obj = [obj];
          }
          if (!obj.length) {
            return false;
          }
          var tmp = [], o, t1, t2;
          for (t1 = 0, t2 = obj.length; t1 < t2; t1++) {
            o = this.get_node(obj[t1]);
            if (o && o.id && o.id !== $2.jstree.root) {
              tmp.push(o);
            }
          }
          if (!tmp.length) {
            return false;
          }
          ccp_node = tmp;
          ccp_inst = this;
          ccp_mode = "move_node";
          this.trigger("cut", {node: obj});
        },
        copy: function(obj) {
          if (!obj) {
            obj = this._data.core.selected.concat();
          }
          if (!$2.isArray(obj)) {
            obj = [obj];
          }
          if (!obj.length) {
            return false;
          }
          var tmp = [], o, t1, t2;
          for (t1 = 0, t2 = obj.length; t1 < t2; t1++) {
            o = this.get_node(obj[t1]);
            if (o && o.id && o.id !== $2.jstree.root) {
              tmp.push(o);
            }
          }
          if (!tmp.length) {
            return false;
          }
          ccp_node = tmp;
          ccp_inst = this;
          ccp_mode = "copy_node";
          this.trigger("copy", {node: obj});
        },
        get_buffer: function() {
          return {mode: ccp_mode, node: ccp_node, inst: ccp_inst};
        },
        can_paste: function() {
          return ccp_mode !== false && ccp_node !== false;
        },
        paste: function(obj, pos) {
          obj = this.get_node(obj);
          if (!obj || !ccp_mode || !ccp_mode.match(/^(copy_node|move_node)$/) || !ccp_node) {
            return false;
          }
          if (this[ccp_mode](ccp_node, obj, pos, false, false, false, ccp_inst)) {
            this.trigger("paste", {parent: obj.id, node: ccp_node, mode: ccp_mode});
          }
          ccp_node = false;
          ccp_mode = false;
          ccp_inst = false;
        },
        clear_buffer: function() {
          ccp_node = false;
          ccp_mode = false;
          ccp_inst = false;
          this.trigger("clear_buffer");
        },
        edit: function(obj, default_text, callback) {
          var rtl, w, a, s, t, h1, h2, fn, tmp, cancel = false;
          obj = this.get_node(obj);
          if (!obj) {
            return false;
          }
          if (!this.check("edit", obj, this.get_parent(obj))) {
            this.settings.core.error.call(this, this._data.core.last_error);
            return false;
          }
          tmp = obj;
          default_text = typeof default_text === "string" ? default_text : obj.text;
          this.set_text(obj, "");
          obj = this._open_to(obj);
          tmp.text = default_text;
          rtl = this._data.core.rtl;
          w = this.element.width();
          this._data.core.focused = tmp.id;
          a = obj.children(".jstree-anchor").focus();
          s = $2("<span></span>");
          /*!
          oi = obj.children("i:visible"),
          ai = a.children("i:visible"),
          w1 = oi.width() * oi.length,
          w2 = ai.width() * ai.length,
          */
          t = default_text;
          h1 = $2("<div></div>", {css: {position: "absolute", top: "-200px", left: rtl ? "0px" : "-1000px", visibility: "hidden"}}).appendTo(document2.body);
          h2 = $2("<input />", {
            value: t,
            class: "jstree-rename-input",
            css: {
              padding: "0",
              border: "1px solid silver",
              "box-sizing": "border-box",
              display: "inline-block",
              height: this._data.core.li_height + "px",
              lineHeight: this._data.core.li_height + "px",
              width: "150px"
            },
            blur: $2.proxy(function(e) {
              e.stopImmediatePropagation();
              e.preventDefault();
              var i = s.children(".jstree-rename-input"), v = i.val(), f = this.settings.core.force_text, nv;
              if (v === "") {
                v = t;
              }
              h1.remove();
              s.replaceWith(a);
              s.remove();
              t = f ? t : $2("<div></div>").append($2.parseHTML(t)).html();
              obj = this.get_node(obj);
              this.set_text(obj, t);
              nv = !!this.rename_node(obj, f ? $2("<div></div>").text(v).text() : $2("<div></div>").append($2.parseHTML(v)).html());
              if (!nv) {
                this.set_text(obj, t);
              }
              this._data.core.focused = tmp.id;
              setTimeout($2.proxy(function() {
                var node = this.get_node(tmp.id, true);
                if (node.length) {
                  this._data.core.focused = tmp.id;
                  node.children(".jstree-anchor").focus();
                }
              }, this), 0);
              if (callback) {
                callback.call(this, tmp, nv, cancel, v);
              }
              h2 = null;
            }, this),
            keydown: function(e) {
              var key = e.which;
              if (key === 27) {
                cancel = true;
                this.value = t;
              }
              if (key === 27 || key === 13 || key === 37 || key === 38 || key === 39 || key === 40 || key === 32) {
                e.stopImmediatePropagation();
              }
              if (key === 27 || key === 13) {
                e.preventDefault();
                this.blur();
              }
            },
            click: function(e) {
              e.stopImmediatePropagation();
            },
            mousedown: function(e) {
              e.stopImmediatePropagation();
            },
            keyup: function(e) {
              h2.width(Math.min(h1.text("pW" + this.value).width(), w));
            },
            keypress: function(e) {
              if (e.which === 13) {
                return false;
              }
            }
          });
          fn = {
            fontFamily: a.css("fontFamily") || "",
            fontSize: a.css("fontSize") || "",
            fontWeight: a.css("fontWeight") || "",
            fontStyle: a.css("fontStyle") || "",
            fontStretch: a.css("fontStretch") || "",
            fontVariant: a.css("fontVariant") || "",
            letterSpacing: a.css("letterSpacing") || "",
            wordSpacing: a.css("wordSpacing") || ""
          };
          s.attr("class", a.attr("class")).append(a.contents().clone()).append(h2);
          a.replaceWith(s);
          h1.css(fn);
          h2.css(fn).width(Math.min(h1.text("pW" + h2[0].value).width(), w))[0].select();
          $2(document2).one("mousedown.jstree touchstart.jstree dnd_start.vakata", function(e) {
            if (h2 && e.target !== h2) {
              $2(h2).blur();
            }
          });
        },
        set_theme: function(theme_name, theme_url) {
          if (!theme_name) {
            return false;
          }
          if (theme_url === true) {
            var dir = this.settings.core.themes.dir;
            if (!dir) {
              dir = $2.jstree.path + "/themes";
            }
            theme_url = dir + "/" + theme_name + "/style.css";
          }
          if (theme_url && $2.inArray(theme_url, themes_loaded) === -1) {
            $2("head").append('<link rel="stylesheet" href="' + theme_url + '" type="text/css" />');
            themes_loaded.push(theme_url);
          }
          if (this._data.core.themes.name) {
            this.element.removeClass("jstree-" + this._data.core.themes.name);
          }
          this._data.core.themes.name = theme_name;
          this.element.addClass("jstree-" + theme_name);
          this.element[this.settings.core.themes.responsive ? "addClass" : "removeClass"]("jstree-" + theme_name + "-responsive");
          this.trigger("set_theme", {theme: theme_name});
        },
        get_theme: function() {
          return this._data.core.themes.name;
        },
        set_theme_variant: function(variant_name) {
          if (this._data.core.themes.variant) {
            this.element.removeClass("jstree-" + this._data.core.themes.name + "-" + this._data.core.themes.variant);
          }
          this._data.core.themes.variant = variant_name;
          if (variant_name) {
            this.element.addClass("jstree-" + this._data.core.themes.name + "-" + this._data.core.themes.variant);
          }
        },
        get_theme_variant: function() {
          return this._data.core.themes.variant;
        },
        show_stripes: function() {
          this._data.core.themes.stripes = true;
          this.get_container_ul().addClass("jstree-striped");
          this.trigger("show_stripes");
        },
        hide_stripes: function() {
          this._data.core.themes.stripes = false;
          this.get_container_ul().removeClass("jstree-striped");
          this.trigger("hide_stripes");
        },
        toggle_stripes: function() {
          if (this._data.core.themes.stripes) {
            this.hide_stripes();
          } else {
            this.show_stripes();
          }
        },
        show_dots: function() {
          this._data.core.themes.dots = true;
          this.get_container_ul().removeClass("jstree-no-dots");
          this.trigger("show_dots");
        },
        hide_dots: function() {
          this._data.core.themes.dots = false;
          this.get_container_ul().addClass("jstree-no-dots");
          this.trigger("hide_dots");
        },
        toggle_dots: function() {
          if (this._data.core.themes.dots) {
            this.hide_dots();
          } else {
            this.show_dots();
          }
        },
        show_icons: function() {
          this._data.core.themes.icons = true;
          this.get_container_ul().removeClass("jstree-no-icons");
          this.trigger("show_icons");
        },
        hide_icons: function() {
          this._data.core.themes.icons = false;
          this.get_container_ul().addClass("jstree-no-icons");
          this.trigger("hide_icons");
        },
        toggle_icons: function() {
          if (this._data.core.themes.icons) {
            this.hide_icons();
          } else {
            this.show_icons();
          }
        },
        show_ellipsis: function() {
          this._data.core.themes.ellipsis = true;
          this.get_container_ul().addClass("jstree-ellipsis");
          this.trigger("show_ellipsis");
        },
        hide_ellipsis: function() {
          this._data.core.themes.ellipsis = false;
          this.get_container_ul().removeClass("jstree-ellipsis");
          this.trigger("hide_ellipsis");
        },
        toggle_ellipsis: function() {
          if (this._data.core.themes.ellipsis) {
            this.hide_ellipsis();
          } else {
            this.show_ellipsis();
          }
        },
        set_icon: function(obj, icon) {
          var t1, t2, dom, old;
          if ($2.isArray(obj)) {
            obj = obj.slice();
            for (t1 = 0, t2 = obj.length; t1 < t2; t1++) {
              this.set_icon(obj[t1], icon);
            }
            return true;
          }
          obj = this.get_node(obj);
          if (!obj || obj.id === $2.jstree.root) {
            return false;
          }
          old = obj.icon;
          obj.icon = icon === true || icon === null || icon === undefined2 || icon === "" ? true : icon;
          dom = this.get_node(obj, true).children(".jstree-anchor").children(".jstree-themeicon");
          if (icon === false) {
            dom.removeClass("jstree-themeicon-custom " + old).css("background", "").removeAttr("rel");
            this.hide_icon(obj);
          } else if (icon === true || icon === null || icon === undefined2 || icon === "") {
            dom.removeClass("jstree-themeicon-custom " + old).css("background", "").removeAttr("rel");
            if (old === false) {
              this.show_icon(obj);
            }
          } else if (icon.indexOf("/") === -1 && icon.indexOf(".") === -1) {
            dom.removeClass(old).css("background", "");
            dom.addClass(icon + " jstree-themeicon-custom").attr("rel", icon);
            if (old === false) {
              this.show_icon(obj);
            }
          } else {
            dom.removeClass(old).css("background", "");
            dom.addClass("jstree-themeicon-custom").css("background", "url('" + icon + "') center center no-repeat").attr("rel", icon);
            if (old === false) {
              this.show_icon(obj);
            }
          }
          return true;
        },
        get_icon: function(obj) {
          obj = this.get_node(obj);
          return !obj || obj.id === $2.jstree.root ? false : obj.icon;
        },
        hide_icon: function(obj) {
          var t1, t2;
          if ($2.isArray(obj)) {
            obj = obj.slice();
            for (t1 = 0, t2 = obj.length; t1 < t2; t1++) {
              this.hide_icon(obj[t1]);
            }
            return true;
          }
          obj = this.get_node(obj);
          if (!obj || obj === $2.jstree.root) {
            return false;
          }
          obj.icon = false;
          this.get_node(obj, true).children(".jstree-anchor").children(".jstree-themeicon").addClass("jstree-themeicon-hidden");
          return true;
        },
        show_icon: function(obj) {
          var t1, t2, dom;
          if ($2.isArray(obj)) {
            obj = obj.slice();
            for (t1 = 0, t2 = obj.length; t1 < t2; t1++) {
              this.show_icon(obj[t1]);
            }
            return true;
          }
          obj = this.get_node(obj);
          if (!obj || obj === $2.jstree.root) {
            return false;
          }
          dom = this.get_node(obj, true);
          obj.icon = dom.length ? dom.children(".jstree-anchor").children(".jstree-themeicon").attr("rel") : true;
          if (!obj.icon) {
            obj.icon = true;
          }
          dom.children(".jstree-anchor").children(".jstree-themeicon").removeClass("jstree-themeicon-hidden");
          return true;
        }
      };
      $2.vakata = {};
      $2.vakata.attributes = function(node, with_values) {
        node = $2(node)[0];
        var attr = with_values ? {} : [];
        if (node && node.attributes) {
          $2.each(node.attributes, function(i, v) {
            if ($2.inArray(v.name.toLowerCase(), ["style", "contenteditable", "hasfocus", "tabindex"]) !== -1) {
              return;
            }
            if (v.value !== null && $2.vakata.trim(v.value) !== "") {
              if (with_values) {
                attr[v.name] = v.value;
              } else {
                attr.push(v.name);
              }
            }
          });
        }
        return attr;
      };
      $2.vakata.array_unique = function(array) {
        var a = [], i, j, l, o = {};
        for (i = 0, l = array.length; i < l; i++) {
          if (o[array[i]] === undefined2) {
            a.push(array[i]);
            o[array[i]] = true;
          }
        }
        return a;
      };
      $2.vakata.array_remove = function(array, from) {
        array.splice(from, 1);
        return array;
      };
      $2.vakata.array_remove_item = function(array, item) {
        var tmp = $2.inArray(item, array);
        return tmp !== -1 ? $2.vakata.array_remove(array, tmp) : array;
      };
      $2.vakata.array_filter = function(c, a, b, d, e) {
        if (c.filter) {
          return c.filter(a, b);
        }
        d = [];
        for (e in c) {
          if (~~e + "" === e + "" && e >= 0 && a.call(b, c[e], +e, c)) {
            d.push(c[e]);
          }
        }
        return d;
      };
      $2.vakata.trim = function(text) {
        return String.prototype.trim ? String.prototype.trim.call(text.toString()) : text.toString().replace(/^[\s\uFEFF\xA0]+|[\s\uFEFF\xA0]+$/g, "");
      };
      $2.jstree.plugins.changed = function(options, parent) {
        var last = [];
        this.trigger = function(ev, data) {
          var i, j;
          if (!data) {
            data = {};
          }
          if (ev.replace(".jstree", "") === "changed") {
            data.changed = {selected: [], deselected: []};
            var tmp = {};
            for (i = 0, j = last.length; i < j; i++) {
              tmp[last[i]] = 1;
            }
            for (i = 0, j = data.selected.length; i < j; i++) {
              if (!tmp[data.selected[i]]) {
                data.changed.selected.push(data.selected[i]);
              } else {
                tmp[data.selected[i]] = 2;
              }
            }
            for (i = 0, j = last.length; i < j; i++) {
              if (tmp[last[i]] === 1) {
                data.changed.deselected.push(last[i]);
              }
            }
            last = data.selected.slice();
          }
          parent.trigger.call(this, ev, data);
        };
        this.refresh = function(skip_loading, forget_state) {
          last = [];
          return parent.refresh.apply(this, arguments);
        };
      };
      var _i = document2.createElement("I");
      _i.className = "jstree-icon jstree-checkbox";
      _i.setAttribute("role", "presentation");
      $2.jstree.defaults.checkbox = {
        visible: true,
        three_state: true,
        whole_node: true,
        keep_selected_style: true,
        cascade: "",
        tie_selection: true,
        cascade_to_disabled: true,
        cascade_to_hidden: true
      };
      $2.jstree.plugins.checkbox = function(options, parent) {
        this.bind = function() {
          parent.bind.call(this);
          this._data.checkbox.uto = false;
          this._data.checkbox.selected = [];
          if (this.settings.checkbox.three_state) {
            this.settings.checkbox.cascade = "up+down+undetermined";
          }
          this.element.on("init.jstree", $2.proxy(function() {
            this._data.checkbox.visible = this.settings.checkbox.visible;
            if (!this.settings.checkbox.keep_selected_style) {
              this.element.addClass("jstree-checkbox-no-clicked");
            }
            if (this.settings.checkbox.tie_selection) {
              this.element.addClass("jstree-checkbox-selection");
            }
          }, this)).on("loading.jstree", $2.proxy(function() {
            this[this._data.checkbox.visible ? "show_checkboxes" : "hide_checkboxes"]();
          }, this));
          if (this.settings.checkbox.cascade.indexOf("undetermined") !== -1) {
            this.element.on("changed.jstree uncheck_node.jstree check_node.jstree uncheck_all.jstree check_all.jstree move_node.jstree copy_node.jstree redraw.jstree open_node.jstree", $2.proxy(function() {
              if (this._data.checkbox.uto) {
                clearTimeout(this._data.checkbox.uto);
              }
              this._data.checkbox.uto = setTimeout($2.proxy(this._undetermined, this), 50);
            }, this));
          }
          if (!this.settings.checkbox.tie_selection) {
            this.element.on("model.jstree", $2.proxy(function(e, data) {
              var m = this._model.data, p = m[data.parent], dpc = data.nodes, i, j;
              for (i = 0, j = dpc.length; i < j; i++) {
                m[dpc[i]].state.checked = m[dpc[i]].state.checked || m[dpc[i]].original && m[dpc[i]].original.state && m[dpc[i]].original.state.checked;
                if (m[dpc[i]].state.checked) {
                  this._data.checkbox.selected.push(dpc[i]);
                }
              }
            }, this));
          }
          if (this.settings.checkbox.cascade.indexOf("up") !== -1 || this.settings.checkbox.cascade.indexOf("down") !== -1) {
            this.element.on("model.jstree", $2.proxy(function(e, data) {
              var m = this._model.data, p = m[data.parent], dpc = data.nodes, chd = [], c, i, j, k, l, tmp, s = this.settings.checkbox.cascade, t = this.settings.checkbox.tie_selection;
              if (s.indexOf("down") !== -1) {
                if (p.state[t ? "selected" : "checked"]) {
                  for (i = 0, j = dpc.length; i < j; i++) {
                    m[dpc[i]].state[t ? "selected" : "checked"] = true;
                  }
                  this._data[t ? "core" : "checkbox"].selected = this._data[t ? "core" : "checkbox"].selected.concat(dpc);
                } else {
                  for (i = 0, j = dpc.length; i < j; i++) {
                    if (m[dpc[i]].state[t ? "selected" : "checked"]) {
                      for (k = 0, l = m[dpc[i]].children_d.length; k < l; k++) {
                        m[m[dpc[i]].children_d[k]].state[t ? "selected" : "checked"] = true;
                      }
                      this._data[t ? "core" : "checkbox"].selected = this._data[t ? "core" : "checkbox"].selected.concat(m[dpc[i]].children_d);
                    }
                  }
                }
              }
              if (s.indexOf("up") !== -1) {
                for (i = 0, j = p.children_d.length; i < j; i++) {
                  if (!m[p.children_d[i]].children.length) {
                    chd.push(m[p.children_d[i]].parent);
                  }
                }
                chd = $2.vakata.array_unique(chd);
                for (k = 0, l = chd.length; k < l; k++) {
                  p = m[chd[k]];
                  while (p && p.id !== $2.jstree.root) {
                    c = 0;
                    for (i = 0, j = p.children.length; i < j; i++) {
                      c += m[p.children[i]].state[t ? "selected" : "checked"];
                    }
                    if (c === j) {
                      p.state[t ? "selected" : "checked"] = true;
                      this._data[t ? "core" : "checkbox"].selected.push(p.id);
                      tmp = this.get_node(p, true);
                      if (tmp && tmp.length) {
                        tmp.attr("aria-selected", true).children(".jstree-anchor").addClass(t ? "jstree-clicked" : "jstree-checked");
                      }
                    } else {
                      break;
                    }
                    p = this.get_node(p.parent);
                  }
                }
              }
              this._data[t ? "core" : "checkbox"].selected = $2.vakata.array_unique(this._data[t ? "core" : "checkbox"].selected);
            }, this)).on(this.settings.checkbox.tie_selection ? "select_node.jstree" : "check_node.jstree", $2.proxy(function(e, data) {
              var self = this, obj = data.node, m = this._model.data, par = this.get_node(obj.parent), i, j, c, tmp, s = this.settings.checkbox.cascade, t = this.settings.checkbox.tie_selection, sel = {}, cur = this._data[t ? "core" : "checkbox"].selected;
              for (i = 0, j = cur.length; i < j; i++) {
                sel[cur[i]] = true;
              }
              if (s.indexOf("down") !== -1) {
                var selectedIds = this._cascade_new_checked_state(obj.id, true);
                var temp = obj.children_d.concat(obj.id);
                for (i = 0, j = temp.length; i < j; i++) {
                  if (selectedIds.indexOf(temp[i]) > -1) {
                    sel[temp[i]] = true;
                  } else {
                    delete sel[temp[i]];
                  }
                }
              }
              if (s.indexOf("up") !== -1) {
                while (par && par.id !== $2.jstree.root) {
                  c = 0;
                  for (i = 0, j = par.children.length; i < j; i++) {
                    c += m[par.children[i]].state[t ? "selected" : "checked"];
                  }
                  if (c === j) {
                    par.state[t ? "selected" : "checked"] = true;
                    sel[par.id] = true;
                    tmp = this.get_node(par, true);
                    if (tmp && tmp.length) {
                      tmp.attr("aria-selected", true).children(".jstree-anchor").addClass(t ? "jstree-clicked" : "jstree-checked");
                    }
                  } else {
                    break;
                  }
                  par = this.get_node(par.parent);
                }
              }
              cur = [];
              for (i in sel) {
                if (sel.hasOwnProperty(i)) {
                  cur.push(i);
                }
              }
              this._data[t ? "core" : "checkbox"].selected = cur;
            }, this)).on(this.settings.checkbox.tie_selection ? "deselect_all.jstree" : "uncheck_all.jstree", $2.proxy(function(e, data) {
              var obj = this.get_node($2.jstree.root), m = this._model.data, i, j, tmp;
              for (i = 0, j = obj.children_d.length; i < j; i++) {
                tmp = m[obj.children_d[i]];
                if (tmp && tmp.original && tmp.original.state && tmp.original.state.undetermined) {
                  tmp.original.state.undetermined = false;
                }
              }
            }, this)).on(this.settings.checkbox.tie_selection ? "deselect_node.jstree" : "uncheck_node.jstree", $2.proxy(function(e, data) {
              var self = this, obj = data.node, dom = this.get_node(obj, true), i, j, tmp, s = this.settings.checkbox.cascade, t = this.settings.checkbox.tie_selection, cur = this._data[t ? "core" : "checkbox"].selected, sel = {}, stillSelectedIds = [], allIds = obj.children_d.concat(obj.id);
              if (s.indexOf("down") !== -1) {
                var selectedIds = this._cascade_new_checked_state(obj.id, false);
                cur = $2.vakata.array_filter(cur, function(id) {
                  return allIds.indexOf(id) === -1 || selectedIds.indexOf(id) > -1;
                });
              }
              if (s.indexOf("up") !== -1 && cur.indexOf(obj.id) === -1) {
                for (i = 0, j = obj.parents.length; i < j; i++) {
                  tmp = this._model.data[obj.parents[i]];
                  tmp.state[t ? "selected" : "checked"] = false;
                  if (tmp && tmp.original && tmp.original.state && tmp.original.state.undetermined) {
                    tmp.original.state.undetermined = false;
                  }
                  tmp = this.get_node(obj.parents[i], true);
                  if (tmp && tmp.length) {
                    tmp.attr("aria-selected", false).children(".jstree-anchor").removeClass(t ? "jstree-clicked" : "jstree-checked");
                  }
                }
                cur = $2.vakata.array_filter(cur, function(id) {
                  return obj.parents.indexOf(id) === -1;
                });
              }
              this._data[t ? "core" : "checkbox"].selected = cur;
            }, this));
          }
          if (this.settings.checkbox.cascade.indexOf("up") !== -1) {
            this.element.on("delete_node.jstree", $2.proxy(function(e, data) {
              var p = this.get_node(data.parent), m = this._model.data, i, j, c, tmp, t = this.settings.checkbox.tie_selection;
              while (p && p.id !== $2.jstree.root && !p.state[t ? "selected" : "checked"]) {
                c = 0;
                for (i = 0, j = p.children.length; i < j; i++) {
                  c += m[p.children[i]].state[t ? "selected" : "checked"];
                }
                if (j > 0 && c === j) {
                  p.state[t ? "selected" : "checked"] = true;
                  this._data[t ? "core" : "checkbox"].selected.push(p.id);
                  tmp = this.get_node(p, true);
                  if (tmp && tmp.length) {
                    tmp.attr("aria-selected", true).children(".jstree-anchor").addClass(t ? "jstree-clicked" : "jstree-checked");
                  }
                } else {
                  break;
                }
                p = this.get_node(p.parent);
              }
            }, this)).on("move_node.jstree", $2.proxy(function(e, data) {
              var is_multi = data.is_multi, old_par = data.old_parent, new_par = this.get_node(data.parent), m = this._model.data, p, c, i, j, tmp, t = this.settings.checkbox.tie_selection;
              if (!is_multi) {
                p = this.get_node(old_par);
                while (p && p.id !== $2.jstree.root && !p.state[t ? "selected" : "checked"]) {
                  c = 0;
                  for (i = 0, j = p.children.length; i < j; i++) {
                    c += m[p.children[i]].state[t ? "selected" : "checked"];
                  }
                  if (j > 0 && c === j) {
                    p.state[t ? "selected" : "checked"] = true;
                    this._data[t ? "core" : "checkbox"].selected.push(p.id);
                    tmp = this.get_node(p, true);
                    if (tmp && tmp.length) {
                      tmp.attr("aria-selected", true).children(".jstree-anchor").addClass(t ? "jstree-clicked" : "jstree-checked");
                    }
                  } else {
                    break;
                  }
                  p = this.get_node(p.parent);
                }
              }
              p = new_par;
              while (p && p.id !== $2.jstree.root) {
                c = 0;
                for (i = 0, j = p.children.length; i < j; i++) {
                  c += m[p.children[i]].state[t ? "selected" : "checked"];
                }
                if (c === j) {
                  if (!p.state[t ? "selected" : "checked"]) {
                    p.state[t ? "selected" : "checked"] = true;
                    this._data[t ? "core" : "checkbox"].selected.push(p.id);
                    tmp = this.get_node(p, true);
                    if (tmp && tmp.length) {
                      tmp.attr("aria-selected", true).children(".jstree-anchor").addClass(t ? "jstree-clicked" : "jstree-checked");
                    }
                  }
                } else {
                  if (p.state[t ? "selected" : "checked"]) {
                    p.state[t ? "selected" : "checked"] = false;
                    this._data[t ? "core" : "checkbox"].selected = $2.vakata.array_remove_item(this._data[t ? "core" : "checkbox"].selected, p.id);
                    tmp = this.get_node(p, true);
                    if (tmp && tmp.length) {
                      tmp.attr("aria-selected", false).children(".jstree-anchor").removeClass(t ? "jstree-clicked" : "jstree-checked");
                    }
                  } else {
                    break;
                  }
                }
                p = this.get_node(p.parent);
              }
            }, this));
          }
        };
        this.get_undetermined = function(full) {
          if (this.settings.checkbox.cascade.indexOf("undetermined") === -1) {
            return [];
          }
          var i, j, k, l, o = {}, m = this._model.data, t = this.settings.checkbox.tie_selection, s = this._data[t ? "core" : "checkbox"].selected, p = [], tt = this, r = [];
          for (i = 0, j = s.length; i < j; i++) {
            if (m[s[i]] && m[s[i]].parents) {
              for (k = 0, l = m[s[i]].parents.length; k < l; k++) {
                if (o[m[s[i]].parents[k]] !== undefined2) {
                  break;
                }
                if (m[s[i]].parents[k] !== $2.jstree.root) {
                  o[m[s[i]].parents[k]] = true;
                  p.push(m[s[i]].parents[k]);
                }
              }
            }
          }
          this.element.find(".jstree-closed").not(":has(.jstree-children)").each(function() {
            var tmp = tt.get_node(this), tmp2;
            if (!tmp) {
              return;
            }
            if (!tmp.state.loaded) {
              if (tmp.original && tmp.original.state && tmp.original.state.undetermined && tmp.original.state.undetermined === true) {
                if (o[tmp.id] === undefined2 && tmp.id !== $2.jstree.root) {
                  o[tmp.id] = true;
                  p.push(tmp.id);
                }
                for (k = 0, l = tmp.parents.length; k < l; k++) {
                  if (o[tmp.parents[k]] === undefined2 && tmp.parents[k] !== $2.jstree.root) {
                    o[tmp.parents[k]] = true;
                    p.push(tmp.parents[k]);
                  }
                }
              }
            } else {
              for (i = 0, j = tmp.children_d.length; i < j; i++) {
                tmp2 = m[tmp.children_d[i]];
                if (!tmp2.state.loaded && tmp2.original && tmp2.original.state && tmp2.original.state.undetermined && tmp2.original.state.undetermined === true) {
                  if (o[tmp2.id] === undefined2 && tmp2.id !== $2.jstree.root) {
                    o[tmp2.id] = true;
                    p.push(tmp2.id);
                  }
                  for (k = 0, l = tmp2.parents.length; k < l; k++) {
                    if (o[tmp2.parents[k]] === undefined2 && tmp2.parents[k] !== $2.jstree.root) {
                      o[tmp2.parents[k]] = true;
                      p.push(tmp2.parents[k]);
                    }
                  }
                }
              }
            }
          });
          for (i = 0, j = p.length; i < j; i++) {
            if (!m[p[i]].state[t ? "selected" : "checked"]) {
              r.push(full ? m[p[i]] : p[i]);
            }
          }
          return r;
        };
        this._undetermined = function() {
          if (this.element === null) {
            return;
          }
          var p = this.get_undetermined(false), i, j, s;
          this.element.find(".jstree-undetermined").removeClass("jstree-undetermined");
          for (i = 0, j = p.length; i < j; i++) {
            s = this.get_node(p[i], true);
            if (s && s.length) {
              s.children(".jstree-anchor").children(".jstree-checkbox").addClass("jstree-undetermined");
            }
          }
        };
        this.redraw_node = function(obj, deep, is_callback, force_render) {
          obj = parent.redraw_node.apply(this, arguments);
          if (obj) {
            var i, j, tmp = null, icon = null;
            for (i = 0, j = obj.childNodes.length; i < j; i++) {
              if (obj.childNodes[i] && obj.childNodes[i].className && obj.childNodes[i].className.indexOf("jstree-anchor") !== -1) {
                tmp = obj.childNodes[i];
                break;
              }
            }
            if (tmp) {
              if (!this.settings.checkbox.tie_selection && this._model.data[obj.id].state.checked) {
                tmp.className += " jstree-checked";
              }
              icon = _i.cloneNode(false);
              if (this._model.data[obj.id].state.checkbox_disabled) {
                icon.className += " jstree-checkbox-disabled";
              }
              tmp.insertBefore(icon, tmp.childNodes[0]);
            }
          }
          if (!is_callback && this.settings.checkbox.cascade.indexOf("undetermined") !== -1) {
            if (this._data.checkbox.uto) {
              clearTimeout(this._data.checkbox.uto);
            }
            this._data.checkbox.uto = setTimeout($2.proxy(this._undetermined, this), 50);
          }
          return obj;
        };
        this.show_checkboxes = function() {
          this._data.core.themes.checkboxes = true;
          this.get_container_ul().removeClass("jstree-no-checkboxes");
        };
        this.hide_checkboxes = function() {
          this._data.core.themes.checkboxes = false;
          this.get_container_ul().addClass("jstree-no-checkboxes");
        };
        this.toggle_checkboxes = function() {
          if (this._data.core.themes.checkboxes) {
            this.hide_checkboxes();
          } else {
            this.show_checkboxes();
          }
        };
        this.is_undetermined = function(obj) {
          obj = this.get_node(obj);
          var s = this.settings.checkbox.cascade, i, j, t = this.settings.checkbox.tie_selection, d = this._data[t ? "core" : "checkbox"].selected, m = this._model.data;
          if (!obj || obj.state[t ? "selected" : "checked"] === true || s.indexOf("undetermined") === -1 || s.indexOf("down") === -1 && s.indexOf("up") === -1) {
            return false;
          }
          if (!obj.state.loaded && obj.original.state.undetermined === true) {
            return true;
          }
          for (i = 0, j = obj.children_d.length; i < j; i++) {
            if ($2.inArray(obj.children_d[i], d) !== -1 || !m[obj.children_d[i]].state.loaded && m[obj.children_d[i]].original.state.undetermined) {
              return true;
            }
          }
          return false;
        };
        this.disable_checkbox = function(obj) {
          var t1, t2, dom;
          if ($2.isArray(obj)) {
            obj = obj.slice();
            for (t1 = 0, t2 = obj.length; t1 < t2; t1++) {
              this.disable_checkbox(obj[t1]);
            }
            return true;
          }
          obj = this.get_node(obj);
          if (!obj || obj.id === $2.jstree.root) {
            return false;
          }
          dom = this.get_node(obj, true);
          if (!obj.state.checkbox_disabled) {
            obj.state.checkbox_disabled = true;
            if (dom && dom.length) {
              dom.children(".jstree-anchor").children(".jstree-checkbox").addClass("jstree-checkbox-disabled");
            }
            this.trigger("disable_checkbox", {node: obj});
          }
        };
        this.enable_checkbox = function(obj) {
          var t1, t2, dom;
          if ($2.isArray(obj)) {
            obj = obj.slice();
            for (t1 = 0, t2 = obj.length; t1 < t2; t1++) {
              this.enable_checkbox(obj[t1]);
            }
            return true;
          }
          obj = this.get_node(obj);
          if (!obj || obj.id === $2.jstree.root) {
            return false;
          }
          dom = this.get_node(obj, true);
          if (obj.state.checkbox_disabled) {
            obj.state.checkbox_disabled = false;
            if (dom && dom.length) {
              dom.children(".jstree-anchor").children(".jstree-checkbox").removeClass("jstree-checkbox-disabled");
            }
            this.trigger("enable_checkbox", {node: obj});
          }
        };
        this.activate_node = function(obj, e) {
          if ($2(e.target).hasClass("jstree-checkbox-disabled")) {
            return false;
          }
          if (this.settings.checkbox.tie_selection && (this.settings.checkbox.whole_node || $2(e.target).hasClass("jstree-checkbox"))) {
            e.ctrlKey = true;
          }
          if (this.settings.checkbox.tie_selection || !this.settings.checkbox.whole_node && !$2(e.target).hasClass("jstree-checkbox")) {
            return parent.activate_node.call(this, obj, e);
          }
          if (this.is_disabled(obj)) {
            return false;
          }
          if (this.is_checked(obj)) {
            this.uncheck_node(obj, e);
          } else {
            this.check_node(obj, e);
          }
          this.trigger("activate_node", {node: this.get_node(obj)});
        };
        this._cascade_new_checked_state = function(id, checkedState) {
          var self = this;
          var t = this.settings.checkbox.tie_selection;
          var node = this._model.data[id];
          var selectedNodeIds = [];
          var selectedChildrenIds = [], i, j, selectedChildIds;
          if ((this.settings.checkbox.cascade_to_disabled || !node.state.disabled) && (this.settings.checkbox.cascade_to_hidden || !node.state.hidden)) {
            if (node.children) {
              for (i = 0, j = node.children.length; i < j; i++) {
                var childId = node.children[i];
                selectedChildIds = self._cascade_new_checked_state(childId, checkedState);
                selectedNodeIds = selectedNodeIds.concat(selectedChildIds);
                if (selectedChildIds.indexOf(childId) > -1) {
                  selectedChildrenIds.push(childId);
                }
              }
            }
            var dom = self.get_node(node, true);
            var undetermined = selectedChildrenIds.length > 0 && selectedChildrenIds.length < node.children.length;
            if (node.original && node.original.state && node.original.state.undetermined) {
              node.original.state.undetermined = undetermined;
            }
            if (undetermined) {
              node.state[t ? "selected" : "checked"] = false;
              dom.attr("aria-selected", false).children(".jstree-anchor").removeClass(t ? "jstree-clicked" : "jstree-checked");
            } else if (checkedState && selectedChildrenIds.length === node.children.length) {
              node.state[t ? "selected" : "checked"] = checkedState;
              selectedNodeIds.push(node.id);
              dom.attr("aria-selected", true).children(".jstree-anchor").addClass(t ? "jstree-clicked" : "jstree-checked");
            } else {
              node.state[t ? "selected" : "checked"] = false;
              dom.attr("aria-selected", false).children(".jstree-anchor").removeClass(t ? "jstree-clicked" : "jstree-checked");
            }
          } else {
            selectedChildIds = this.get_checked_descendants(id);
            if (node.state[t ? "selected" : "checked"]) {
              selectedChildIds.push(node.id);
            }
            selectedNodeIds = selectedNodeIds.concat(selectedChildIds);
          }
          return selectedNodeIds;
        };
        this.get_checked_descendants = function(id) {
          var self = this;
          var t = self.settings.checkbox.tie_selection;
          var node = self._model.data[id];
          return $2.vakata.array_filter(node.children_d, function(_id) {
            return self._model.data[_id].state[t ? "selected" : "checked"];
          });
        };
        this.check_node = function(obj, e) {
          if (this.settings.checkbox.tie_selection) {
            return this.select_node(obj, false, true, e);
          }
          var dom, t1, t2, th;
          if ($2.isArray(obj)) {
            obj = obj.slice();
            for (t1 = 0, t2 = obj.length; t1 < t2; t1++) {
              this.check_node(obj[t1], e);
            }
            return true;
          }
          obj = this.get_node(obj);
          if (!obj || obj.id === $2.jstree.root) {
            return false;
          }
          dom = this.get_node(obj, true);
          if (!obj.state.checked) {
            obj.state.checked = true;
            this._data.checkbox.selected.push(obj.id);
            if (dom && dom.length) {
              dom.children(".jstree-anchor").addClass("jstree-checked");
            }
            this.trigger("check_node", {node: obj, selected: this._data.checkbox.selected, event: e});
          }
        };
        this.uncheck_node = function(obj, e) {
          if (this.settings.checkbox.tie_selection) {
            return this.deselect_node(obj, false, e);
          }
          var t1, t2, dom;
          if ($2.isArray(obj)) {
            obj = obj.slice();
            for (t1 = 0, t2 = obj.length; t1 < t2; t1++) {
              this.uncheck_node(obj[t1], e);
            }
            return true;
          }
          obj = this.get_node(obj);
          if (!obj || obj.id === $2.jstree.root) {
            return false;
          }
          dom = this.get_node(obj, true);
          if (obj.state.checked) {
            obj.state.checked = false;
            this._data.checkbox.selected = $2.vakata.array_remove_item(this._data.checkbox.selected, obj.id);
            if (dom.length) {
              dom.children(".jstree-anchor").removeClass("jstree-checked");
            }
            this.trigger("uncheck_node", {node: obj, selected: this._data.checkbox.selected, event: e});
          }
        };
        this.check_all = function() {
          if (this.settings.checkbox.tie_selection) {
            return this.select_all();
          }
          var tmp = this._data.checkbox.selected.concat([]), i, j;
          this._data.checkbox.selected = this._model.data[$2.jstree.root].children_d.concat();
          for (i = 0, j = this._data.checkbox.selected.length; i < j; i++) {
            if (this._model.data[this._data.checkbox.selected[i]]) {
              this._model.data[this._data.checkbox.selected[i]].state.checked = true;
            }
          }
          this.redraw(true);
          this.trigger("check_all", {selected: this._data.checkbox.selected});
        };
        this.uncheck_all = function() {
          if (this.settings.checkbox.tie_selection) {
            return this.deselect_all();
          }
          var tmp = this._data.checkbox.selected.concat([]), i, j;
          for (i = 0, j = this._data.checkbox.selected.length; i < j; i++) {
            if (this._model.data[this._data.checkbox.selected[i]]) {
              this._model.data[this._data.checkbox.selected[i]].state.checked = false;
            }
          }
          this._data.checkbox.selected = [];
          this.element.find(".jstree-checked").removeClass("jstree-checked");
          this.trigger("uncheck_all", {selected: this._data.checkbox.selected, node: tmp});
        };
        this.is_checked = function(obj) {
          if (this.settings.checkbox.tie_selection) {
            return this.is_selected(obj);
          }
          obj = this.get_node(obj);
          if (!obj || obj.id === $2.jstree.root) {
            return false;
          }
          return obj.state.checked;
        };
        this.get_checked = function(full) {
          if (this.settings.checkbox.tie_selection) {
            return this.get_selected(full);
          }
          return full ? $2.map(this._data.checkbox.selected, $2.proxy(function(i) {
            return this.get_node(i);
          }, this)) : this._data.checkbox.selected.slice();
        };
        this.get_top_checked = function(full) {
          if (this.settings.checkbox.tie_selection) {
            return this.get_top_selected(full);
          }
          var tmp = this.get_checked(true), obj = {}, i, j, k, l;
          for (i = 0, j = tmp.length; i < j; i++) {
            obj[tmp[i].id] = tmp[i];
          }
          for (i = 0, j = tmp.length; i < j; i++) {
            for (k = 0, l = tmp[i].children_d.length; k < l; k++) {
              if (obj[tmp[i].children_d[k]]) {
                delete obj[tmp[i].children_d[k]];
              }
            }
          }
          tmp = [];
          for (i in obj) {
            if (obj.hasOwnProperty(i)) {
              tmp.push(i);
            }
          }
          return full ? $2.map(tmp, $2.proxy(function(i2) {
            return this.get_node(i2);
          }, this)) : tmp;
        };
        this.get_bottom_checked = function(full) {
          if (this.settings.checkbox.tie_selection) {
            return this.get_bottom_selected(full);
          }
          var tmp = this.get_checked(true), obj = [], i, j;
          for (i = 0, j = tmp.length; i < j; i++) {
            if (!tmp[i].children.length) {
              obj.push(tmp[i].id);
            }
          }
          return full ? $2.map(obj, $2.proxy(function(i2) {
            return this.get_node(i2);
          }, this)) : obj;
        };
        this.load_node = function(obj, callback) {
          var k, l, i, j, c, tmp;
          if (!$2.isArray(obj) && !this.settings.checkbox.tie_selection) {
            tmp = this.get_node(obj);
            if (tmp && tmp.state.loaded) {
              for (k = 0, l = tmp.children_d.length; k < l; k++) {
                if (this._model.data[tmp.children_d[k]].state.checked) {
                  c = true;
                  this._data.checkbox.selected = $2.vakata.array_remove_item(this._data.checkbox.selected, tmp.children_d[k]);
                }
              }
            }
          }
          return parent.load_node.apply(this, arguments);
        };
        this.get_state = function() {
          var state = parent.get_state.apply(this, arguments);
          if (this.settings.checkbox.tie_selection) {
            return state;
          }
          state.checkbox = this._data.checkbox.selected.slice();
          return state;
        };
        this.set_state = function(state, callback) {
          var res = parent.set_state.apply(this, arguments);
          if (res && state.checkbox) {
            if (!this.settings.checkbox.tie_selection) {
              this.uncheck_all();
              var _this = this;
              $2.each(state.checkbox, function(i, v) {
                _this.check_node(v);
              });
            }
            delete state.checkbox;
            this.set_state(state, callback);
            return false;
          }
          return res;
        };
        this.refresh = function(skip_loading, forget_state) {
          if (this.settings.checkbox.tie_selection) {
            this._data.checkbox.selected = [];
          }
          return parent.refresh.apply(this, arguments);
        };
      };
      $2.jstree.defaults.conditionalselect = function() {
        return true;
      };
      $2.jstree.plugins.conditionalselect = function(options, parent) {
        this.activate_node = function(obj, e) {
          if (this.settings.conditionalselect.call(this, this.get_node(obj), e)) {
            return parent.activate_node.call(this, obj, e);
          }
        };
      };
      $2.jstree.defaults.contextmenu = {
        select_node: true,
        show_at_node: true,
        items: function(o, cb) {
          return {
            create: {
              separator_before: false,
              separator_after: true,
              _disabled: false,
              label: "Create",
              action: function(data) {
                var inst = $2.jstree.reference(data.reference), obj = inst.get_node(data.reference);
                inst.create_node(obj, {}, "last", function(new_node) {
                  try {
                    inst.edit(new_node);
                  } catch (ex) {
                    setTimeout(function() {
                      inst.edit(new_node);
                    }, 0);
                  }
                });
              }
            },
            rename: {
              separator_before: false,
              separator_after: false,
              _disabled: false,
              label: "Rename",
              action: function(data) {
                var inst = $2.jstree.reference(data.reference), obj = inst.get_node(data.reference);
                inst.edit(obj);
              }
            },
            remove: {
              separator_before: false,
              icon: false,
              separator_after: false,
              _disabled: false,
              label: "Delete",
              action: function(data) {
                var inst = $2.jstree.reference(data.reference), obj = inst.get_node(data.reference);
                if (inst.is_selected(obj)) {
                  inst.delete_node(inst.get_selected());
                } else {
                  inst.delete_node(obj);
                }
              }
            },
            ccp: {
              separator_before: true,
              icon: false,
              separator_after: false,
              label: "Edit",
              action: false,
              submenu: {
                cut: {
                  separator_before: false,
                  separator_after: false,
                  label: "Cut",
                  action: function(data) {
                    var inst = $2.jstree.reference(data.reference), obj = inst.get_node(data.reference);
                    if (inst.is_selected(obj)) {
                      inst.cut(inst.get_top_selected());
                    } else {
                      inst.cut(obj);
                    }
                  }
                },
                copy: {
                  separator_before: false,
                  icon: false,
                  separator_after: false,
                  label: "Copy",
                  action: function(data) {
                    var inst = $2.jstree.reference(data.reference), obj = inst.get_node(data.reference);
                    if (inst.is_selected(obj)) {
                      inst.copy(inst.get_top_selected());
                    } else {
                      inst.copy(obj);
                    }
                  }
                },
                paste: {
                  separator_before: false,
                  icon: false,
                  _disabled: function(data) {
                    return !$2.jstree.reference(data.reference).can_paste();
                  },
                  separator_after: false,
                  label: "Paste",
                  action: function(data) {
                    var inst = $2.jstree.reference(data.reference), obj = inst.get_node(data.reference);
                    inst.paste(obj);
                  }
                }
              }
            }
          };
        }
      };
      $2.jstree.plugins.contextmenu = function(options, parent) {
        this.bind = function() {
          parent.bind.call(this);
          var last_ts = 0, cto = null, ex, ey;
          this.element.on("init.jstree loading.jstree ready.jstree", $2.proxy(function() {
            this.get_container_ul().addClass("jstree-contextmenu");
          }, this)).on("contextmenu.jstree", ".jstree-anchor", $2.proxy(function(e, data) {
            if (e.target.tagName.toLowerCase() === "input") {
              return;
            }
            e.preventDefault();
            last_ts = e.ctrlKey ? +new Date() : 0;
            if (data || cto) {
              last_ts = +new Date() + 1e4;
            }
            if (cto) {
              clearTimeout(cto);
            }
            if (!this.is_loading(e.currentTarget)) {
              this.show_contextmenu(e.currentTarget, e.pageX, e.pageY, e);
            }
          }, this)).on("click.jstree", ".jstree-anchor", $2.proxy(function(e) {
            if (this._data.contextmenu.visible && (!last_ts || +new Date() - last_ts > 250)) {
              $2.vakata.context.hide();
            }
            last_ts = 0;
          }, this)).on("touchstart.jstree", ".jstree-anchor", function(e) {
            if (!e.originalEvent || !e.originalEvent.changedTouches || !e.originalEvent.changedTouches[0]) {
              return;
            }
            ex = e.originalEvent.changedTouches[0].clientX;
            ey = e.originalEvent.changedTouches[0].clientY;
            cto = setTimeout(function() {
              $2(e.currentTarget).trigger("contextmenu", true);
            }, 750);
          }).on("touchmove.vakata.jstree", function(e) {
            if (cto && e.originalEvent && e.originalEvent.changedTouches && e.originalEvent.changedTouches[0] && (Math.abs(ex - e.originalEvent.changedTouches[0].clientX) > 10 || Math.abs(ey - e.originalEvent.changedTouches[0].clientY) > 10)) {
              clearTimeout(cto);
              $2.vakata.context.hide();
            }
          }).on("touchend.vakata.jstree", function(e) {
            if (cto) {
              clearTimeout(cto);
            }
          });
          /*!
          if(!('oncontextmenu' in document.body) && ('ontouchstart' in document.body)) {
          	var el = null, tm = null;
          	this.element
          		.on("touchstart", ".jstree-anchor", function (e) {
          			el = e.currentTarget;
          			tm = +new Date();
          			$(document).one("touchend", function (e) {
          				e.target = document.elementFromPoint(e.originalEvent.targetTouches[0].pageX - window.pageXOffset, e.originalEvent.targetTouches[0].pageY - window.pageYOffset);
          				e.currentTarget = e.target;
          				tm = ((+(new Date())) - tm);
          				if(e.target === el && tm > 600 && tm < 1000) {
          					e.preventDefault();
          					$(el).trigger('contextmenu', e);
          				}
          				el = null;
          				tm = null;
          			});
          		});
          }
          */
          $2(document2).on("context_hide.vakata.jstree", $2.proxy(function(e, data) {
            this._data.contextmenu.visible = false;
            $2(data.reference).removeClass("jstree-context");
          }, this));
        };
        this.teardown = function() {
          if (this._data.contextmenu.visible) {
            $2.vakata.context.hide();
          }
          parent.teardown.call(this);
        };
        this.show_contextmenu = function(obj, x, y, e) {
          obj = this.get_node(obj);
          if (!obj || obj.id === $2.jstree.root) {
            return false;
          }
          var s = this.settings.contextmenu, d = this.get_node(obj, true), a = d.children(".jstree-anchor"), o = false, i = false;
          if (s.show_at_node || x === undefined2 || y === undefined2) {
            o = a.offset();
            x = o.left;
            y = o.top + this._data.core.li_height;
          }
          if (this.settings.contextmenu.select_node && !this.is_selected(obj)) {
            this.activate_node(obj, e);
          }
          i = s.items;
          if ($2.isFunction(i)) {
            i = i.call(this, obj, $2.proxy(function(i2) {
              this._show_contextmenu(obj, x, y, i2);
            }, this));
          }
          if ($2.isPlainObject(i)) {
            this._show_contextmenu(obj, x, y, i);
          }
        };
        this._show_contextmenu = function(obj, x, y, i) {
          var d = this.get_node(obj, true), a = d.children(".jstree-anchor");
          $2(document2).one("context_show.vakata.jstree", $2.proxy(function(e, data) {
            var cls = "jstree-contextmenu jstree-" + this.get_theme() + "-contextmenu";
            $2(data.element).addClass(cls);
            a.addClass("jstree-context");
          }, this));
          this._data.contextmenu.visible = true;
          $2.vakata.context.show(a, {x, y}, i);
          this.trigger("show_contextmenu", {node: obj, x, y});
        };
      };
      (function($3) {
        var right_to_left = false, vakata_context = {
          element: false,
          reference: false,
          position_x: 0,
          position_y: 0,
          items: [],
          html: "",
          is_visible: false
        };
        $3.vakata.context = {
          settings: {
            hide_onmouseleave: 0,
            icons: true
          },
          _trigger: function(event_name) {
            $3(document2).triggerHandler("context_" + event_name + ".vakata", {
              reference: vakata_context.reference,
              element: vakata_context.element,
              position: {
                x: vakata_context.position_x,
                y: vakata_context.position_y
              }
            });
          },
          _execute: function(i) {
            i = vakata_context.items[i];
            return i && (!i._disabled || $3.isFunction(i._disabled) && !i._disabled({item: i, reference: vakata_context.reference, element: vakata_context.element})) && i.action ? i.action.call(null, {
              item: i,
              reference: vakata_context.reference,
              element: vakata_context.element,
              position: {
                x: vakata_context.position_x,
                y: vakata_context.position_y
              }
            }) : false;
          },
          _parse: function(o, is_callback) {
            if (!o) {
              return false;
            }
            if (!is_callback) {
              vakata_context.html = "";
              vakata_context.items = [];
            }
            var str = "", sep = false, tmp;
            if (is_callback) {
              str += "<ul>";
            }
            $3.each(o, function(i, val) {
              if (!val) {
                return true;
              }
              vakata_context.items.push(val);
              if (!sep && val.separator_before) {
                str += "<li class='vakata-context-separator'><a href='#' " + ($3.vakata.context.settings.icons ? "" : 'style="margin-left:0px;"') + ">&#160;</a></li>";
              }
              sep = false;
              str += "<li class='" + (val._class || "") + (val._disabled === true || $3.isFunction(val._disabled) && val._disabled({item: val, reference: vakata_context.reference, element: vakata_context.element}) ? " vakata-contextmenu-disabled " : "") + "' " + (val.shortcut ? " data-shortcut='" + val.shortcut + "' " : "") + ">";
              str += "<a href='#' rel='" + (vakata_context.items.length - 1) + "' " + (val.title ? "title='" + val.title + "'" : "") + ">";
              if ($3.vakata.context.settings.icons) {
                str += "<i ";
                if (val.icon) {
                  if (val.icon.indexOf("/") !== -1 || val.icon.indexOf(".") !== -1) {
                    str += ` style='background:url("` + val.icon + `") center center no-repeat' `;
                  } else {
                    str += " class='" + val.icon + "' ";
                  }
                }
                str += "></i><span class='vakata-contextmenu-sep'>&#160;</span>";
              }
              str += ($3.isFunction(val.label) ? val.label({item: i, reference: vakata_context.reference, element: vakata_context.element}) : val.label) + (val.shortcut ? ' <span class="vakata-contextmenu-shortcut vakata-contextmenu-shortcut-' + val.shortcut + '">' + (val.shortcut_label || "") + "</span>" : "") + "</a>";
              if (val.submenu) {
                tmp = $3.vakata.context._parse(val.submenu, true);
                if (tmp) {
                  str += tmp;
                }
              }
              str += "</li>";
              if (val.separator_after) {
                str += "<li class='vakata-context-separator'><a href='#' " + ($3.vakata.context.settings.icons ? "" : 'style="margin-left:0px;"') + ">&#160;</a></li>";
                sep = true;
              }
            });
            str = str.replace(/<li class\='vakata-context-separator'\><\/li\>$/, "");
            if (is_callback) {
              str += "</ul>";
            }
            if (!is_callback) {
              vakata_context.html = str;
              $3.vakata.context._trigger("parse");
            }
            return str.length > 10 ? str : false;
          },
          _show_submenu: function(o) {
            o = $3(o);
            if (!o.length || !o.children("ul").length) {
              return;
            }
            var e = o.children("ul"), xl = o.offset().left, x = xl + o.outerWidth(), y = o.offset().top, w = e.width(), h = e.height(), dw = $3(window).width() + $3(window).scrollLeft(), dh = $3(window).height() + $3(window).scrollTop();
            if (right_to_left) {
              o[x - (w + 10 + o.outerWidth()) < 0 ? "addClass" : "removeClass"]("vakata-context-left");
            } else {
              o[x + w > dw && xl > dw - x ? "addClass" : "removeClass"]("vakata-context-right");
            }
            if (y + h + 10 > dh) {
              e.css("bottom", "-1px");
            }
            if (o.hasClass("vakata-context-right")) {
              if (xl < w) {
                e.css("margin-right", xl - w);
              }
            } else {
              if (dw - x < w) {
                e.css("margin-left", dw - x - w);
              }
            }
            e.show();
          },
          show: function(reference, position, data) {
            var o, e, x, y, w, h, dw, dh, cond = true;
            if (vakata_context.element && vakata_context.element.length) {
              vakata_context.element.width("");
            }
            switch (cond) {
              case (!position && !reference):
                return false;
              case (!!position && !!reference):
                vakata_context.reference = reference;
                vakata_context.position_x = position.x;
                vakata_context.position_y = position.y;
                break;
              case (!position && !!reference):
                vakata_context.reference = reference;
                o = reference.offset();
                vakata_context.position_x = o.left + reference.outerHeight();
                vakata_context.position_y = o.top;
                break;
              case (!!position && !reference):
                vakata_context.position_x = position.x;
                vakata_context.position_y = position.y;
                break;
            }
            if (!!reference && !data && $3(reference).data("vakata_contextmenu")) {
              data = $3(reference).data("vakata_contextmenu");
            }
            if ($3.vakata.context._parse(data)) {
              vakata_context.element.html(vakata_context.html);
            }
            if (vakata_context.items.length) {
              vakata_context.element.appendTo(document2.body);
              e = vakata_context.element;
              x = vakata_context.position_x;
              y = vakata_context.position_y;
              w = e.width();
              h = e.height();
              dw = $3(window).width() + $3(window).scrollLeft();
              dh = $3(window).height() + $3(window).scrollTop();
              if (right_to_left) {
                x -= e.outerWidth() - $3(reference).outerWidth();
                if (x < $3(window).scrollLeft() + 20) {
                  x = $3(window).scrollLeft() + 20;
                }
              }
              if (x + w + 20 > dw) {
                x = dw - (w + 20);
              }
              if (y + h + 20 > dh) {
                y = dh - (h + 20);
              }
              vakata_context.element.css({left: x, top: y}).show().find("a").first().focus().parent().addClass("vakata-context-hover");
              vakata_context.is_visible = true;
              $3.vakata.context._trigger("show");
            }
          },
          hide: function() {
            if (vakata_context.is_visible) {
              vakata_context.element.hide().find("ul").hide().end().find(":focus").blur().end().detach();
              vakata_context.is_visible = false;
              $3.vakata.context._trigger("hide");
            }
          }
        };
        $3(function() {
          right_to_left = $3(document2.body).css("direction") === "rtl";
          var to2 = false;
          vakata_context.element = $3("<ul class='vakata-context'></ul>");
          vakata_context.element.on("mouseenter", "li", function(e) {
            e.stopImmediatePropagation();
            if ($3.contains(this, e.relatedTarget)) {
              return;
            }
            if (to2) {
              clearTimeout(to2);
            }
            vakata_context.element.find(".vakata-context-hover").removeClass("vakata-context-hover").end();
            $3(this).siblings().find("ul").hide().end().end().parentsUntil(".vakata-context", "li").addBack().addClass("vakata-context-hover");
            $3.vakata.context._show_submenu(this);
          }).on("mouseleave", "li", function(e) {
            if ($3.contains(this, e.relatedTarget)) {
              return;
            }
            $3(this).find(".vakata-context-hover").addBack().removeClass("vakata-context-hover");
          }).on("mouseleave", function(e) {
            $3(this).find(".vakata-context-hover").removeClass("vakata-context-hover");
            if ($3.vakata.context.settings.hide_onmouseleave) {
              to2 = setTimeout(function(t) {
                return function() {
                  $3.vakata.context.hide();
                };
              }(this), $3.vakata.context.settings.hide_onmouseleave);
            }
          }).on("click", "a", function(e) {
            e.preventDefault();
            if (!$3(this).blur().parent().hasClass("vakata-context-disabled") && $3.vakata.context._execute($3(this).attr("rel")) !== false) {
              $3.vakata.context.hide();
            }
          }).on("keydown", "a", function(e) {
            var o = null;
            switch (e.which) {
              case 13:
              case 32:
                e.type = "click";
                e.preventDefault();
                $3(e.currentTarget).trigger(e);
                break;
              case 37:
                if (vakata_context.is_visible) {
                  vakata_context.element.find(".vakata-context-hover").last().closest("li").first().find("ul").hide().find(".vakata-context-hover").removeClass("vakata-context-hover").end().end().children("a").focus();
                  e.stopImmediatePropagation();
                  e.preventDefault();
                }
                break;
              case 38:
                if (vakata_context.is_visible) {
                  o = vakata_context.element.find("ul:visible").addBack().last().children(".vakata-context-hover").removeClass("vakata-context-hover").prevAll("li:not(.vakata-context-separator)").first();
                  if (!o.length) {
                    o = vakata_context.element.find("ul:visible").addBack().last().children("li:not(.vakata-context-separator)").last();
                  }
                  o.addClass("vakata-context-hover").children("a").focus();
                  e.stopImmediatePropagation();
                  e.preventDefault();
                }
                break;
              case 39:
                if (vakata_context.is_visible) {
                  vakata_context.element.find(".vakata-context-hover").last().children("ul").show().children("li:not(.vakata-context-separator)").removeClass("vakata-context-hover").first().addClass("vakata-context-hover").children("a").focus();
                  e.stopImmediatePropagation();
                  e.preventDefault();
                }
                break;
              case 40:
                if (vakata_context.is_visible) {
                  o = vakata_context.element.find("ul:visible").addBack().last().children(".vakata-context-hover").removeClass("vakata-context-hover").nextAll("li:not(.vakata-context-separator)").first();
                  if (!o.length) {
                    o = vakata_context.element.find("ul:visible").addBack().last().children("li:not(.vakata-context-separator)").first();
                  }
                  o.addClass("vakata-context-hover").children("a").focus();
                  e.stopImmediatePropagation();
                  e.preventDefault();
                }
                break;
              case 27:
                $3.vakata.context.hide();
                e.preventDefault();
                break;
              default:
                break;
            }
          }).on("keydown", function(e) {
            e.preventDefault();
            var a = vakata_context.element.find(".vakata-contextmenu-shortcut-" + e.which).parent();
            if (a.parent().not(".vakata-context-disabled")) {
              a.click();
            }
          });
          $3(document2).on("mousedown.vakata.jstree", function(e) {
            if (vakata_context.is_visible && vakata_context.element[0] !== e.target && !$3.contains(vakata_context.element[0], e.target)) {
              $3.vakata.context.hide();
            }
          }).on("context_show.vakata.jstree", function(e, data) {
            vakata_context.element.find("li:has(ul)").children("a").addClass("vakata-context-parent");
            if (right_to_left) {
              vakata_context.element.addClass("vakata-context-rtl").css("direction", "rtl");
            }
            vakata_context.element.find("ul").hide().end();
          });
        });
      })($2);
      $2.jstree.defaults.dnd = {
        copy: true,
        open_timeout: 500,
        is_draggable: true,
        check_while_dragging: true,
        always_copy: false,
        inside_pos: 0,
        drag_selection: true,
        touch: true,
        large_drop_target: false,
        large_drag_target: false,
        use_html5: false
      };
      var drg, elm;
      $2.jstree.plugins.dnd = function(options, parent) {
        this.init = function(el, options2) {
          parent.init.call(this, el, options2);
          this.settings.dnd.use_html5 = this.settings.dnd.use_html5 && "draggable" in document2.createElement("span");
        };
        this.bind = function() {
          parent.bind.call(this);
          this.element.on(this.settings.dnd.use_html5 ? "dragstart.jstree" : "mousedown.jstree touchstart.jstree", this.settings.dnd.large_drag_target ? ".jstree-node" : ".jstree-anchor", $2.proxy(function(e) {
            if (this.settings.dnd.large_drag_target && $2(e.target).closest(".jstree-node")[0] !== e.currentTarget) {
              return true;
            }
            if (e.type === "touchstart" && (!this.settings.dnd.touch || this.settings.dnd.touch === "selected" && !$2(e.currentTarget).closest(".jstree-node").children(".jstree-anchor").hasClass("jstree-clicked"))) {
              return true;
            }
            var obj = this.get_node(e.target), mlt = this.is_selected(obj) && this.settings.dnd.drag_selection ? this.get_top_selected().length : 1, txt = mlt > 1 ? mlt + " " + this.get_string("nodes") : this.get_text(e.currentTarget);
            if (this.settings.core.force_text) {
              txt = $2.vakata.html.escape(txt);
            }
            if (obj && obj.id && obj.id !== $2.jstree.root && (e.which === 1 || e.type === "touchstart" || e.type === "dragstart") && (this.settings.dnd.is_draggable === true || $2.isFunction(this.settings.dnd.is_draggable) && this.settings.dnd.is_draggable.call(this, mlt > 1 ? this.get_top_selected(true) : [obj], e))) {
              drg = {jstree: true, origin: this, obj: this.get_node(obj, true), nodes: mlt > 1 ? this.get_top_selected() : [obj.id]};
              elm = e.currentTarget;
              if (this.settings.dnd.use_html5) {
                $2.vakata.dnd._trigger("start", e, {helper: $2(), element: elm, data: drg});
              } else {
                this.element.trigger("mousedown.jstree");
                return $2.vakata.dnd.start(e, drg, '<div id="jstree-dnd" class="jstree-' + this.get_theme() + " jstree-" + this.get_theme() + "-" + this.get_theme_variant() + " " + (this.settings.core.themes.responsive ? " jstree-dnd-responsive" : "") + '"><i class="jstree-icon jstree-er"></i>' + txt + '<ins class="jstree-copy" style="display:none;">+</ins></div>');
              }
            }
          }, this));
          if (this.settings.dnd.use_html5) {
            this.element.on("dragover.jstree", function(e) {
              e.preventDefault();
              $2.vakata.dnd._trigger("move", e, {helper: $2(), element: elm, data: drg});
              return false;
            }).on("drop.jstree", $2.proxy(function(e) {
              e.preventDefault();
              $2.vakata.dnd._trigger("stop", e, {helper: $2(), element: elm, data: drg});
              return false;
            }, this));
          }
        };
        this.redraw_node = function(obj, deep, callback, force_render) {
          obj = parent.redraw_node.apply(this, arguments);
          if (obj && this.settings.dnd.use_html5) {
            if (this.settings.dnd.large_drag_target) {
              obj.setAttribute("draggable", true);
            } else {
              var i, j, tmp = null;
              for (i = 0, j = obj.childNodes.length; i < j; i++) {
                if (obj.childNodes[i] && obj.childNodes[i].className && obj.childNodes[i].className.indexOf("jstree-anchor") !== -1) {
                  tmp = obj.childNodes[i];
                  break;
                }
              }
              if (tmp) {
                tmp.setAttribute("draggable", true);
              }
            }
          }
          return obj;
        };
      };
      $2(function() {
        var lastmv = false, laster = false, lastev = false, opento = false, marker = $2('<div id="jstree-marker">&#160;</div>').hide();
        $2(document2).on("dragover.vakata.jstree", function(e) {
          if (elm) {
            $2.vakata.dnd._trigger("move", e, {helper: $2(), element: elm, data: drg});
          }
        }).on("drop.vakata.jstree", function(e) {
          if (elm) {
            $2.vakata.dnd._trigger("stop", e, {helper: $2(), element: elm, data: drg});
            elm = null;
            drg = null;
          }
        }).on("dnd_start.vakata.jstree", function(e, data) {
          lastmv = false;
          lastev = false;
          if (!data || !data.data || !data.data.jstree) {
            return;
          }
          marker.appendTo(document2.body);
        }).on("dnd_move.vakata.jstree", function(e, data) {
          var isDifferentNode = data.event.target !== lastev.target;
          if (opento) {
            if (!data.event || data.event.type !== "dragover" || isDifferentNode) {
              clearTimeout(opento);
            }
          }
          if (!data || !data.data || !data.data.jstree) {
            return;
          }
          if (data.event.target.id && data.event.target.id === "jstree-marker") {
            return;
          }
          lastev = data.event;
          var ins = $2.jstree.reference(data.event.target), ref = false, off = false, rel = false, tmp, l, t, h, p, i, o, ok, t1, t2, op, ps, pr, ip, tm, is_copy, pn, c;
          if (ins && ins._data && ins._data.dnd) {
            marker.attr("class", "jstree-" + ins.get_theme() + (ins.settings.core.themes.responsive ? " jstree-dnd-responsive" : ""));
            is_copy = data.data.origin && (data.data.origin.settings.dnd.always_copy || data.data.origin.settings.dnd.copy && (data.event.metaKey || data.event.ctrlKey));
            data.helper.children().attr("class", "jstree-" + ins.get_theme() + " jstree-" + ins.get_theme() + "-" + ins.get_theme_variant() + " " + (ins.settings.core.themes.responsive ? " jstree-dnd-responsive" : "")).find(".jstree-copy").first()[is_copy ? "show" : "hide"]();
            if ((data.event.target === ins.element[0] || data.event.target === ins.get_container_ul()[0]) && ins.get_container_ul().children().length === 0) {
              ok = true;
              for (t1 = 0, t2 = data.data.nodes.length; t1 < t2; t1++) {
                ok = ok && ins.check(data.data.origin && (data.data.origin.settings.dnd.always_copy || data.data.origin.settings.dnd.copy && (data.event.metaKey || data.event.ctrlKey)) ? "copy_node" : "move_node", data.data.origin && data.data.origin !== ins ? data.data.origin.get_node(data.data.nodes[t1]) : data.data.nodes[t1], $2.jstree.root, "last", {dnd: true, ref: ins.get_node($2.jstree.root), pos: "i", origin: data.data.origin, is_multi: data.data.origin && data.data.origin !== ins, is_foreign: !data.data.origin});
                if (!ok) {
                  break;
                }
              }
              if (ok) {
                lastmv = {ins, par: $2.jstree.root, pos: "last"};
                marker.hide();
                data.helper.find(".jstree-icon").first().removeClass("jstree-er").addClass("jstree-ok");
                if (data.event.originalEvent && data.event.originalEvent.dataTransfer) {
                  data.event.originalEvent.dataTransfer.dropEffect = is_copy ? "copy" : "move";
                }
                return;
              }
            } else {
              ref = ins.settings.dnd.large_drop_target ? $2(data.event.target).closest(".jstree-node").children(".jstree-anchor") : $2(data.event.target).closest(".jstree-anchor");
              if (ref && ref.length && ref.parent().is(".jstree-closed, .jstree-open, .jstree-leaf")) {
                off = ref.offset();
                rel = (data.event.pageY !== undefined2 ? data.event.pageY : data.event.originalEvent.pageY) - off.top;
                h = ref.outerHeight();
                if (rel < h / 3) {
                  o = ["b", "i", "a"];
                } else if (rel > h - h / 3) {
                  o = ["a", "i", "b"];
                } else {
                  o = rel > h / 2 ? ["i", "a", "b"] : ["i", "b", "a"];
                }
                $2.each(o, function(j, v) {
                  switch (v) {
                    case "b":
                      l = off.left - 6;
                      t = off.top;
                      p = ins.get_parent(ref);
                      i = ref.parent().index();
                      c = "jstree-below";
                      break;
                    case "i":
                      ip = ins.settings.dnd.inside_pos;
                      tm = ins.get_node(ref.parent());
                      l = off.left - 2;
                      t = off.top + h / 2 + 1;
                      p = tm.id;
                      i = ip === "first" ? 0 : ip === "last" ? tm.children.length : Math.min(ip, tm.children.length);
                      c = "jstree-inside";
                      break;
                    case "a":
                      l = off.left - 6;
                      t = off.top + h;
                      p = ins.get_parent(ref);
                      i = ref.parent().index() + 1;
                      c = "jstree-above";
                      break;
                  }
                  ok = true;
                  for (t1 = 0, t2 = data.data.nodes.length; t1 < t2; t1++) {
                    op = data.data.origin && (data.data.origin.settings.dnd.always_copy || data.data.origin.settings.dnd.copy && (data.event.metaKey || data.event.ctrlKey)) ? "copy_node" : "move_node";
                    ps = i;
                    if (op === "move_node" && v === "a" && (data.data.origin && data.data.origin === ins) && p === ins.get_parent(data.data.nodes[t1])) {
                      pr = ins.get_node(p);
                      if (ps > $2.inArray(data.data.nodes[t1], pr.children)) {
                        ps -= 1;
                      }
                    }
                    ok = ok && (ins && ins.settings && ins.settings.dnd && ins.settings.dnd.check_while_dragging === false || ins.check(op, data.data.origin && data.data.origin !== ins ? data.data.origin.get_node(data.data.nodes[t1]) : data.data.nodes[t1], p, ps, {dnd: true, ref: ins.get_node(ref.parent()), pos: v, origin: data.data.origin, is_multi: data.data.origin && data.data.origin !== ins, is_foreign: !data.data.origin}));
                    if (!ok) {
                      if (ins && ins.last_error) {
                        laster = ins.last_error();
                      }
                      break;
                    }
                  }
                  if (v === "i" && ref.parent().is(".jstree-closed") && ins.settings.dnd.open_timeout) {
                    if (!data.event || data.event.type !== "dragover" || isDifferentNode) {
                      if (opento) {
                        clearTimeout(opento);
                      }
                      opento = setTimeout(function(x, z) {
                        return function() {
                          x.open_node(z);
                        };
                      }(ins, ref), ins.settings.dnd.open_timeout);
                    }
                  }
                  if (ok) {
                    pn = ins.get_node(p, true);
                    if (!pn.hasClass(".jstree-dnd-parent")) {
                      $2(".jstree-dnd-parent").removeClass("jstree-dnd-parent");
                      pn.addClass("jstree-dnd-parent");
                    }
                    lastmv = {ins, par: p, pos: v === "i" && ip === "last" && i === 0 && !ins.is_loaded(tm) ? "last" : i};
                    marker.css({left: l + "px", top: t + "px"}).show();
                    marker.removeClass("jstree-above jstree-inside jstree-below").addClass(c);
                    data.helper.find(".jstree-icon").first().removeClass("jstree-er").addClass("jstree-ok");
                    if (data.event.originalEvent && data.event.originalEvent.dataTransfer) {
                      data.event.originalEvent.dataTransfer.dropEffect = is_copy ? "copy" : "move";
                    }
                    laster = {};
                    o = true;
                    return false;
                  }
                });
                if (o === true) {
                  return;
                }
              }
            }
          }
          $2(".jstree-dnd-parent").removeClass("jstree-dnd-parent");
          lastmv = false;
          data.helper.find(".jstree-icon").removeClass("jstree-ok").addClass("jstree-er");
          if (data.event.originalEvent && data.event.originalEvent.dataTransfer) {
          }
          marker.hide();
        }).on("dnd_scroll.vakata.jstree", function(e, data) {
          if (!data || !data.data || !data.data.jstree) {
            return;
          }
          marker.hide();
          lastmv = false;
          lastev = false;
          data.helper.find(".jstree-icon").first().removeClass("jstree-ok").addClass("jstree-er");
        }).on("dnd_stop.vakata.jstree", function(e, data) {
          $2(".jstree-dnd-parent").removeClass("jstree-dnd-parent");
          if (opento) {
            clearTimeout(opento);
          }
          if (!data || !data.data || !data.data.jstree) {
            return;
          }
          marker.hide().detach();
          var i, j, nodes = [];
          if (lastmv) {
            for (i = 0, j = data.data.nodes.length; i < j; i++) {
              nodes[i] = data.data.origin ? data.data.origin.get_node(data.data.nodes[i]) : data.data.nodes[i];
            }
            lastmv.ins[data.data.origin && (data.data.origin.settings.dnd.always_copy || data.data.origin.settings.dnd.copy && (data.event.metaKey || data.event.ctrlKey)) ? "copy_node" : "move_node"](nodes, lastmv.par, lastmv.pos, false, false, false, data.data.origin);
          } else {
            i = $2(data.event.target).closest(".jstree");
            if (i.length && laster && laster.error && laster.error === "check") {
              i = i.jstree(true);
              if (i) {
                i.settings.core.error.call(this, laster);
              }
            }
          }
          lastev = false;
          lastmv = false;
        }).on("keyup.jstree keydown.jstree", function(e, data) {
          data = $2.vakata.dnd._get();
          if (data && data.data && data.data.jstree) {
            if (e.type === "keyup" && e.which === 27) {
              if (opento) {
                clearTimeout(opento);
              }
              lastmv = false;
              laster = false;
              lastev = false;
              opento = false;
              marker.hide().detach();
              $2.vakata.dnd._clean();
            } else {
              data.helper.find(".jstree-copy").first()[data.data.origin && (data.data.origin.settings.dnd.always_copy || data.data.origin.settings.dnd.copy && (e.metaKey || e.ctrlKey)) ? "show" : "hide"]();
              if (lastev) {
                lastev.metaKey = e.metaKey;
                lastev.ctrlKey = e.ctrlKey;
                $2.vakata.dnd._trigger("move", lastev);
              }
            }
          }
        });
      });
      (function($3) {
        $3.vakata.html = {
          div: $3("<div></div>"),
          escape: function(str) {
            return $3.vakata.html.div.text(str).html();
          },
          strip: function(str) {
            return $3.vakata.html.div.empty().append($3.parseHTML(str)).text();
          }
        };
        var vakata_dnd = {
          element: false,
          target: false,
          is_down: false,
          is_drag: false,
          helper: false,
          helper_w: 0,
          data: false,
          init_x: 0,
          init_y: 0,
          scroll_l: 0,
          scroll_t: 0,
          scroll_e: false,
          scroll_i: false,
          is_touch: false
        };
        $3.vakata.dnd = {
          settings: {
            scroll_speed: 10,
            scroll_proximity: 20,
            helper_left: 5,
            helper_top: 10,
            threshold: 5,
            threshold_touch: 10
          },
          _trigger: function(event_name, e, data) {
            if (data === undefined2) {
              data = $3.vakata.dnd._get();
            }
            data.event = e;
            $3(document2).triggerHandler("dnd_" + event_name + ".vakata", data);
          },
          _get: function() {
            return {
              data: vakata_dnd.data,
              element: vakata_dnd.element,
              helper: vakata_dnd.helper
            };
          },
          _clean: function() {
            if (vakata_dnd.helper) {
              vakata_dnd.helper.remove();
            }
            if (vakata_dnd.scroll_i) {
              clearInterval(vakata_dnd.scroll_i);
              vakata_dnd.scroll_i = false;
            }
            vakata_dnd = {
              element: false,
              target: false,
              is_down: false,
              is_drag: false,
              helper: false,
              helper_w: 0,
              data: false,
              init_x: 0,
              init_y: 0,
              scroll_l: 0,
              scroll_t: 0,
              scroll_e: false,
              scroll_i: false,
              is_touch: false
            };
            elm = null;
            $3(document2).off("mousemove.vakata.jstree touchmove.vakata.jstree", $3.vakata.dnd.drag);
            $3(document2).off("mouseup.vakata.jstree touchend.vakata.jstree", $3.vakata.dnd.stop);
          },
          _scroll: function(init_only) {
            if (!vakata_dnd.scroll_e || !vakata_dnd.scroll_l && !vakata_dnd.scroll_t) {
              if (vakata_dnd.scroll_i) {
                clearInterval(vakata_dnd.scroll_i);
                vakata_dnd.scroll_i = false;
              }
              return false;
            }
            if (!vakata_dnd.scroll_i) {
              vakata_dnd.scroll_i = setInterval($3.vakata.dnd._scroll, 100);
              return false;
            }
            if (init_only === true) {
              return false;
            }
            var i = vakata_dnd.scroll_e.scrollTop(), j = vakata_dnd.scroll_e.scrollLeft();
            vakata_dnd.scroll_e.scrollTop(i + vakata_dnd.scroll_t * $3.vakata.dnd.settings.scroll_speed);
            vakata_dnd.scroll_e.scrollLeft(j + vakata_dnd.scroll_l * $3.vakata.dnd.settings.scroll_speed);
            if (i !== vakata_dnd.scroll_e.scrollTop() || j !== vakata_dnd.scroll_e.scrollLeft()) {
              $3.vakata.dnd._trigger("scroll", vakata_dnd.scroll_e);
            }
          },
          start: function(e, data, html) {
            if (e.type === "touchstart" && e.originalEvent && e.originalEvent.changedTouches && e.originalEvent.changedTouches[0]) {
              e.pageX = e.originalEvent.changedTouches[0].pageX;
              e.pageY = e.originalEvent.changedTouches[0].pageY;
              e.target = document2.elementFromPoint(e.originalEvent.changedTouches[0].pageX - window.pageXOffset, e.originalEvent.changedTouches[0].pageY - window.pageYOffset);
            }
            if (vakata_dnd.is_drag) {
              $3.vakata.dnd.stop({});
            }
            try {
              e.currentTarget.unselectable = "on";
              e.currentTarget.onselectstart = function() {
                return false;
              };
              if (e.currentTarget.style) {
                e.currentTarget.style.touchAction = "none";
                e.currentTarget.style.msTouchAction = "none";
                e.currentTarget.style.MozUserSelect = "none";
              }
            } catch (ignore) {
            }
            vakata_dnd.init_x = e.pageX;
            vakata_dnd.init_y = e.pageY;
            vakata_dnd.data = data;
            vakata_dnd.is_down = true;
            vakata_dnd.element = e.currentTarget;
            vakata_dnd.target = e.target;
            vakata_dnd.is_touch = e.type === "touchstart";
            if (html !== false) {
              vakata_dnd.helper = $3("<div id='vakata-dnd'></div>").html(html).css({
                display: "block",
                margin: "0",
                padding: "0",
                position: "absolute",
                top: "-2000px",
                lineHeight: "16px",
                zIndex: "10000"
              });
            }
            $3(document2).on("mousemove.vakata.jstree touchmove.vakata.jstree", $3.vakata.dnd.drag);
            $3(document2).on("mouseup.vakata.jstree touchend.vakata.jstree", $3.vakata.dnd.stop);
            return false;
          },
          drag: function(e) {
            if (e.type === "touchmove" && e.originalEvent && e.originalEvent.changedTouches && e.originalEvent.changedTouches[0]) {
              e.pageX = e.originalEvent.changedTouches[0].pageX;
              e.pageY = e.originalEvent.changedTouches[0].pageY;
              e.target = document2.elementFromPoint(e.originalEvent.changedTouches[0].pageX - window.pageXOffset, e.originalEvent.changedTouches[0].pageY - window.pageYOffset);
            }
            if (!vakata_dnd.is_down) {
              return;
            }
            if (!vakata_dnd.is_drag) {
              if (Math.abs(e.pageX - vakata_dnd.init_x) > (vakata_dnd.is_touch ? $3.vakata.dnd.settings.threshold_touch : $3.vakata.dnd.settings.threshold) || Math.abs(e.pageY - vakata_dnd.init_y) > (vakata_dnd.is_touch ? $3.vakata.dnd.settings.threshold_touch : $3.vakata.dnd.settings.threshold)) {
                if (vakata_dnd.helper) {
                  vakata_dnd.helper.appendTo(document2.body);
                  vakata_dnd.helper_w = vakata_dnd.helper.outerWidth();
                }
                vakata_dnd.is_drag = true;
                $3(vakata_dnd.target).one("click.vakata", false);
                $3.vakata.dnd._trigger("start", e);
              } else {
                return;
              }
            }
            var d = false, w = false, dh = false, wh = false, dw = false, ww = false, dt = false, dl = false, ht = false, hl = false;
            vakata_dnd.scroll_t = 0;
            vakata_dnd.scroll_l = 0;
            vakata_dnd.scroll_e = false;
            $3($3(e.target).parentsUntil("body").addBack().get().reverse()).filter(function() {
              return /^auto|scroll$/.test($3(this).css("overflow")) && (this.scrollHeight > this.offsetHeight || this.scrollWidth > this.offsetWidth);
            }).each(function() {
              var t = $3(this), o = t.offset();
              if (this.scrollHeight > this.offsetHeight) {
                if (o.top + t.height() - e.pageY < $3.vakata.dnd.settings.scroll_proximity) {
                  vakata_dnd.scroll_t = 1;
                }
                if (e.pageY - o.top < $3.vakata.dnd.settings.scroll_proximity) {
                  vakata_dnd.scroll_t = -1;
                }
              }
              if (this.scrollWidth > this.offsetWidth) {
                if (o.left + t.width() - e.pageX < $3.vakata.dnd.settings.scroll_proximity) {
                  vakata_dnd.scroll_l = 1;
                }
                if (e.pageX - o.left < $3.vakata.dnd.settings.scroll_proximity) {
                  vakata_dnd.scroll_l = -1;
                }
              }
              if (vakata_dnd.scroll_t || vakata_dnd.scroll_l) {
                vakata_dnd.scroll_e = $3(this);
                return false;
              }
            });
            if (!vakata_dnd.scroll_e) {
              d = $3(document2);
              w = $3(window);
              dh = d.height();
              wh = w.height();
              dw = d.width();
              ww = w.width();
              dt = d.scrollTop();
              dl = d.scrollLeft();
              if (dh > wh && e.pageY - dt < $3.vakata.dnd.settings.scroll_proximity) {
                vakata_dnd.scroll_t = -1;
              }
              if (dh > wh && wh - (e.pageY - dt) < $3.vakata.dnd.settings.scroll_proximity) {
                vakata_dnd.scroll_t = 1;
              }
              if (dw > ww && e.pageX - dl < $3.vakata.dnd.settings.scroll_proximity) {
                vakata_dnd.scroll_l = -1;
              }
              if (dw > ww && ww - (e.pageX - dl) < $3.vakata.dnd.settings.scroll_proximity) {
                vakata_dnd.scroll_l = 1;
              }
              if (vakata_dnd.scroll_t || vakata_dnd.scroll_l) {
                vakata_dnd.scroll_e = d;
              }
            }
            if (vakata_dnd.scroll_e) {
              $3.vakata.dnd._scroll(true);
            }
            if (vakata_dnd.helper) {
              ht = parseInt(e.pageY + $3.vakata.dnd.settings.helper_top, 10);
              hl = parseInt(e.pageX + $3.vakata.dnd.settings.helper_left, 10);
              if (dh && ht + 25 > dh) {
                ht = dh - 50;
              }
              if (dw && hl + vakata_dnd.helper_w > dw) {
                hl = dw - (vakata_dnd.helper_w + 2);
              }
              vakata_dnd.helper.css({
                left: hl + "px",
                top: ht + "px"
              });
            }
            $3.vakata.dnd._trigger("move", e);
            return false;
          },
          stop: function(e) {
            if (e.type === "touchend" && e.originalEvent && e.originalEvent.changedTouches && e.originalEvent.changedTouches[0]) {
              e.pageX = e.originalEvent.changedTouches[0].pageX;
              e.pageY = e.originalEvent.changedTouches[0].pageY;
              e.target = document2.elementFromPoint(e.originalEvent.changedTouches[0].pageX - window.pageXOffset, e.originalEvent.changedTouches[0].pageY - window.pageYOffset);
            }
            if (vakata_dnd.is_drag) {
              if (e.target !== vakata_dnd.target) {
                $3(vakata_dnd.target).off("click.vakata");
              }
              $3.vakata.dnd._trigger("stop", e);
            } else {
              if (e.type === "touchend" && e.target === vakata_dnd.target) {
                var to2 = setTimeout(function() {
                  $3(e.target).click();
                }, 100);
                $3(e.target).one("click", function() {
                  if (to2) {
                    clearTimeout(to2);
                  }
                });
              }
            }
            $3.vakata.dnd._clean();
            return false;
          }
        };
      })($2);
      $2.jstree.defaults.massload = null;
      $2.jstree.plugins.massload = function(options, parent) {
        this.init = function(el, options2) {
          this._data.massload = {};
          parent.init.call(this, el, options2);
        };
        this._load_nodes = function(nodes, callback, is_callback, force_reload) {
          var s = this.settings.massload, toLoad = [], m = this._model.data, i, j, dom;
          if (!is_callback) {
            for (i = 0, j = nodes.length; i < j; i++) {
              if (!m[nodes[i]] || (!m[nodes[i]].state.loaded && !m[nodes[i]].state.failed || force_reload)) {
                toLoad.push(nodes[i]);
                dom = this.get_node(nodes[i], true);
                if (dom && dom.length) {
                  dom.addClass("jstree-loading").attr("aria-busy", true);
                }
              }
            }
            this._data.massload = {};
            if (toLoad.length) {
              if ($2.isFunction(s)) {
                return s.call(this, toLoad, $2.proxy(function(data) {
                  var i2, j2;
                  if (data) {
                    for (i2 in data) {
                      if (data.hasOwnProperty(i2)) {
                        this._data.massload[i2] = data[i2];
                      }
                    }
                  }
                  for (i2 = 0, j2 = nodes.length; i2 < j2; i2++) {
                    dom = this.get_node(nodes[i2], true);
                    if (dom && dom.length) {
                      dom.removeClass("jstree-loading").attr("aria-busy", false);
                    }
                  }
                  parent._load_nodes.call(this, nodes, callback, is_callback, force_reload);
                }, this));
              }
              if (typeof s === "object" && s && s.url) {
                s = $2.extend(true, {}, s);
                if ($2.isFunction(s.url)) {
                  s.url = s.url.call(this, toLoad);
                }
                if ($2.isFunction(s.data)) {
                  s.data = s.data.call(this, toLoad);
                }
                return $2.ajax(s).done($2.proxy(function(data, t, x) {
                  var i2, j2;
                  if (data) {
                    for (i2 in data) {
                      if (data.hasOwnProperty(i2)) {
                        this._data.massload[i2] = data[i2];
                      }
                    }
                  }
                  for (i2 = 0, j2 = nodes.length; i2 < j2; i2++) {
                    dom = this.get_node(nodes[i2], true);
                    if (dom && dom.length) {
                      dom.removeClass("jstree-loading").attr("aria-busy", false);
                    }
                  }
                  parent._load_nodes.call(this, nodes, callback, is_callback, force_reload);
                }, this)).fail($2.proxy(function(f) {
                  parent._load_nodes.call(this, nodes, callback, is_callback, force_reload);
                }, this));
              }
            }
          }
          return parent._load_nodes.call(this, nodes, callback, is_callback, force_reload);
        };
        this._load_node = function(obj, callback) {
          var data = this._data.massload[obj.id], rslt = null, dom;
          if (data) {
            rslt = this[typeof data === "string" ? "_append_html_data" : "_append_json_data"](obj, typeof data === "string" ? $2($2.parseHTML(data)).filter(function() {
              return this.nodeType !== 3;
            }) : data, function(status) {
              callback.call(this, status);
            });
            dom = this.get_node(obj.id, true);
            if (dom && dom.length) {
              dom.removeClass("jstree-loading").attr("aria-busy", false);
            }
            delete this._data.massload[obj.id];
            return rslt;
          }
          return parent._load_node.call(this, obj, callback);
        };
      };
      $2.jstree.defaults.search = {
        ajax: false,
        fuzzy: false,
        case_sensitive: false,
        show_only_matches: false,
        show_only_matches_children: false,
        close_opened_onclear: true,
        search_leaves_only: false,
        search_callback: false
      };
      $2.jstree.plugins.search = function(options, parent) {
        this.bind = function() {
          parent.bind.call(this);
          this._data.search.str = "";
          this._data.search.dom = $2();
          this._data.search.res = [];
          this._data.search.opn = [];
          this._data.search.som = false;
          this._data.search.smc = false;
          this._data.search.hdn = [];
          this.element.on("search.jstree", $2.proxy(function(e, data) {
            if (this._data.search.som && data.res.length) {
              var m = this._model.data, i, j, p = [], k, l;
              for (i = 0, j = data.res.length; i < j; i++) {
                if (m[data.res[i]] && !m[data.res[i]].state.hidden) {
                  p.push(data.res[i]);
                  p = p.concat(m[data.res[i]].parents);
                  if (this._data.search.smc) {
                    for (k = 0, l = m[data.res[i]].children_d.length; k < l; k++) {
                      if (m[m[data.res[i]].children_d[k]] && !m[m[data.res[i]].children_d[k]].state.hidden) {
                        p.push(m[data.res[i]].children_d[k]);
                      }
                    }
                  }
                }
              }
              p = $2.vakata.array_remove_item($2.vakata.array_unique(p), $2.jstree.root);
              this._data.search.hdn = this.hide_all(true);
              this.show_node(p, true);
              this.redraw(true);
            }
          }, this)).on("clear_search.jstree", $2.proxy(function(e, data) {
            if (this._data.search.som && data.res.length) {
              this.show_node(this._data.search.hdn, true);
              this.redraw(true);
            }
          }, this));
        };
        this.search = function(str, skip_async, show_only_matches, inside, append, show_only_matches_children) {
          if (str === false || $2.vakata.trim(str.toString()) === "") {
            return this.clear_search();
          }
          inside = this.get_node(inside);
          inside = inside && inside.id ? inside.id : null;
          str = str.toString();
          var s = this.settings.search, a = s.ajax ? s.ajax : false, m = this._model.data, f = null, r = [], p = [], i, j;
          if (this._data.search.res.length && !append) {
            this.clear_search();
          }
          if (show_only_matches === undefined2) {
            show_only_matches = s.show_only_matches;
          }
          if (show_only_matches_children === undefined2) {
            show_only_matches_children = s.show_only_matches_children;
          }
          if (!skip_async && a !== false) {
            if ($2.isFunction(a)) {
              return a.call(this, str, $2.proxy(function(d) {
                if (d && d.d) {
                  d = d.d;
                }
                this._load_nodes(!$2.isArray(d) ? [] : $2.vakata.array_unique(d), function() {
                  this.search(str, true, show_only_matches, inside, append, show_only_matches_children);
                });
              }, this), inside);
            } else {
              a = $2.extend({}, a);
              if (!a.data) {
                a.data = {};
              }
              a.data.str = str;
              if (inside) {
                a.data.inside = inside;
              }
              if (this._data.search.lastRequest) {
                this._data.search.lastRequest.abort();
              }
              this._data.search.lastRequest = $2.ajax(a).fail($2.proxy(function() {
                this._data.core.last_error = {error: "ajax", plugin: "search", id: "search_01", reason: "Could not load search parents", data: JSON.stringify(a)};
                this.settings.core.error.call(this, this._data.core.last_error);
              }, this)).done($2.proxy(function(d) {
                if (d && d.d) {
                  d = d.d;
                }
                this._load_nodes(!$2.isArray(d) ? [] : $2.vakata.array_unique(d), function() {
                  this.search(str, true, show_only_matches, inside, append, show_only_matches_children);
                });
              }, this));
              return this._data.search.lastRequest;
            }
          }
          if (!append) {
            this._data.search.str = str;
            this._data.search.dom = $2();
            this._data.search.res = [];
            this._data.search.opn = [];
            this._data.search.som = show_only_matches;
            this._data.search.smc = show_only_matches_children;
          }
          f = new $2.vakata.search(str, true, {caseSensitive: s.case_sensitive, fuzzy: s.fuzzy});
          $2.each(m[inside ? inside : $2.jstree.root].children_d, function(ii, i2) {
            var v = m[i2];
            if (v.text && !v.state.hidden && (!s.search_leaves_only || v.state.loaded && v.children.length === 0) && (s.search_callback && s.search_callback.call(this, str, v) || !s.search_callback && f.search(v.text).isMatch)) {
              r.push(i2);
              p = p.concat(v.parents);
            }
          });
          if (r.length) {
            p = $2.vakata.array_unique(p);
            for (i = 0, j = p.length; i < j; i++) {
              if (p[i] !== $2.jstree.root && m[p[i]] && this.open_node(p[i], null, 0) === true) {
                this._data.search.opn.push(p[i]);
              }
            }
            if (!append) {
              this._data.search.dom = $2(this.element[0].querySelectorAll("#" + $2.map(r, function(v) {
                return "0123456789".indexOf(v[0]) !== -1 ? "\\3" + v[0] + " " + v.substr(1).replace($2.jstree.idregex, "\\$&") : v.replace($2.jstree.idregex, "\\$&");
              }).join(", #")));
              this._data.search.res = r;
            } else {
              this._data.search.dom = this._data.search.dom.add($2(this.element[0].querySelectorAll("#" + $2.map(r, function(v) {
                return "0123456789".indexOf(v[0]) !== -1 ? "\\3" + v[0] + " " + v.substr(1).replace($2.jstree.idregex, "\\$&") : v.replace($2.jstree.idregex, "\\$&");
              }).join(", #"))));
              this._data.search.res = $2.vakata.array_unique(this._data.search.res.concat(r));
            }
            this._data.search.dom.children(".jstree-anchor").addClass("jstree-search");
          }
          this.trigger("search", {nodes: this._data.search.dom, str, res: this._data.search.res, show_only_matches});
        };
        this.clear_search = function() {
          if (this.settings.search.close_opened_onclear) {
            this.close_node(this._data.search.opn, 0);
          }
          this.trigger("clear_search", {nodes: this._data.search.dom, str: this._data.search.str, res: this._data.search.res});
          if (this._data.search.res.length) {
            this._data.search.dom = $2(this.element[0].querySelectorAll("#" + $2.map(this._data.search.res, function(v) {
              return "0123456789".indexOf(v[0]) !== -1 ? "\\3" + v[0] + " " + v.substr(1).replace($2.jstree.idregex, "\\$&") : v.replace($2.jstree.idregex, "\\$&");
            }).join(", #")));
            this._data.search.dom.children(".jstree-anchor").removeClass("jstree-search");
          }
          this._data.search.str = "";
          this._data.search.res = [];
          this._data.search.opn = [];
          this._data.search.dom = $2();
        };
        this.redraw_node = function(obj, deep, callback, force_render) {
          obj = parent.redraw_node.apply(this, arguments);
          if (obj) {
            if ($2.inArray(obj.id, this._data.search.res) !== -1) {
              var i, j, tmp = null;
              for (i = 0, j = obj.childNodes.length; i < j; i++) {
                if (obj.childNodes[i] && obj.childNodes[i].className && obj.childNodes[i].className.indexOf("jstree-anchor") !== -1) {
                  tmp = obj.childNodes[i];
                  break;
                }
              }
              if (tmp) {
                tmp.className += " jstree-search";
              }
            }
          }
          return obj;
        };
      };
      (function($3) {
        $3.vakata.search = function(pattern, txt, options) {
          options = options || {};
          options = $3.extend({}, $3.vakata.search.defaults, options);
          if (options.fuzzy !== false) {
            options.fuzzy = true;
          }
          pattern = options.caseSensitive ? pattern : pattern.toLowerCase();
          var MATCH_LOCATION = options.location, MATCH_DISTANCE = options.distance, MATCH_THRESHOLD = options.threshold, patternLen = pattern.length, matchmask, pattern_alphabet, match_bitapScore, search;
          if (patternLen > 32) {
            options.fuzzy = false;
          }
          if (options.fuzzy) {
            matchmask = 1 << patternLen - 1;
            pattern_alphabet = function() {
              var mask = {}, i = 0;
              for (i = 0; i < patternLen; i++) {
                mask[pattern.charAt(i)] = 0;
              }
              for (i = 0; i < patternLen; i++) {
                mask[pattern.charAt(i)] |= 1 << patternLen - i - 1;
              }
              return mask;
            }();
            match_bitapScore = function(e, x) {
              var accuracy = e / patternLen, proximity = Math.abs(MATCH_LOCATION - x);
              if (!MATCH_DISTANCE) {
                return proximity ? 1 : accuracy;
              }
              return accuracy + proximity / MATCH_DISTANCE;
            };
          }
          search = function(text) {
            text = options.caseSensitive ? text : text.toLowerCase();
            if (pattern === text || text.indexOf(pattern) !== -1) {
              return {
                isMatch: true,
                score: 0
              };
            }
            if (!options.fuzzy) {
              return {
                isMatch: false,
                score: 1
              };
            }
            var i, j, textLen = text.length, scoreThreshold = MATCH_THRESHOLD, bestLoc = text.indexOf(pattern, MATCH_LOCATION), binMin, binMid, binMax = patternLen + textLen, lastRd, start, finish, rd, charMatch, score = 1, locations = [];
            if (bestLoc !== -1) {
              scoreThreshold = Math.min(match_bitapScore(0, bestLoc), scoreThreshold);
              bestLoc = text.lastIndexOf(pattern, MATCH_LOCATION + patternLen);
              if (bestLoc !== -1) {
                scoreThreshold = Math.min(match_bitapScore(0, bestLoc), scoreThreshold);
              }
            }
            bestLoc = -1;
            for (i = 0; i < patternLen; i++) {
              binMin = 0;
              binMid = binMax;
              while (binMin < binMid) {
                if (match_bitapScore(i, MATCH_LOCATION + binMid) <= scoreThreshold) {
                  binMin = binMid;
                } else {
                  binMax = binMid;
                }
                binMid = Math.floor((binMax - binMin) / 2 + binMin);
              }
              binMax = binMid;
              start = Math.max(1, MATCH_LOCATION - binMid + 1);
              finish = Math.min(MATCH_LOCATION + binMid, textLen) + patternLen;
              rd = new Array(finish + 2);
              rd[finish + 1] = (1 << i) - 1;
              for (j = finish; j >= start; j--) {
                charMatch = pattern_alphabet[text.charAt(j - 1)];
                if (i === 0) {
                  rd[j] = (rd[j + 1] << 1 | 1) & charMatch;
                } else {
                  rd[j] = (rd[j + 1] << 1 | 1) & charMatch | ((lastRd[j + 1] | lastRd[j]) << 1 | 1) | lastRd[j + 1];
                }
                if (rd[j] & matchmask) {
                  score = match_bitapScore(i, j - 1);
                  if (score <= scoreThreshold) {
                    scoreThreshold = score;
                    bestLoc = j - 1;
                    locations.push(bestLoc);
                    if (bestLoc > MATCH_LOCATION) {
                      start = Math.max(1, 2 * MATCH_LOCATION - bestLoc);
                    } else {
                      break;
                    }
                  }
                }
              }
              if (match_bitapScore(i + 1, MATCH_LOCATION) > scoreThreshold) {
                break;
              }
              lastRd = rd;
            }
            return {
              isMatch: bestLoc >= 0,
              score
            };
          };
          return txt === true ? {search} : search(txt);
        };
        $3.vakata.search.defaults = {
          location: 0,
          distance: 100,
          threshold: 0.6,
          fuzzy: false,
          caseSensitive: false
        };
      })($2);
      $2.jstree.defaults.sort = function(a, b) {
        return this.get_text(a) > this.get_text(b) ? 1 : -1;
      };
      $2.jstree.plugins.sort = function(options, parent) {
        this.bind = function() {
          parent.bind.call(this);
          this.element.on("model.jstree", $2.proxy(function(e, data) {
            this.sort(data.parent, true);
          }, this)).on("rename_node.jstree create_node.jstree", $2.proxy(function(e, data) {
            this.sort(data.parent || data.node.parent, false);
            this.redraw_node(data.parent || data.node.parent, true);
          }, this)).on("move_node.jstree copy_node.jstree", $2.proxy(function(e, data) {
            this.sort(data.parent, false);
            this.redraw_node(data.parent, true);
          }, this));
        };
        this.sort = function(obj, deep) {
          var i, j;
          obj = this.get_node(obj);
          if (obj && obj.children && obj.children.length) {
            obj.children.sort($2.proxy(this.settings.sort, this));
            if (deep) {
              for (i = 0, j = obj.children_d.length; i < j; i++) {
                this.sort(obj.children_d[i], false);
              }
            }
          }
        };
      };
      var to = false;
      $2.jstree.defaults.state = {
        key: "jstree",
        events: "changed.jstree open_node.jstree close_node.jstree check_node.jstree uncheck_node.jstree",
        ttl: false,
        filter: false,
        preserve_loaded: false
      };
      $2.jstree.plugins.state = function(options, parent) {
        this.bind = function() {
          parent.bind.call(this);
          var bind = $2.proxy(function() {
            this.element.on(this.settings.state.events, $2.proxy(function() {
              if (to) {
                clearTimeout(to);
              }
              to = setTimeout($2.proxy(function() {
                this.save_state();
              }, this), 100);
            }, this));
            this.trigger("state_ready");
          }, this);
          this.element.on("ready.jstree", $2.proxy(function(e, data) {
            this.element.one("restore_state.jstree", bind);
            if (!this.restore_state()) {
              bind();
            }
          }, this));
        };
        this.save_state = function() {
          var tm = this.get_state();
          if (!this.settings.state.preserve_loaded) {
            delete tm.core.loaded;
          }
          var st = {state: tm, ttl: this.settings.state.ttl, sec: +new Date()};
          $2.vakata.storage.set(this.settings.state.key, JSON.stringify(st));
        };
        this.restore_state = function() {
          var k = $2.vakata.storage.get(this.settings.state.key);
          if (!!k) {
            try {
              k = JSON.parse(k);
            } catch (ex) {
              return false;
            }
          }
          if (!!k && k.ttl && k.sec && +new Date() - k.sec > k.ttl) {
            return false;
          }
          if (!!k && k.state) {
            k = k.state;
          }
          if (!!k && $2.isFunction(this.settings.state.filter)) {
            k = this.settings.state.filter.call(this, k);
          }
          if (!!k) {
            if (!this.settings.state.preserve_loaded) {
              delete k.core.loaded;
            }
            this.element.one("set_state.jstree", function(e, data) {
              data.instance.trigger("restore_state", {state: $2.extend(true, {}, k)});
            });
            this.set_state(k);
            return true;
          }
          return false;
        };
        this.clear_state = function() {
          return $2.vakata.storage.del(this.settings.state.key);
        };
      };
      (function($3, undefined3) {
        $3.vakata.storage = {
          set: function(key, val) {
            return window.localStorage.setItem(key, val);
          },
          get: function(key) {
            return window.localStorage.getItem(key);
          },
          del: function(key) {
            return window.localStorage.removeItem(key);
          }
        };
      })($2);
      $2.jstree.defaults.types = {
        default: {}
      };
      $2.jstree.defaults.types[$2.jstree.root] = {};
      $2.jstree.plugins.types = function(options, parent) {
        this.init = function(el, options2) {
          var i, j;
          if (options2 && options2.types && options2.types["default"]) {
            for (i in options2.types) {
              if (i !== "default" && i !== $2.jstree.root && options2.types.hasOwnProperty(i)) {
                for (j in options2.types["default"]) {
                  if (options2.types["default"].hasOwnProperty(j) && options2.types[i][j] === undefined2) {
                    options2.types[i][j] = options2.types["default"][j];
                  }
                }
              }
            }
          }
          parent.init.call(this, el, options2);
          this._model.data[$2.jstree.root].type = $2.jstree.root;
        };
        this.refresh = function(skip_loading, forget_state) {
          parent.refresh.call(this, skip_loading, forget_state);
          this._model.data[$2.jstree.root].type = $2.jstree.root;
        };
        this.bind = function() {
          this.element.on("model.jstree", $2.proxy(function(e, data) {
            var m = this._model.data, dpc = data.nodes, t = this.settings.types, i, j, c = "default", k;
            for (i = 0, j = dpc.length; i < j; i++) {
              c = "default";
              if (m[dpc[i]].original && m[dpc[i]].original.type && t[m[dpc[i]].original.type]) {
                c = m[dpc[i]].original.type;
              }
              if (m[dpc[i]].data && m[dpc[i]].data.jstree && m[dpc[i]].data.jstree.type && t[m[dpc[i]].data.jstree.type]) {
                c = m[dpc[i]].data.jstree.type;
              }
              m[dpc[i]].type = c;
              if (m[dpc[i]].icon === true && t[c].icon !== undefined2) {
                m[dpc[i]].icon = t[c].icon;
              }
              if (t[c].li_attr !== undefined2 && typeof t[c].li_attr === "object") {
                for (k in t[c].li_attr) {
                  if (t[c].li_attr.hasOwnProperty(k)) {
                    if (k === "id") {
                      continue;
                    } else if (m[dpc[i]].li_attr[k] === undefined2) {
                      m[dpc[i]].li_attr[k] = t[c].li_attr[k];
                    } else if (k === "class") {
                      m[dpc[i]].li_attr["class"] = t[c].li_attr["class"] + " " + m[dpc[i]].li_attr["class"];
                    }
                  }
                }
              }
              if (t[c].a_attr !== undefined2 && typeof t[c].a_attr === "object") {
                for (k in t[c].a_attr) {
                  if (t[c].a_attr.hasOwnProperty(k)) {
                    if (k === "id") {
                      continue;
                    } else if (m[dpc[i]].a_attr[k] === undefined2) {
                      m[dpc[i]].a_attr[k] = t[c].a_attr[k];
                    } else if (k === "href" && m[dpc[i]].a_attr[k] === "#") {
                      m[dpc[i]].a_attr["href"] = t[c].a_attr["href"];
                    } else if (k === "class") {
                      m[dpc[i]].a_attr["class"] = t[c].a_attr["class"] + " " + m[dpc[i]].a_attr["class"];
                    }
                  }
                }
              }
            }
            m[$2.jstree.root].type = $2.jstree.root;
          }, this));
          parent.bind.call(this);
        };
        this.get_json = function(obj, options2, flat) {
          var i, j, m = this._model.data, opt = options2 ? $2.extend(true, {}, options2, {no_id: false}) : {}, tmp = parent.get_json.call(this, obj, opt, flat);
          if (tmp === false) {
            return false;
          }
          if ($2.isArray(tmp)) {
            for (i = 0, j = tmp.length; i < j; i++) {
              tmp[i].type = tmp[i].id && m[tmp[i].id] && m[tmp[i].id].type ? m[tmp[i].id].type : "default";
              if (options2 && options2.no_id) {
                delete tmp[i].id;
                if (tmp[i].li_attr && tmp[i].li_attr.id) {
                  delete tmp[i].li_attr.id;
                }
                if (tmp[i].a_attr && tmp[i].a_attr.id) {
                  delete tmp[i].a_attr.id;
                }
              }
            }
          } else {
            tmp.type = tmp.id && m[tmp.id] && m[tmp.id].type ? m[tmp.id].type : "default";
            if (options2 && options2.no_id) {
              tmp = this._delete_ids(tmp);
            }
          }
          return tmp;
        };
        this._delete_ids = function(tmp) {
          if ($2.isArray(tmp)) {
            for (var i = 0, j = tmp.length; i < j; i++) {
              tmp[i] = this._delete_ids(tmp[i]);
            }
            return tmp;
          }
          delete tmp.id;
          if (tmp.li_attr && tmp.li_attr.id) {
            delete tmp.li_attr.id;
          }
          if (tmp.a_attr && tmp.a_attr.id) {
            delete tmp.a_attr.id;
          }
          if (tmp.children && $2.isArray(tmp.children)) {
            tmp.children = this._delete_ids(tmp.children);
          }
          return tmp;
        };
        this.check = function(chk, obj, par, pos, more) {
          if (parent.check.call(this, chk, obj, par, pos, more) === false) {
            return false;
          }
          obj = obj && obj.id ? obj : this.get_node(obj);
          par = par && par.id ? par : this.get_node(par);
          var m = obj && obj.id ? more && more.origin ? more.origin : $2.jstree.reference(obj.id) : null, tmp, d, i, j;
          m = m && m._model && m._model.data ? m._model.data : null;
          switch (chk) {
            case "create_node":
            case "move_node":
            case "copy_node":
              if (chk !== "move_node" || $2.inArray(obj.id, par.children) === -1) {
                tmp = this.get_rules(par);
                if (tmp.max_children !== undefined2 && tmp.max_children !== -1 && tmp.max_children === par.children.length) {
                  this._data.core.last_error = {error: "check", plugin: "types", id: "types_01", reason: "max_children prevents function: " + chk, data: JSON.stringify({chk, pos, obj: obj && obj.id ? obj.id : false, par: par && par.id ? par.id : false})};
                  return false;
                }
                if (tmp.valid_children !== undefined2 && tmp.valid_children !== -1 && $2.inArray(obj.type || "default", tmp.valid_children) === -1) {
                  this._data.core.last_error = {error: "check", plugin: "types", id: "types_02", reason: "valid_children prevents function: " + chk, data: JSON.stringify({chk, pos, obj: obj && obj.id ? obj.id : false, par: par && par.id ? par.id : false})};
                  return false;
                }
                if (m && obj.children_d && obj.parents) {
                  d = 0;
                  for (i = 0, j = obj.children_d.length; i < j; i++) {
                    d = Math.max(d, m[obj.children_d[i]].parents.length);
                  }
                  d = d - obj.parents.length + 1;
                }
                if (d <= 0 || d === undefined2) {
                  d = 1;
                }
                do {
                  if (tmp.max_depth !== undefined2 && tmp.max_depth !== -1 && tmp.max_depth < d) {
                    this._data.core.last_error = {error: "check", plugin: "types", id: "types_03", reason: "max_depth prevents function: " + chk, data: JSON.stringify({chk, pos, obj: obj && obj.id ? obj.id : false, par: par && par.id ? par.id : false})};
                    return false;
                  }
                  par = this.get_node(par.parent);
                  tmp = this.get_rules(par);
                  d++;
                } while (par);
              }
              break;
          }
          return true;
        };
        this.get_rules = function(obj) {
          obj = this.get_node(obj);
          if (!obj) {
            return false;
          }
          var tmp = this.get_type(obj, true);
          if (tmp.max_depth === undefined2) {
            tmp.max_depth = -1;
          }
          if (tmp.max_children === undefined2) {
            tmp.max_children = -1;
          }
          if (tmp.valid_children === undefined2) {
            tmp.valid_children = -1;
          }
          return tmp;
        };
        this.get_type = function(obj, rules) {
          obj = this.get_node(obj);
          return !obj ? false : rules ? $2.extend({type: obj.type}, this.settings.types[obj.type]) : obj.type;
        };
        this.set_type = function(obj, type) {
          var m = this._model.data, t, t1, t2, old_type, old_icon, k, d, a;
          if ($2.isArray(obj)) {
            obj = obj.slice();
            for (t1 = 0, t2 = obj.length; t1 < t2; t1++) {
              this.set_type(obj[t1], type);
            }
            return true;
          }
          t = this.settings.types;
          obj = this.get_node(obj);
          if (!t[type] || !obj) {
            return false;
          }
          d = this.get_node(obj, true);
          if (d && d.length) {
            a = d.children(".jstree-anchor");
          }
          old_type = obj.type;
          old_icon = this.get_icon(obj);
          obj.type = type;
          if (old_icon === true || !t[old_type] || t[old_type].icon !== undefined2 && old_icon === t[old_type].icon) {
            this.set_icon(obj, t[type].icon !== undefined2 ? t[type].icon : true);
          }
          if (t[old_type] && t[old_type].li_attr !== undefined2 && typeof t[old_type].li_attr === "object") {
            for (k in t[old_type].li_attr) {
              if (t[old_type].li_attr.hasOwnProperty(k)) {
                if (k === "id") {
                  continue;
                } else if (k === "class") {
                  m[obj.id].li_attr["class"] = (m[obj.id].li_attr["class"] || "").replace(t[old_type].li_attr[k], "");
                  if (d) {
                    d.removeClass(t[old_type].li_attr[k]);
                  }
                } else if (m[obj.id].li_attr[k] === t[old_type].li_attr[k]) {
                  m[obj.id].li_attr[k] = null;
                  if (d) {
                    d.removeAttr(k);
                  }
                }
              }
            }
          }
          if (t[old_type] && t[old_type].a_attr !== undefined2 && typeof t[old_type].a_attr === "object") {
            for (k in t[old_type].a_attr) {
              if (t[old_type].a_attr.hasOwnProperty(k)) {
                if (k === "id") {
                  continue;
                } else if (k === "class") {
                  m[obj.id].a_attr["class"] = (m[obj.id].a_attr["class"] || "").replace(t[old_type].a_attr[k], "");
                  if (a) {
                    a.removeClass(t[old_type].a_attr[k]);
                  }
                } else if (m[obj.id].a_attr[k] === t[old_type].a_attr[k]) {
                  if (k === "href") {
                    m[obj.id].a_attr[k] = "#";
                    if (a) {
                      a.attr("href", "#");
                    }
                  } else {
                    delete m[obj.id].a_attr[k];
                    if (a) {
                      a.removeAttr(k);
                    }
                  }
                }
              }
            }
          }
          if (t[type].li_attr !== undefined2 && typeof t[type].li_attr === "object") {
            for (k in t[type].li_attr) {
              if (t[type].li_attr.hasOwnProperty(k)) {
                if (k === "id") {
                  continue;
                } else if (m[obj.id].li_attr[k] === undefined2) {
                  m[obj.id].li_attr[k] = t[type].li_attr[k];
                  if (d) {
                    if (k === "class") {
                      d.addClass(t[type].li_attr[k]);
                    } else {
                      d.attr(k, t[type].li_attr[k]);
                    }
                  }
                } else if (k === "class") {
                  m[obj.id].li_attr["class"] = t[type].li_attr[k] + " " + m[obj.id].li_attr["class"];
                  if (d) {
                    d.addClass(t[type].li_attr[k]);
                  }
                }
              }
            }
          }
          if (t[type].a_attr !== undefined2 && typeof t[type].a_attr === "object") {
            for (k in t[type].a_attr) {
              if (t[type].a_attr.hasOwnProperty(k)) {
                if (k === "id") {
                  continue;
                } else if (m[obj.id].a_attr[k] === undefined2) {
                  m[obj.id].a_attr[k] = t[type].a_attr[k];
                  if (a) {
                    if (k === "class") {
                      a.addClass(t[type].a_attr[k]);
                    } else {
                      a.attr(k, t[type].a_attr[k]);
                    }
                  }
                } else if (k === "href" && m[obj.id].a_attr[k] === "#") {
                  m[obj.id].a_attr["href"] = t[type].a_attr["href"];
                  if (a) {
                    a.attr("href", t[type].a_attr["href"]);
                  }
                } else if (k === "class") {
                  m[obj.id].a_attr["class"] = t[type].a_attr["class"] + " " + m[obj.id].a_attr["class"];
                  if (a) {
                    a.addClass(t[type].a_attr[k]);
                  }
                }
              }
            }
          }
          return true;
        };
      };
      $2.jstree.defaults.unique = {
        case_sensitive: false,
        trim_whitespace: false,
        duplicate: function(name, counter) {
          return name + " (" + counter + ")";
        }
      };
      $2.jstree.plugins.unique = function(options, parent) {
        this.check = function(chk, obj, par, pos, more) {
          if (parent.check.call(this, chk, obj, par, pos, more) === false) {
            return false;
          }
          obj = obj && obj.id ? obj : this.get_node(obj);
          par = par && par.id ? par : this.get_node(par);
          if (!par || !par.children) {
            return true;
          }
          var n = chk === "rename_node" ? pos : obj.text, c = [], s = this.settings.unique.case_sensitive, w = this.settings.unique.trim_whitespace, m = this._model.data, i, j, t;
          for (i = 0, j = par.children.length; i < j; i++) {
            t = m[par.children[i]].text;
            if (!s) {
              t = t.toLowerCase();
            }
            if (w) {
              t = t.replace(/^[\s\uFEFF\xA0]+|[\s\uFEFF\xA0]+$/g, "");
            }
            c.push(t);
          }
          if (!s) {
            n = n.toLowerCase();
          }
          if (w) {
            n = n.replace(/^[\s\uFEFF\xA0]+|[\s\uFEFF\xA0]+$/g, "");
          }
          switch (chk) {
            case "delete_node":
              return true;
            case "rename_node":
              t = obj.text || "";
              if (!s) {
                t = t.toLowerCase();
              }
              if (w) {
                t = t.replace(/^[\s\uFEFF\xA0]+|[\s\uFEFF\xA0]+$/g, "");
              }
              i = $2.inArray(n, c) === -1 || obj.text && t === n;
              if (!i) {
                this._data.core.last_error = {error: "check", plugin: "unique", id: "unique_01", reason: "Child with name " + n + " already exists. Preventing: " + chk, data: JSON.stringify({chk, pos, obj: obj && obj.id ? obj.id : false, par: par && par.id ? par.id : false})};
              }
              return i;
            case "create_node":
              i = $2.inArray(n, c) === -1;
              if (!i) {
                this._data.core.last_error = {error: "check", plugin: "unique", id: "unique_04", reason: "Child with name " + n + " already exists. Preventing: " + chk, data: JSON.stringify({chk, pos, obj: obj && obj.id ? obj.id : false, par: par && par.id ? par.id : false})};
              }
              return i;
            case "copy_node":
              i = $2.inArray(n, c) === -1;
              if (!i) {
                this._data.core.last_error = {error: "check", plugin: "unique", id: "unique_02", reason: "Child with name " + n + " already exists. Preventing: " + chk, data: JSON.stringify({chk, pos, obj: obj && obj.id ? obj.id : false, par: par && par.id ? par.id : false})};
              }
              return i;
            case "move_node":
              i = obj.parent === par.id && (!more || !more.is_multi) || $2.inArray(n, c) === -1;
              if (!i) {
                this._data.core.last_error = {error: "check", plugin: "unique", id: "unique_03", reason: "Child with name " + n + " already exists. Preventing: " + chk, data: JSON.stringify({chk, pos, obj: obj && obj.id ? obj.id : false, par: par && par.id ? par.id : false})};
              }
              return i;
          }
          return true;
        };
        this.create_node = function(par, node, pos, callback, is_loaded) {
          if (!node || node.text === undefined2) {
            if (par === null) {
              par = $2.jstree.root;
            }
            par = this.get_node(par);
            if (!par) {
              return parent.create_node.call(this, par, node, pos, callback, is_loaded);
            }
            pos = pos === undefined2 ? "last" : pos;
            if (!pos.toString().match(/^(before|after)$/) && !is_loaded && !this.is_loaded(par)) {
              return parent.create_node.call(this, par, node, pos, callback, is_loaded);
            }
            if (!node) {
              node = {};
            }
            var tmp, n, dpc, i, j, m = this._model.data, s = this.settings.unique.case_sensitive, w = this.settings.unique.trim_whitespace, cb = this.settings.unique.duplicate, t;
            n = tmp = this.get_string("New node");
            dpc = [];
            for (i = 0, j = par.children.length; i < j; i++) {
              t = m[par.children[i]].text;
              if (!s) {
                t = t.toLowerCase();
              }
              if (w) {
                t = t.replace(/^[\s\uFEFF\xA0]+|[\s\uFEFF\xA0]+$/g, "");
              }
              dpc.push(t);
            }
            i = 1;
            t = n;
            if (!s) {
              t = t.toLowerCase();
            }
            if (w) {
              t = t.replace(/^[\s\uFEFF\xA0]+|[\s\uFEFF\xA0]+$/g, "");
            }
            while ($2.inArray(t, dpc) !== -1) {
              n = cb.call(this, tmp, ++i).toString();
              t = n;
              if (!s) {
                t = t.toLowerCase();
              }
              if (w) {
                t = t.replace(/^[\s\uFEFF\xA0]+|[\s\uFEFF\xA0]+$/g, "");
              }
            }
            node.text = n;
          }
          return parent.create_node.call(this, par, node, pos, callback, is_loaded);
        };
      };
      var div = document2.createElement("DIV");
      div.setAttribute("unselectable", "on");
      div.setAttribute("role", "presentation");
      div.className = "jstree-wholerow";
      div.innerHTML = "&#160;";
      $2.jstree.plugins.wholerow = function(options, parent) {
        this.bind = function() {
          parent.bind.call(this);
          this.element.on("ready.jstree set_state.jstree", $2.proxy(function() {
            this.hide_dots();
          }, this)).on("init.jstree loading.jstree ready.jstree", $2.proxy(function() {
            this.get_container_ul().addClass("jstree-wholerow-ul");
          }, this)).on("deselect_all.jstree", $2.proxy(function(e, data) {
            this.element.find(".jstree-wholerow-clicked").removeClass("jstree-wholerow-clicked");
          }, this)).on("changed.jstree", $2.proxy(function(e, data) {
            this.element.find(".jstree-wholerow-clicked").removeClass("jstree-wholerow-clicked");
            var tmp = false, i, j;
            for (i = 0, j = data.selected.length; i < j; i++) {
              tmp = this.get_node(data.selected[i], true);
              if (tmp && tmp.length) {
                tmp.children(".jstree-wholerow").addClass("jstree-wholerow-clicked");
              }
            }
          }, this)).on("open_node.jstree", $2.proxy(function(e, data) {
            this.get_node(data.node, true).find(".jstree-clicked").parent().children(".jstree-wholerow").addClass("jstree-wholerow-clicked");
          }, this)).on("hover_node.jstree dehover_node.jstree", $2.proxy(function(e, data) {
            if (e.type === "hover_node" && this.is_disabled(data.node)) {
              return;
            }
            this.get_node(data.node, true).children(".jstree-wholerow")[e.type === "hover_node" ? "addClass" : "removeClass"]("jstree-wholerow-hovered");
          }, this)).on("contextmenu.jstree", ".jstree-wholerow", $2.proxy(function(e) {
            if (this._data.contextmenu) {
              e.preventDefault();
              var tmp = $2.Event("contextmenu", {metaKey: e.metaKey, ctrlKey: e.ctrlKey, altKey: e.altKey, shiftKey: e.shiftKey, pageX: e.pageX, pageY: e.pageY});
              $2(e.currentTarget).closest(".jstree-node").children(".jstree-anchor").first().trigger(tmp);
            }
          }, this)).on("click.jstree", ".jstree-wholerow", function(e) {
            e.stopImmediatePropagation();
            var tmp = $2.Event("click", {metaKey: e.metaKey, ctrlKey: e.ctrlKey, altKey: e.altKey, shiftKey: e.shiftKey});
            $2(e.currentTarget).closest(".jstree-node").children(".jstree-anchor").first().trigger(tmp).focus();
          }).on("dblclick.jstree", ".jstree-wholerow", function(e) {
            e.stopImmediatePropagation();
            var tmp = $2.Event("dblclick", {metaKey: e.metaKey, ctrlKey: e.ctrlKey, altKey: e.altKey, shiftKey: e.shiftKey});
            $2(e.currentTarget).closest(".jstree-node").children(".jstree-anchor").first().trigger(tmp).focus();
          }).on("click.jstree", ".jstree-leaf > .jstree-ocl", $2.proxy(function(e) {
            e.stopImmediatePropagation();
            var tmp = $2.Event("click", {metaKey: e.metaKey, ctrlKey: e.ctrlKey, altKey: e.altKey, shiftKey: e.shiftKey});
            $2(e.currentTarget).closest(".jstree-node").children(".jstree-anchor").first().trigger(tmp).focus();
          }, this)).on("mouseover.jstree", ".jstree-wholerow, .jstree-icon", $2.proxy(function(e) {
            e.stopImmediatePropagation();
            if (!this.is_disabled(e.currentTarget)) {
              this.hover_node(e.currentTarget);
            }
            return false;
          }, this)).on("mouseleave.jstree", ".jstree-node", $2.proxy(function(e) {
            this.dehover_node(e.currentTarget);
          }, this));
        };
        this.teardown = function() {
          if (this.settings.wholerow) {
            this.element.find(".jstree-wholerow").remove();
          }
          parent.teardown.call(this);
        };
        this.redraw_node = function(obj, deep, callback, force_render) {
          obj = parent.redraw_node.apply(this, arguments);
          if (obj) {
            var tmp = div.cloneNode(true);
            if ($2.inArray(obj.id, this._data.core.selected) !== -1) {
              tmp.className += " jstree-wholerow-clicked";
            }
            if (this._data.core.focused && this._data.core.focused === obj.id) {
              tmp.className += " jstree-wholerow-hovered";
            }
            obj.insertBefore(tmp, obj.childNodes[0]);
          }
          return obj;
        };
      };
      if (window.customElements && Object && Object.create) {
        var proto = Object.create(HTMLElement.prototype);
        proto.createdCallback = function() {
          var c = {core: {}, plugins: []}, i;
          for (i in $2.jstree.plugins) {
            if ($2.jstree.plugins.hasOwnProperty(i) && this.attributes[i]) {
              c.plugins.push(i);
              if (this.getAttribute(i) && JSON.parse(this.getAttribute(i))) {
                c[i] = JSON.parse(this.getAttribute(i));
              }
            }
          }
          for (i in $2.jstree.defaults.core) {
            if ($2.jstree.defaults.core.hasOwnProperty(i) && this.attributes[i]) {
              c.core[i] = JSON.parse(this.getAttribute(i)) || this.getAttribute(i);
            }
          }
          $2(this).jstree(c);
        };
        try {
          window.customElements.define("vakata-jstree", function() {
          }, {prototype: proto});
        } catch (ignore) {
        }
      }
    });
  });

  // src/js/projects.js
  var import_jquery = __toModule(require_jquery());
  var import_jquery2 = __toModule(require_jquery());
  var import_jstree = __toModule(require_jstree());
  window.$ = window.jQuery = import_jquery.default;
  String.prototype.capitalize = function() {
    return this.charAt(0).toUpperCase() + this.slice(1);
  };
  var createIframeMarkup = function(object_id) {
    return `
  <div id="preview-dialog-bg">
    <iframe
    title="Inline Frame Example"
    id="preview-dialog"
    width="640"
    height="360"
    src="http://localhost:5000/projects/objects/${object_id}/preview" />
  </div>
  `;
  };
  (0, import_jquery2.default)(function() {
    (0, import_jquery2.default)("#jstree").jstree({
      sort: 1,
      core: {
        data: {
          url: "/projects/json",
          dataType: "json"
        },
        themes: {
          name: "default"
        }
      },
      plugins: ["checkbox", "sort", "types", "wholerow"],
      sort: function(a, b) {
        return this.get_type(a) === this.get_type(b) ? this.get_text(a) > this.get_text(b) ? 1 : -1 : this.get_type(a) >= this.get_type(b) ? 1 : -1;
      }
    });
    (0, import_jquery2.default)("#jstree").on("ready.jstree", function(e, data) {
      return data.instance.open_node("#j1_1_anchor", false, true);
    });
    (0, import_jquery2.default)("#jstree").on("select_node.jstree deselect_node.jstree", function(e) {
      var selected_titles = [];
      var selectedIndexes = (0, import_jquery2.default)("#jstree").jstree("get_selected", true);
      import_jquery2.default.each(selectedIndexes, function() {
        var tree = (0, import_jquery2.default)("#jstree").jstree();
        if (tree.is_leaf(this)) {
          selected_titles.push(tree.get_path(this, "/"));
        }
      });
      if (selected_titles.length > 0) {
        (0, import_jquery2.default)("#tree_data").val(JSON.stringify(selected_titles));
      } else {
        (0, import_jquery2.default)("#tree_data").removeAttr("value");
      }
    });
    btn = (0, import_jquery2.default)("#btn-toggle-job");
    if (btn.hasClass("btn-pending")) {
      btn.one("click", function() {
        import_jquery2.default.ajax({
          type: "PUT",
          url: window.location.href + "/toggle",
          dataType: "json"
        }).done(function(data) {
          btn.removeClass("btn-" + data["old_status"]);
          btn.text(data["new_status"].capitalize());
          btn.addClass("btn-" + data["new_status"]);
        }).fail(function(data, textStatus, xhr) {
          console.log("error", data.status);
          console.log("STATUS: " + xhr);
          return false;
        });
        return false;
      });
    }
    newBtn = (0, import_jquery2.default)(".btn-new");
    newBtn.removeAttr("href");
    newBtn.on("click", function() {
      (0, import_jquery2.default)("body").prepend(createIframeMarkup);
    });
    previewButtons = (0, import_jquery2.default)(".btn-object-preview");
    previewButtons.each(function() {
      (0, import_jquery2.default)(this).bind("click", function() {
        regex = /\d$/g;
        var previewId = (0, import_jquery2.default)(this).attr("id").match(regex);
        console.log(previewId);
        (0, import_jquery2.default)("body").prepend(createIframeMarkup(previewId));
        (0, import_jquery2.default)(document).on("click", "#preview-dialog-bg", function() {
          (0, import_jquery2.default)(this).remove();
        });
      });
      (0, import_jquery2.default)(this).removeAttr("href");
    });
  });
})();
